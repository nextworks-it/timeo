/*
 * tapi-arof API
 * tapi-arof API generated from tapi-arof.yang
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ArofConnectionEndPointSpec;
import io.swagger.client.model.ArofPropertiesPac;
import io.swagger.client.model.BandwidthProfile;
import io.swagger.client.model.Capacity;
import io.swagger.client.model.CapacityValue;
import io.swagger.client.model.CepList;
import io.swagger.client.model.ConnectionEndPointRef;
import io.swagger.client.model.ConnectionEndPointSchema;
import io.swagger.client.model.CostCharacteristic;
import io.swagger.client.model.FrequencyConstraint;
import io.swagger.client.model.InterRuleGroup;
import io.swagger.client.model.LatencyCharacteristic;
import io.swagger.client.model.Link;
import io.swagger.client.model.NameAndValue;
import io.swagger.client.model.NetworkTopologyService;
import io.swagger.client.model.Node;
import io.swagger.client.model.NodeEdgePointRef;
import io.swagger.client.model.NodeRuleGroup;
import io.swagger.client.model.NodeRuleGroupRef;
import io.swagger.client.model.OwnedNodeEdgePointSchema;
import io.swagger.client.model.ResilienceType;
import io.swagger.client.model.RiskCharacteristic;
import io.swagger.client.model.Rule;
import io.swagger.client.model.ServiceInterfacePointRef;
import io.swagger.client.model.SpectrumBand;
import io.swagger.client.model.Topology;
import io.swagger.client.model.TopologyContext;
import io.swagger.client.model.TopologyRef;
import io.swagger.client.model.ValidationMechanism;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TopologyContextApi {
    private ApiClient apiClient;

    public TopologyContextApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TopologyContextApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createContextTopologyContextTopologyContextById
     * @param topologyContext topology-contextbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextTopologyContextTopologyContextByIdCall(TopologyContext topologyContext, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = topologyContext;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextTopologyContextTopologyContextByIdValidateBeforeCall(TopologyContext topologyContext, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'topologyContext' is set
        if (topologyContext == null) {
            throw new ApiException("Missing the required parameter 'topologyContext' when calling createContextTopologyContextTopologyContextById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextTopologyContextTopologyContextByIdCall(topologyContext, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create topology-context by ID
     * Create operation of resource: topology-context
     * @param topologyContext topology-contextbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextTopologyContextTopologyContextById(TopologyContext topologyContext) throws ApiException {
        createContextTopologyContextTopologyContextByIdWithHttpInfo(topologyContext);
    }

    /**
     * Create topology-context by ID
     * Create operation of resource: topology-context
     * @param topologyContext topology-contextbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextTopologyContextTopologyContextByIdWithHttpInfo(TopologyContext topologyContext) throws ApiException {
        com.squareup.okhttp.Call call = createContextTopologyContextTopologyContextByIdValidateBeforeCall(topologyContext, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create topology-context by ID (asynchronously)
     * Create operation of resource: topology-context
     * @param topologyContext topology-contextbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextTopologyContextTopologyContextByIdAsync(TopologyContext topologyContext, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextTopologyContextTopologyContextByIdValidateBeforeCall(topologyContext, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecById
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param arofConnectionEndPointSpec arof-connection-end-point-specbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, ArofConnectionEndPointSpec arofConnectionEndPointSpec, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = arofConnectionEndPointSpec;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/cep-list/connection-end-point/{connection_end_point_uuid}/arof-connection-end-point-spec/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, ArofConnectionEndPointSpec arofConnectionEndPointSpec, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecById(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling createContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecById(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling createContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecById(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling createContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecById(Async)");
        }
        
        // verify the required parameter 'arofConnectionEndPointSpec' is set
        if (arofConnectionEndPointSpec == null) {
            throw new ApiException("Missing the required parameter 'arofConnectionEndPointSpec' when calling createContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdCall(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, arofConnectionEndPointSpec, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create arof-connection-end-point-spec by ID
     * Create operation of resource: arof-connection-end-point-spec
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param arofConnectionEndPointSpec arof-connection-end-point-specbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecById(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, ArofConnectionEndPointSpec arofConnectionEndPointSpec) throws ApiException {
        createContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, arofConnectionEndPointSpec);
    }

    /**
     * Create arof-connection-end-point-spec by ID
     * Create operation of resource: arof-connection-end-point-spec
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param arofConnectionEndPointSpec arof-connection-end-point-specbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, ArofConnectionEndPointSpec arofConnectionEndPointSpec) throws ApiException {
        com.squareup.okhttp.Call call = createContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, arofConnectionEndPointSpec, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create arof-connection-end-point-spec by ID (asynchronously)
     * Create operation of resource: arof-connection-end-point-spec
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param arofConnectionEndPointSpec arof-connection-end-point-specbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, ArofConnectionEndPointSpec arofConnectionEndPointSpec, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, arofConnectionEndPointSpec, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointConnectionEndPointById
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param connectionEndPoint connection-end-pointbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointConnectionEndPointByIdCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, ConnectionEndPointSchema connectionEndPoint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = connectionEndPoint;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/cep-list/connection-end-point/{connection_end_point_uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointConnectionEndPointByIdValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, ConnectionEndPointSchema connectionEndPoint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointConnectionEndPointById(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling createContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointConnectionEndPointById(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling createContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointConnectionEndPointById(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling createContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointConnectionEndPointById(Async)");
        }
        
        // verify the required parameter 'connectionEndPoint' is set
        if (connectionEndPoint == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPoint' when calling createContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointConnectionEndPointById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointConnectionEndPointByIdCall(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, connectionEndPoint, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create connection-end-point by ID
     * Create operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param connectionEndPoint connection-end-pointbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointConnectionEndPointById(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, ConnectionEndPointSchema connectionEndPoint) throws ApiException {
        createContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointConnectionEndPointByIdWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, connectionEndPoint);
    }

    /**
     * Create connection-end-point by ID
     * Create operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param connectionEndPoint connection-end-pointbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointConnectionEndPointByIdWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, ConnectionEndPointSchema connectionEndPoint) throws ApiException {
        com.squareup.okhttp.Call call = createContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointConnectionEndPointByIdValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, connectionEndPoint, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create connection-end-point by ID (asynchronously)
     * Create operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param connectionEndPoint connection-end-pointbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointConnectionEndPointByIdAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, ConnectionEndPointSchema connectionEndPoint, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointConnectionEndPointByIdValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, connectionEndPoint, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointNameNameById
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointNameNameByIdCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = name;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/cep-list/connection-end-point/{connection_end_point_uuid}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointNameNameByIdValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling createContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling createContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling createContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling createContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling createContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = createContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointNameNameByIdCall(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, valueName, name, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create name by ID
     * Create operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointNameNameById(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, String valueName, NameAndValue name) throws ApiException {
        createContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointNameNameByIdWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, valueName, name);
    }

    /**
     * Create name by ID
     * Create operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointNameNameByIdWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, String valueName, NameAndValue name) throws ApiException {
        com.squareup.okhttp.Call call = createContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointNameNameByIdValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, valueName, name, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create name by ID (asynchronously)
     * Create operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointNameNameByIdAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, String valueName, NameAndValue name, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointNameNameByIdValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, valueName, name, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextTopologyContextTopologyContextById
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextTopologyContextTopologyContextByIdCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextTopologyContextTopologyContextByIdValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = deleteContextTopologyContextTopologyContextByIdCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete topology-context by ID
     * Delete operation of resource: topology-context
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextTopologyContextTopologyContextById() throws ApiException {
        deleteContextTopologyContextTopologyContextByIdWithHttpInfo();
    }

    /**
     * Delete topology-context by ID
     * Delete operation of resource: topology-context
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextTopologyContextTopologyContextByIdWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = deleteContextTopologyContextTopologyContextByIdValidateBeforeCall(null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete topology-context by ID (asynchronously)
     * Delete operation of resource: topology-context
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextTopologyContextTopologyContextByIdAsync(final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextTopologyContextTopologyContextByIdValidateBeforeCall(progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecById
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/cep-list/connection-end-point/{connection_end_point_uuid}/arof-connection-end-point-spec/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecById(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling deleteContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecById(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling deleteContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecById(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling deleteContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdCall(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete arof-connection-end-point-spec by ID
     * Delete operation of resource: arof-connection-end-point-spec
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecById(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid) throws ApiException {
        deleteContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid);
    }

    /**
     * Delete arof-connection-end-point-spec by ID
     * Delete operation of resource: arof-connection-end-point-spec
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete arof-connection-end-point-spec by ID (asynchronously)
     * Delete operation of resource: arof-connection-end-point-spec
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointConnectionEndPointById
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointConnectionEndPointByIdCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/cep-list/connection-end-point/{connection_end_point_uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointConnectionEndPointByIdValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointConnectionEndPointById(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling deleteContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointConnectionEndPointById(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling deleteContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointConnectionEndPointById(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling deleteContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointConnectionEndPointById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointConnectionEndPointByIdCall(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete connection-end-point by ID
     * Delete operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointConnectionEndPointById(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid) throws ApiException {
        deleteContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointConnectionEndPointByIdWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid);
    }

    /**
     * Delete connection-end-point by ID
     * Delete operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointConnectionEndPointByIdWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointConnectionEndPointByIdValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete connection-end-point by ID (asynchronously)
     * Delete operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointConnectionEndPointByIdAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointConnectionEndPointByIdValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointNameNameById
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointNameNameByIdCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/cep-list/connection-end-point/{connection_end_point_uuid}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointNameNameByIdValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling deleteContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling deleteContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling deleteContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling deleteContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointNameNameByIdCall(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, valueName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete name by ID
     * Delete operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointNameNameById(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, String valueName) throws ApiException {
        deleteContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointNameNameByIdWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, valueName);
    }

    /**
     * Delete name by ID
     * Delete operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointNameNameByIdWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, String valueName) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointNameNameByIdValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, valueName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete name by ID (asynchronously)
     * Delete operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointNameNameByIdAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, String valueName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointNameNameByIdValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, valueName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextNwTopologyServiceNameName
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextNwTopologyServiceNameNameCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/nw-topology-service/name/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextNwTopologyServiceNameNameValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextNwTopologyServiceNameNameCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyContextNwTopologyServiceNameName() throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyContextNwTopologyServiceNameNameWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyContextNwTopologyServiceNameNameWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextNwTopologyServiceNameNameValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name (asynchronously)
     * Retrieve operation of resource: name
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextNwTopologyServiceNameNameAsync(final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextNwTopologyServiceNameNameValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextNwTopologyServiceNameNameById
     * @param valueName ID of value_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextNwTopologyServiceNameNameByIdCall(String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/nw-topology-service/name/{value_name}/"
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextNwTopologyServiceNameNameByIdValidateBeforeCall(String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling retrieveContextTopologyContextNwTopologyServiceNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextNwTopologyServiceNameNameByIdCall(valueName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param valueName ID of value_name (required)
     * @return NameAndValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NameAndValue retrieveContextTopologyContextNwTopologyServiceNameNameById(String valueName) throws ApiException {
        ApiResponse<NameAndValue> resp = retrieveContextTopologyContextNwTopologyServiceNameNameByIdWithHttpInfo(valueName);
        return resp.getData();
    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param valueName ID of value_name (required)
     * @return ApiResponse&lt;NameAndValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NameAndValue> retrieveContextTopologyContextNwTopologyServiceNameNameByIdWithHttpInfo(String valueName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextNwTopologyServiceNameNameByIdValidateBeforeCall(valueName, null, null);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name by ID (asynchronously)
     * Retrieve operation of resource: name
     * @param valueName ID of value_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextNwTopologyServiceNameNameByIdAsync(String valueName, final ApiCallback<NameAndValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextNwTopologyServiceNameNameByIdValidateBeforeCall(valueName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextNwTopologyServiceNwTopologyService
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextNwTopologyServiceNwTopologyServiceCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/nw-topology-service/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextNwTopologyServiceNwTopologyServiceValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextNwTopologyServiceNwTopologyServiceCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve nw-topology-service
     * Retrieve operation of resource: nw-topology-service
     * @return NetworkTopologyService
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NetworkTopologyService retrieveContextTopologyContextNwTopologyServiceNwTopologyService() throws ApiException {
        ApiResponse<NetworkTopologyService> resp = retrieveContextTopologyContextNwTopologyServiceNwTopologyServiceWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieve nw-topology-service
     * Retrieve operation of resource: nw-topology-service
     * @return ApiResponse&lt;NetworkTopologyService&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NetworkTopologyService> retrieveContextTopologyContextNwTopologyServiceNwTopologyServiceWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextNwTopologyServiceNwTopologyServiceValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<NetworkTopologyService>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve nw-topology-service (asynchronously)
     * Retrieve operation of resource: nw-topology-service
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextNwTopologyServiceNwTopologyServiceAsync(final ApiCallback<NetworkTopologyService> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextNwTopologyServiceNwTopologyServiceValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NetworkTopologyService>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextNwTopologyServiceTopologyTopology
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextNwTopologyServiceTopologyTopologyCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/nw-topology-service/topology/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextNwTopologyServiceTopologyTopologyValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextNwTopologyServiceTopologyTopologyCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve topology
     * Retrieve operation of resource: topology
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyContextNwTopologyServiceTopologyTopology() throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyContextNwTopologyServiceTopologyTopologyWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieve topology
     * Retrieve operation of resource: topology
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyContextNwTopologyServiceTopologyTopologyWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextNwTopologyServiceTopologyTopologyValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve topology (asynchronously)
     * Retrieve operation of resource: topology
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextNwTopologyServiceTopologyTopologyAsync(final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextNwTopologyServiceTopologyTopologyValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextNwTopologyServiceTopologyTopologyById
     * @param topologyUuid ID of topology_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextNwTopologyServiceTopologyTopologyByIdCall(String topologyUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/nw-topology-service/topology/{topology_uuid}/"
            .replaceAll("\\{" + "topology_uuid" + "\\}", apiClient.escapeString(topologyUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextNwTopologyServiceTopologyTopologyByIdValidateBeforeCall(String topologyUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'topologyUuid' is set
        if (topologyUuid == null) {
            throw new ApiException("Missing the required parameter 'topologyUuid' when calling retrieveContextTopologyContextNwTopologyServiceTopologyTopologyById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextNwTopologyServiceTopologyTopologyByIdCall(topologyUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve topology by ID
     * Retrieve operation of resource: topology
     * @param topologyUuid ID of topology_uuid (required)
     * @return TopologyRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TopologyRef retrieveContextTopologyContextNwTopologyServiceTopologyTopologyById(String topologyUuid) throws ApiException {
        ApiResponse<TopologyRef> resp = retrieveContextTopologyContextNwTopologyServiceTopologyTopologyByIdWithHttpInfo(topologyUuid);
        return resp.getData();
    }

    /**
     * Retrieve topology by ID
     * Retrieve operation of resource: topology
     * @param topologyUuid ID of topology_uuid (required)
     * @return ApiResponse&lt;TopologyRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TopologyRef> retrieveContextTopologyContextNwTopologyServiceTopologyTopologyByIdWithHttpInfo(String topologyUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextNwTopologyServiceTopologyTopologyByIdValidateBeforeCall(topologyUuid, null, null);
        Type localVarReturnType = new TypeToken<TopologyRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve topology by ID (asynchronously)
     * Retrieve operation of resource: topology
     * @param topologyUuid ID of topology_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextNwTopologyServiceTopologyTopologyByIdAsync(String topologyUuid, final ApiCallback<TopologyRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextNwTopologyServiceTopologyTopologyByIdValidateBeforeCall(topologyUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TopologyRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyContext
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyContextCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyContextValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyContextCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve topology-context
     * Retrieve operation of resource: topology-context
     * @return TopologyContext
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TopologyContext retrieveContextTopologyContextTopologyContext() throws ApiException {
        ApiResponse<TopologyContext> resp = retrieveContextTopologyContextTopologyContextWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieve topology-context
     * Retrieve operation of resource: topology-context
     * @return ApiResponse&lt;TopologyContext&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TopologyContext> retrieveContextTopologyContextTopologyContextWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyContextValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<TopologyContext>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve topology-context (asynchronously)
     * Retrieve operation of resource: topology-context
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyContextAsync(final ApiCallback<TopologyContext> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyContextValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TopologyContext>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyLinkAvailableCapacityAvailableCapacity
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyLinkAvailableCapacityAvailableCapacityCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/link/{link_uuid}/available-capacity/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "link_uuid" + "\\}", apiClient.escapeString(linkUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyLinkAvailableCapacityAvailableCapacityValidateBeforeCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyLinkAvailableCapacityAvailableCapacity(Async)");
        }
        
        // verify the required parameter 'linkUuid' is set
        if (linkUuid == null) {
            throw new ApiException("Missing the required parameter 'linkUuid' when calling retrieveContextTopologyContextTopologyLinkAvailableCapacityAvailableCapacity(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyLinkAvailableCapacityAvailableCapacityCall(uuid, linkUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve available-capacity
     * Retrieve operation of resource: available-capacity
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return Capacity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Capacity retrieveContextTopologyContextTopologyLinkAvailableCapacityAvailableCapacity(String uuid, String linkUuid) throws ApiException {
        ApiResponse<Capacity> resp = retrieveContextTopologyContextTopologyLinkAvailableCapacityAvailableCapacityWithHttpInfo(uuid, linkUuid);
        return resp.getData();
    }

    /**
     * Retrieve available-capacity
     * Retrieve operation of resource: available-capacity
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return ApiResponse&lt;Capacity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Capacity> retrieveContextTopologyContextTopologyLinkAvailableCapacityAvailableCapacityWithHttpInfo(String uuid, String linkUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyLinkAvailableCapacityAvailableCapacityValidateBeforeCall(uuid, linkUuid, null, null);
        Type localVarReturnType = new TypeToken<Capacity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve available-capacity (asynchronously)
     * Retrieve operation of resource: available-capacity
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyLinkAvailableCapacityAvailableCapacityAsync(String uuid, String linkUuid, final ApiCallback<Capacity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyLinkAvailableCapacityAvailableCapacityValidateBeforeCall(uuid, linkUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Capacity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyLinkAvailableCapacityBandwidthProfileBandwidthProfile
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyLinkAvailableCapacityBandwidthProfileBandwidthProfileCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/link/{link_uuid}/available-capacity/bandwidth-profile/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "link_uuid" + "\\}", apiClient.escapeString(linkUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyLinkAvailableCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyLinkAvailableCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        
        // verify the required parameter 'linkUuid' is set
        if (linkUuid == null) {
            throw new ApiException("Missing the required parameter 'linkUuid' when calling retrieveContextTopologyContextTopologyLinkAvailableCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyLinkAvailableCapacityBandwidthProfileBandwidthProfileCall(uuid, linkUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve bandwidth-profile
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return BandwidthProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BandwidthProfile retrieveContextTopologyContextTopologyLinkAvailableCapacityBandwidthProfileBandwidthProfile(String uuid, String linkUuid) throws ApiException {
        ApiResponse<BandwidthProfile> resp = retrieveContextTopologyContextTopologyLinkAvailableCapacityBandwidthProfileBandwidthProfileWithHttpInfo(uuid, linkUuid);
        return resp.getData();
    }

    /**
     * Retrieve bandwidth-profile
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return ApiResponse&lt;BandwidthProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BandwidthProfile> retrieveContextTopologyContextTopologyLinkAvailableCapacityBandwidthProfileBandwidthProfileWithHttpInfo(String uuid, String linkUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyLinkAvailableCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(uuid, linkUuid, null, null);
        Type localVarReturnType = new TypeToken<BandwidthProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve bandwidth-profile (asynchronously)
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyLinkAvailableCapacityBandwidthProfileBandwidthProfileAsync(String uuid, String linkUuid, final ApiCallback<BandwidthProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyLinkAvailableCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(uuid, linkUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BandwidthProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyLinkAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyLinkAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/link/{link_uuid}/available-capacity/bandwidth-profile/committed-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "link_uuid" + "\\}", apiClient.escapeString(linkUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyLinkAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyLinkAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        
        // verify the required parameter 'linkUuid' is set
        if (linkUuid == null) {
            throw new ApiException("Missing the required parameter 'linkUuid' when calling retrieveContextTopologyContextTopologyLinkAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyLinkAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeCall(uuid, linkUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve committed-burst-size
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyContextTopologyLinkAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(String uuid, String linkUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyContextTopologyLinkAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeWithHttpInfo(uuid, linkUuid);
        return resp.getData();
    }

    /**
     * Retrieve committed-burst-size
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyContextTopologyLinkAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeWithHttpInfo(String uuid, String linkUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyLinkAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(uuid, linkUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve committed-burst-size (asynchronously)
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyLinkAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeAsync(String uuid, String linkUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyLinkAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(uuid, linkUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyLinkAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyLinkAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/link/{link_uuid}/available-capacity/bandwidth-profile/committed-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "link_uuid" + "\\}", apiClient.escapeString(linkUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyLinkAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyLinkAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        
        // verify the required parameter 'linkUuid' is set
        if (linkUuid == null) {
            throw new ApiException("Missing the required parameter 'linkUuid' when calling retrieveContextTopologyContextTopologyLinkAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyLinkAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateCall(uuid, linkUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve committed-information-rate
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyContextTopologyLinkAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(String uuid, String linkUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyContextTopologyLinkAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateWithHttpInfo(uuid, linkUuid);
        return resp.getData();
    }

    /**
     * Retrieve committed-information-rate
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyContextTopologyLinkAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateWithHttpInfo(String uuid, String linkUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyLinkAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(uuid, linkUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve committed-information-rate (asynchronously)
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyLinkAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateAsync(String uuid, String linkUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyLinkAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(uuid, linkUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyLinkAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyLinkAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/link/{link_uuid}/available-capacity/bandwidth-profile/peak-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "link_uuid" + "\\}", apiClient.escapeString(linkUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyLinkAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyLinkAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        
        // verify the required parameter 'linkUuid' is set
        if (linkUuid == null) {
            throw new ApiException("Missing the required parameter 'linkUuid' when calling retrieveContextTopologyContextTopologyLinkAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyLinkAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeCall(uuid, linkUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve peak-burst-size
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyContextTopologyLinkAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize(String uuid, String linkUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyContextTopologyLinkAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeWithHttpInfo(uuid, linkUuid);
        return resp.getData();
    }

    /**
     * Retrieve peak-burst-size
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyContextTopologyLinkAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeWithHttpInfo(String uuid, String linkUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyLinkAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(uuid, linkUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve peak-burst-size (asynchronously)
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyLinkAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeAsync(String uuid, String linkUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyLinkAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(uuid, linkUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyLinkAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyLinkAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/link/{link_uuid}/available-capacity/bandwidth-profile/peak-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "link_uuid" + "\\}", apiClient.escapeString(linkUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyLinkAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyLinkAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        
        // verify the required parameter 'linkUuid' is set
        if (linkUuid == null) {
            throw new ApiException("Missing the required parameter 'linkUuid' when calling retrieveContextTopologyContextTopologyLinkAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyLinkAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateCall(uuid, linkUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve peak-information-rate
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyContextTopologyLinkAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate(String uuid, String linkUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyContextTopologyLinkAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateWithHttpInfo(uuid, linkUuid);
        return resp.getData();
    }

    /**
     * Retrieve peak-information-rate
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyContextTopologyLinkAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateWithHttpInfo(String uuid, String linkUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyLinkAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(uuid, linkUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve peak-information-rate (asynchronously)
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyLinkAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateAsync(String uuid, String linkUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyLinkAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(uuid, linkUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyLinkAvailableCapacityTotalSizeTotalSize
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyLinkAvailableCapacityTotalSizeTotalSizeCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/link/{link_uuid}/available-capacity/total-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "link_uuid" + "\\}", apiClient.escapeString(linkUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyLinkAvailableCapacityTotalSizeTotalSizeValidateBeforeCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyLinkAvailableCapacityTotalSizeTotalSize(Async)");
        }
        
        // verify the required parameter 'linkUuid' is set
        if (linkUuid == null) {
            throw new ApiException("Missing the required parameter 'linkUuid' when calling retrieveContextTopologyContextTopologyLinkAvailableCapacityTotalSizeTotalSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyLinkAvailableCapacityTotalSizeTotalSizeCall(uuid, linkUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve total-size
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyContextTopologyLinkAvailableCapacityTotalSizeTotalSize(String uuid, String linkUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyContextTopologyLinkAvailableCapacityTotalSizeTotalSizeWithHttpInfo(uuid, linkUuid);
        return resp.getData();
    }

    /**
     * Retrieve total-size
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyContextTopologyLinkAvailableCapacityTotalSizeTotalSizeWithHttpInfo(String uuid, String linkUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyLinkAvailableCapacityTotalSizeTotalSizeValidateBeforeCall(uuid, linkUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve total-size (asynchronously)
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyLinkAvailableCapacityTotalSizeTotalSizeAsync(String uuid, String linkUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyLinkAvailableCapacityTotalSizeTotalSizeValidateBeforeCall(uuid, linkUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyLinkCostCharacteristicCostCharacteristic
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyLinkCostCharacteristicCostCharacteristicCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/link/{link_uuid}/cost-characteristic/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "link_uuid" + "\\}", apiClient.escapeString(linkUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyLinkCostCharacteristicCostCharacteristicValidateBeforeCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyLinkCostCharacteristicCostCharacteristic(Async)");
        }
        
        // verify the required parameter 'linkUuid' is set
        if (linkUuid == null) {
            throw new ApiException("Missing the required parameter 'linkUuid' when calling retrieveContextTopologyContextTopologyLinkCostCharacteristicCostCharacteristic(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyLinkCostCharacteristicCostCharacteristicCall(uuid, linkUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve cost-characteristic
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyContextTopologyLinkCostCharacteristicCostCharacteristic(String uuid, String linkUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyContextTopologyLinkCostCharacteristicCostCharacteristicWithHttpInfo(uuid, linkUuid);
        return resp.getData();
    }

    /**
     * Retrieve cost-characteristic
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyContextTopologyLinkCostCharacteristicCostCharacteristicWithHttpInfo(String uuid, String linkUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyLinkCostCharacteristicCostCharacteristicValidateBeforeCall(uuid, linkUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve cost-characteristic (asynchronously)
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyLinkCostCharacteristicCostCharacteristicAsync(String uuid, String linkUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyLinkCostCharacteristicCostCharacteristicValidateBeforeCall(uuid, linkUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyLinkCostCharacteristicCostCharacteristicById
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param costName ID of cost_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyLinkCostCharacteristicCostCharacteristicByIdCall(String uuid, String linkUuid, String costName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/link/{link_uuid}/cost-characteristic/{cost_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "link_uuid" + "\\}", apiClient.escapeString(linkUuid.toString()))
            .replaceAll("\\{" + "cost_name" + "\\}", apiClient.escapeString(costName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyLinkCostCharacteristicCostCharacteristicByIdValidateBeforeCall(String uuid, String linkUuid, String costName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyLinkCostCharacteristicCostCharacteristicById(Async)");
        }
        
        // verify the required parameter 'linkUuid' is set
        if (linkUuid == null) {
            throw new ApiException("Missing the required parameter 'linkUuid' when calling retrieveContextTopologyContextTopologyLinkCostCharacteristicCostCharacteristicById(Async)");
        }
        
        // verify the required parameter 'costName' is set
        if (costName == null) {
            throw new ApiException("Missing the required parameter 'costName' when calling retrieveContextTopologyContextTopologyLinkCostCharacteristicCostCharacteristicById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyLinkCostCharacteristicCostCharacteristicByIdCall(uuid, linkUuid, costName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve cost-characteristic by ID
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param costName ID of cost_name (required)
     * @return CostCharacteristic
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CostCharacteristic retrieveContextTopologyContextTopologyLinkCostCharacteristicCostCharacteristicById(String uuid, String linkUuid, String costName) throws ApiException {
        ApiResponse<CostCharacteristic> resp = retrieveContextTopologyContextTopologyLinkCostCharacteristicCostCharacteristicByIdWithHttpInfo(uuid, linkUuid, costName);
        return resp.getData();
    }

    /**
     * Retrieve cost-characteristic by ID
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param costName ID of cost_name (required)
     * @return ApiResponse&lt;CostCharacteristic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CostCharacteristic> retrieveContextTopologyContextTopologyLinkCostCharacteristicCostCharacteristicByIdWithHttpInfo(String uuid, String linkUuid, String costName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyLinkCostCharacteristicCostCharacteristicByIdValidateBeforeCall(uuid, linkUuid, costName, null, null);
        Type localVarReturnType = new TypeToken<CostCharacteristic>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve cost-characteristic by ID (asynchronously)
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param costName ID of cost_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyLinkCostCharacteristicCostCharacteristicByIdAsync(String uuid, String linkUuid, String costName, final ApiCallback<CostCharacteristic> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyLinkCostCharacteristicCostCharacteristicByIdValidateBeforeCall(uuid, linkUuid, costName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CostCharacteristic>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyLinkLatencyCharacteristicLatencyCharacteristic
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyLinkLatencyCharacteristicLatencyCharacteristicCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/link/{link_uuid}/latency-characteristic/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "link_uuid" + "\\}", apiClient.escapeString(linkUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyLinkLatencyCharacteristicLatencyCharacteristicValidateBeforeCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyLinkLatencyCharacteristicLatencyCharacteristic(Async)");
        }
        
        // verify the required parameter 'linkUuid' is set
        if (linkUuid == null) {
            throw new ApiException("Missing the required parameter 'linkUuid' when calling retrieveContextTopologyContextTopologyLinkLatencyCharacteristicLatencyCharacteristic(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyLinkLatencyCharacteristicLatencyCharacteristicCall(uuid, linkUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve latency-characteristic
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyContextTopologyLinkLatencyCharacteristicLatencyCharacteristic(String uuid, String linkUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyContextTopologyLinkLatencyCharacteristicLatencyCharacteristicWithHttpInfo(uuid, linkUuid);
        return resp.getData();
    }

    /**
     * Retrieve latency-characteristic
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyContextTopologyLinkLatencyCharacteristicLatencyCharacteristicWithHttpInfo(String uuid, String linkUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyLinkLatencyCharacteristicLatencyCharacteristicValidateBeforeCall(uuid, linkUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve latency-characteristic (asynchronously)
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyLinkLatencyCharacteristicLatencyCharacteristicAsync(String uuid, String linkUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyLinkLatencyCharacteristicLatencyCharacteristicValidateBeforeCall(uuid, linkUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyLinkLatencyCharacteristicLatencyCharacteristicById
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyLinkLatencyCharacteristicLatencyCharacteristicByIdCall(String uuid, String linkUuid, String trafficPropertyName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/link/{link_uuid}/latency-characteristic/{traffic_property_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "link_uuid" + "\\}", apiClient.escapeString(linkUuid.toString()))
            .replaceAll("\\{" + "traffic_property_name" + "\\}", apiClient.escapeString(trafficPropertyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyLinkLatencyCharacteristicLatencyCharacteristicByIdValidateBeforeCall(String uuid, String linkUuid, String trafficPropertyName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyLinkLatencyCharacteristicLatencyCharacteristicById(Async)");
        }
        
        // verify the required parameter 'linkUuid' is set
        if (linkUuid == null) {
            throw new ApiException("Missing the required parameter 'linkUuid' when calling retrieveContextTopologyContextTopologyLinkLatencyCharacteristicLatencyCharacteristicById(Async)");
        }
        
        // verify the required parameter 'trafficPropertyName' is set
        if (trafficPropertyName == null) {
            throw new ApiException("Missing the required parameter 'trafficPropertyName' when calling retrieveContextTopologyContextTopologyLinkLatencyCharacteristicLatencyCharacteristicById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyLinkLatencyCharacteristicLatencyCharacteristicByIdCall(uuid, linkUuid, trafficPropertyName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve latency-characteristic by ID
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @return LatencyCharacteristic
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LatencyCharacteristic retrieveContextTopologyContextTopologyLinkLatencyCharacteristicLatencyCharacteristicById(String uuid, String linkUuid, String trafficPropertyName) throws ApiException {
        ApiResponse<LatencyCharacteristic> resp = retrieveContextTopologyContextTopologyLinkLatencyCharacteristicLatencyCharacteristicByIdWithHttpInfo(uuid, linkUuid, trafficPropertyName);
        return resp.getData();
    }

    /**
     * Retrieve latency-characteristic by ID
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @return ApiResponse&lt;LatencyCharacteristic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LatencyCharacteristic> retrieveContextTopologyContextTopologyLinkLatencyCharacteristicLatencyCharacteristicByIdWithHttpInfo(String uuid, String linkUuid, String trafficPropertyName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyLinkLatencyCharacteristicLatencyCharacteristicByIdValidateBeforeCall(uuid, linkUuid, trafficPropertyName, null, null);
        Type localVarReturnType = new TypeToken<LatencyCharacteristic>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve latency-characteristic by ID (asynchronously)
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyLinkLatencyCharacteristicLatencyCharacteristicByIdAsync(String uuid, String linkUuid, String trafficPropertyName, final ApiCallback<LatencyCharacteristic> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyLinkLatencyCharacteristicLatencyCharacteristicByIdValidateBeforeCall(uuid, linkUuid, trafficPropertyName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LatencyCharacteristic>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyLinkLink
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyLinkLinkCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/link/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyLinkLinkValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyLinkLink(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyLinkLinkCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve link
     * Retrieve operation of resource: link
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyContextTopologyLinkLink(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyContextTopologyLinkLinkWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve link
     * Retrieve operation of resource: link
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyContextTopologyLinkLinkWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyLinkLinkValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve link (asynchronously)
     * Retrieve operation of resource: link
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyLinkLinkAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyLinkLinkValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyLinkLinkById
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyLinkLinkByIdCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/link/{link_uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "link_uuid" + "\\}", apiClient.escapeString(linkUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyLinkLinkByIdValidateBeforeCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyLinkLinkById(Async)");
        }
        
        // verify the required parameter 'linkUuid' is set
        if (linkUuid == null) {
            throw new ApiException("Missing the required parameter 'linkUuid' when calling retrieveContextTopologyContextTopologyLinkLinkById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyLinkLinkByIdCall(uuid, linkUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve link by ID
     * Retrieve operation of resource: link
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return Link
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Link retrieveContextTopologyContextTopologyLinkLinkById(String uuid, String linkUuid) throws ApiException {
        ApiResponse<Link> resp = retrieveContextTopologyContextTopologyLinkLinkByIdWithHttpInfo(uuid, linkUuid);
        return resp.getData();
    }

    /**
     * Retrieve link by ID
     * Retrieve operation of resource: link
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return ApiResponse&lt;Link&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Link> retrieveContextTopologyContextTopologyLinkLinkByIdWithHttpInfo(String uuid, String linkUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyLinkLinkByIdValidateBeforeCall(uuid, linkUuid, null, null);
        Type localVarReturnType = new TypeToken<Link>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve link by ID (asynchronously)
     * Retrieve operation of resource: link
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyLinkLinkByIdAsync(String uuid, String linkUuid, final ApiCallback<Link> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyLinkLinkByIdValidateBeforeCall(uuid, linkUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Link>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyLinkNameName
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyLinkNameNameCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/link/{link_uuid}/name/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "link_uuid" + "\\}", apiClient.escapeString(linkUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyLinkNameNameValidateBeforeCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyLinkNameName(Async)");
        }
        
        // verify the required parameter 'linkUuid' is set
        if (linkUuid == null) {
            throw new ApiException("Missing the required parameter 'linkUuid' when calling retrieveContextTopologyContextTopologyLinkNameName(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyLinkNameNameCall(uuid, linkUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyContextTopologyLinkNameName(String uuid, String linkUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyContextTopologyLinkNameNameWithHttpInfo(uuid, linkUuid);
        return resp.getData();
    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyContextTopologyLinkNameNameWithHttpInfo(String uuid, String linkUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyLinkNameNameValidateBeforeCall(uuid, linkUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyLinkNameNameAsync(String uuid, String linkUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyLinkNameNameValidateBeforeCall(uuid, linkUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyLinkNameNameById
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param valueName ID of value_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyLinkNameNameByIdCall(String uuid, String linkUuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/link/{link_uuid}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "link_uuid" + "\\}", apiClient.escapeString(linkUuid.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyLinkNameNameByIdValidateBeforeCall(String uuid, String linkUuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyLinkNameNameById(Async)");
        }
        
        // verify the required parameter 'linkUuid' is set
        if (linkUuid == null) {
            throw new ApiException("Missing the required parameter 'linkUuid' when calling retrieveContextTopologyContextTopologyLinkNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling retrieveContextTopologyContextTopologyLinkNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyLinkNameNameByIdCall(uuid, linkUuid, valueName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param valueName ID of value_name (required)
     * @return NameAndValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NameAndValue retrieveContextTopologyContextTopologyLinkNameNameById(String uuid, String linkUuid, String valueName) throws ApiException {
        ApiResponse<NameAndValue> resp = retrieveContextTopologyContextTopologyLinkNameNameByIdWithHttpInfo(uuid, linkUuid, valueName);
        return resp.getData();
    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param valueName ID of value_name (required)
     * @return ApiResponse&lt;NameAndValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NameAndValue> retrieveContextTopologyContextTopologyLinkNameNameByIdWithHttpInfo(String uuid, String linkUuid, String valueName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyLinkNameNameByIdValidateBeforeCall(uuid, linkUuid, valueName, null, null);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name by ID (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param valueName ID of value_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyLinkNameNameByIdAsync(String uuid, String linkUuid, String valueName, final ApiCallback<NameAndValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyLinkNameNameByIdValidateBeforeCall(uuid, linkUuid, valueName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyLinkNodeEdgePointNodeEdgePoint
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyLinkNodeEdgePointNodeEdgePointCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/link/{link_uuid}/node-edge-point/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "link_uuid" + "\\}", apiClient.escapeString(linkUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyLinkNodeEdgePointNodeEdgePointValidateBeforeCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyLinkNodeEdgePointNodeEdgePoint(Async)");
        }
        
        // verify the required parameter 'linkUuid' is set
        if (linkUuid == null) {
            throw new ApiException("Missing the required parameter 'linkUuid' when calling retrieveContextTopologyContextTopologyLinkNodeEdgePointNodeEdgePoint(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyLinkNodeEdgePointNodeEdgePointCall(uuid, linkUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve node-edge-point
     * Retrieve operation of resource: node-edge-point
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyContextTopologyLinkNodeEdgePointNodeEdgePoint(String uuid, String linkUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyContextTopologyLinkNodeEdgePointNodeEdgePointWithHttpInfo(uuid, linkUuid);
        return resp.getData();
    }

    /**
     * Retrieve node-edge-point
     * Retrieve operation of resource: node-edge-point
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyContextTopologyLinkNodeEdgePointNodeEdgePointWithHttpInfo(String uuid, String linkUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyLinkNodeEdgePointNodeEdgePointValidateBeforeCall(uuid, linkUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve node-edge-point (asynchronously)
     * Retrieve operation of resource: node-edge-point
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyLinkNodeEdgePointNodeEdgePointAsync(String uuid, String linkUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyLinkNodeEdgePointNodeEdgePointValidateBeforeCall(uuid, linkUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyLinkNodeEdgePointNodeEdgePointById
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param topologyUuidNodeUuidNodeEdgePointUuid ID of topology_uuid_node_uuid_node_edge_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyLinkNodeEdgePointNodeEdgePointByIdCall(String uuid, String linkUuid, String topologyUuidNodeUuidNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/link/{link_uuid}/node-edge-point/{topology_uuid_node_uuid_node_edge_point_uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "link_uuid" + "\\}", apiClient.escapeString(linkUuid.toString()))
            .replaceAll("\\{" + "topology_uuid_node_uuid_node_edge_point_uuid" + "\\}", apiClient.escapeString(topologyUuidNodeUuidNodeEdgePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyLinkNodeEdgePointNodeEdgePointByIdValidateBeforeCall(String uuid, String linkUuid, String topologyUuidNodeUuidNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyLinkNodeEdgePointNodeEdgePointById(Async)");
        }
        
        // verify the required parameter 'linkUuid' is set
        if (linkUuid == null) {
            throw new ApiException("Missing the required parameter 'linkUuid' when calling retrieveContextTopologyContextTopologyLinkNodeEdgePointNodeEdgePointById(Async)");
        }
        
        // verify the required parameter 'topologyUuidNodeUuidNodeEdgePointUuid' is set
        if (topologyUuidNodeUuidNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'topologyUuidNodeUuidNodeEdgePointUuid' when calling retrieveContextTopologyContextTopologyLinkNodeEdgePointNodeEdgePointById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyLinkNodeEdgePointNodeEdgePointByIdCall(uuid, linkUuid, topologyUuidNodeUuidNodeEdgePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve node-edge-point by ID
     * Retrieve operation of resource: node-edge-point
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param topologyUuidNodeUuidNodeEdgePointUuid ID of topology_uuid_node_uuid_node_edge_point_uuid (required)
     * @return NodeEdgePointRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeEdgePointRef retrieveContextTopologyContextTopologyLinkNodeEdgePointNodeEdgePointById(String uuid, String linkUuid, String topologyUuidNodeUuidNodeEdgePointUuid) throws ApiException {
        ApiResponse<NodeEdgePointRef> resp = retrieveContextTopologyContextTopologyLinkNodeEdgePointNodeEdgePointByIdWithHttpInfo(uuid, linkUuid, topologyUuidNodeUuidNodeEdgePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve node-edge-point by ID
     * Retrieve operation of resource: node-edge-point
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param topologyUuidNodeUuidNodeEdgePointUuid ID of topology_uuid_node_uuid_node_edge_point_uuid (required)
     * @return ApiResponse&lt;NodeEdgePointRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeEdgePointRef> retrieveContextTopologyContextTopologyLinkNodeEdgePointNodeEdgePointByIdWithHttpInfo(String uuid, String linkUuid, String topologyUuidNodeUuidNodeEdgePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyLinkNodeEdgePointNodeEdgePointByIdValidateBeforeCall(uuid, linkUuid, topologyUuidNodeUuidNodeEdgePointUuid, null, null);
        Type localVarReturnType = new TypeToken<NodeEdgePointRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve node-edge-point by ID (asynchronously)
     * Retrieve operation of resource: node-edge-point
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param topologyUuidNodeUuidNodeEdgePointUuid ID of topology_uuid_node_uuid_node_edge_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyLinkNodeEdgePointNodeEdgePointByIdAsync(String uuid, String linkUuid, String topologyUuidNodeUuidNodeEdgePointUuid, final ApiCallback<NodeEdgePointRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyLinkNodeEdgePointNodeEdgePointByIdValidateBeforeCall(uuid, linkUuid, topologyUuidNodeUuidNodeEdgePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeEdgePointRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyLinkResilienceTypeResilienceType
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyLinkResilienceTypeResilienceTypeCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/link/{link_uuid}/resilience-type/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "link_uuid" + "\\}", apiClient.escapeString(linkUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyLinkResilienceTypeResilienceTypeValidateBeforeCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyLinkResilienceTypeResilienceType(Async)");
        }
        
        // verify the required parameter 'linkUuid' is set
        if (linkUuid == null) {
            throw new ApiException("Missing the required parameter 'linkUuid' when calling retrieveContextTopologyContextTopologyLinkResilienceTypeResilienceType(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyLinkResilienceTypeResilienceTypeCall(uuid, linkUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve resilience-type
     * Retrieve operation of resource: resilience-type
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return ResilienceType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResilienceType retrieveContextTopologyContextTopologyLinkResilienceTypeResilienceType(String uuid, String linkUuid) throws ApiException {
        ApiResponse<ResilienceType> resp = retrieveContextTopologyContextTopologyLinkResilienceTypeResilienceTypeWithHttpInfo(uuid, linkUuid);
        return resp.getData();
    }

    /**
     * Retrieve resilience-type
     * Retrieve operation of resource: resilience-type
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return ApiResponse&lt;ResilienceType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResilienceType> retrieveContextTopologyContextTopologyLinkResilienceTypeResilienceTypeWithHttpInfo(String uuid, String linkUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyLinkResilienceTypeResilienceTypeValidateBeforeCall(uuid, linkUuid, null, null);
        Type localVarReturnType = new TypeToken<ResilienceType>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve resilience-type (asynchronously)
     * Retrieve operation of resource: resilience-type
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyLinkResilienceTypeResilienceTypeAsync(String uuid, String linkUuid, final ApiCallback<ResilienceType> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyLinkResilienceTypeResilienceTypeValidateBeforeCall(uuid, linkUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResilienceType>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyLinkRiskCharacteristicRiskCharacteristic
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyLinkRiskCharacteristicRiskCharacteristicCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/link/{link_uuid}/risk-characteristic/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "link_uuid" + "\\}", apiClient.escapeString(linkUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyLinkRiskCharacteristicRiskCharacteristicValidateBeforeCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyLinkRiskCharacteristicRiskCharacteristic(Async)");
        }
        
        // verify the required parameter 'linkUuid' is set
        if (linkUuid == null) {
            throw new ApiException("Missing the required parameter 'linkUuid' when calling retrieveContextTopologyContextTopologyLinkRiskCharacteristicRiskCharacteristic(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyLinkRiskCharacteristicRiskCharacteristicCall(uuid, linkUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve risk-characteristic
     * Retrieve operation of resource: risk-characteristic
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyContextTopologyLinkRiskCharacteristicRiskCharacteristic(String uuid, String linkUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyContextTopologyLinkRiskCharacteristicRiskCharacteristicWithHttpInfo(uuid, linkUuid);
        return resp.getData();
    }

    /**
     * Retrieve risk-characteristic
     * Retrieve operation of resource: risk-characteristic
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyContextTopologyLinkRiskCharacteristicRiskCharacteristicWithHttpInfo(String uuid, String linkUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyLinkRiskCharacteristicRiskCharacteristicValidateBeforeCall(uuid, linkUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve risk-characteristic (asynchronously)
     * Retrieve operation of resource: risk-characteristic
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyLinkRiskCharacteristicRiskCharacteristicAsync(String uuid, String linkUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyLinkRiskCharacteristicRiskCharacteristicValidateBeforeCall(uuid, linkUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyLinkRiskCharacteristicRiskCharacteristicById
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param riskCharacteristicName ID of risk_characteristic_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyLinkRiskCharacteristicRiskCharacteristicByIdCall(String uuid, String linkUuid, String riskCharacteristicName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/link/{link_uuid}/risk-characteristic/{risk_characteristic_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "link_uuid" + "\\}", apiClient.escapeString(linkUuid.toString()))
            .replaceAll("\\{" + "risk_characteristic_name" + "\\}", apiClient.escapeString(riskCharacteristicName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyLinkRiskCharacteristicRiskCharacteristicByIdValidateBeforeCall(String uuid, String linkUuid, String riskCharacteristicName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyLinkRiskCharacteristicRiskCharacteristicById(Async)");
        }
        
        // verify the required parameter 'linkUuid' is set
        if (linkUuid == null) {
            throw new ApiException("Missing the required parameter 'linkUuid' when calling retrieveContextTopologyContextTopologyLinkRiskCharacteristicRiskCharacteristicById(Async)");
        }
        
        // verify the required parameter 'riskCharacteristicName' is set
        if (riskCharacteristicName == null) {
            throw new ApiException("Missing the required parameter 'riskCharacteristicName' when calling retrieveContextTopologyContextTopologyLinkRiskCharacteristicRiskCharacteristicById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyLinkRiskCharacteristicRiskCharacteristicByIdCall(uuid, linkUuid, riskCharacteristicName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve risk-characteristic by ID
     * Retrieve operation of resource: risk-characteristic
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param riskCharacteristicName ID of risk_characteristic_name (required)
     * @return RiskCharacteristic
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RiskCharacteristic retrieveContextTopologyContextTopologyLinkRiskCharacteristicRiskCharacteristicById(String uuid, String linkUuid, String riskCharacteristicName) throws ApiException {
        ApiResponse<RiskCharacteristic> resp = retrieveContextTopologyContextTopologyLinkRiskCharacteristicRiskCharacteristicByIdWithHttpInfo(uuid, linkUuid, riskCharacteristicName);
        return resp.getData();
    }

    /**
     * Retrieve risk-characteristic by ID
     * Retrieve operation of resource: risk-characteristic
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param riskCharacteristicName ID of risk_characteristic_name (required)
     * @return ApiResponse&lt;RiskCharacteristic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RiskCharacteristic> retrieveContextTopologyContextTopologyLinkRiskCharacteristicRiskCharacteristicByIdWithHttpInfo(String uuid, String linkUuid, String riskCharacteristicName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyLinkRiskCharacteristicRiskCharacteristicByIdValidateBeforeCall(uuid, linkUuid, riskCharacteristicName, null, null);
        Type localVarReturnType = new TypeToken<RiskCharacteristic>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve risk-characteristic by ID (asynchronously)
     * Retrieve operation of resource: risk-characteristic
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param riskCharacteristicName ID of risk_characteristic_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyLinkRiskCharacteristicRiskCharacteristicByIdAsync(String uuid, String linkUuid, String riskCharacteristicName, final ApiCallback<RiskCharacteristic> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyLinkRiskCharacteristicRiskCharacteristicByIdValidateBeforeCall(uuid, linkUuid, riskCharacteristicName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RiskCharacteristic>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityBandwidthProfileBandwidthProfile
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityBandwidthProfileBandwidthProfileCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/link/{link_uuid}/total-potential-capacity/bandwidth-profile/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "link_uuid" + "\\}", apiClient.escapeString(linkUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        
        // verify the required parameter 'linkUuid' is set
        if (linkUuid == null) {
            throw new ApiException("Missing the required parameter 'linkUuid' when calling retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityBandwidthProfileBandwidthProfileCall(uuid, linkUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve bandwidth-profile
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return BandwidthProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BandwidthProfile retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityBandwidthProfileBandwidthProfile(String uuid, String linkUuid) throws ApiException {
        ApiResponse<BandwidthProfile> resp = retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityBandwidthProfileBandwidthProfileWithHttpInfo(uuid, linkUuid);
        return resp.getData();
    }

    /**
     * Retrieve bandwidth-profile
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return ApiResponse&lt;BandwidthProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BandwidthProfile> retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityBandwidthProfileBandwidthProfileWithHttpInfo(String uuid, String linkUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(uuid, linkUuid, null, null);
        Type localVarReturnType = new TypeToken<BandwidthProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve bandwidth-profile (asynchronously)
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityBandwidthProfileBandwidthProfileAsync(String uuid, String linkUuid, final ApiCallback<BandwidthProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(uuid, linkUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BandwidthProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/link/{link_uuid}/total-potential-capacity/bandwidth-profile/committed-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "link_uuid" + "\\}", apiClient.escapeString(linkUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        
        // verify the required parameter 'linkUuid' is set
        if (linkUuid == null) {
            throw new ApiException("Missing the required parameter 'linkUuid' when calling retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeCall(uuid, linkUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve committed-burst-size
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(String uuid, String linkUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeWithHttpInfo(uuid, linkUuid);
        return resp.getData();
    }

    /**
     * Retrieve committed-burst-size
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeWithHttpInfo(String uuid, String linkUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(uuid, linkUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve committed-burst-size (asynchronously)
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeAsync(String uuid, String linkUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(uuid, linkUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/link/{link_uuid}/total-potential-capacity/bandwidth-profile/committed-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "link_uuid" + "\\}", apiClient.escapeString(linkUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        
        // verify the required parameter 'linkUuid' is set
        if (linkUuid == null) {
            throw new ApiException("Missing the required parameter 'linkUuid' when calling retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateCall(uuid, linkUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve committed-information-rate
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(String uuid, String linkUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateWithHttpInfo(uuid, linkUuid);
        return resp.getData();
    }

    /**
     * Retrieve committed-information-rate
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateWithHttpInfo(String uuid, String linkUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(uuid, linkUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve committed-information-rate (asynchronously)
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateAsync(String uuid, String linkUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(uuid, linkUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/link/{link_uuid}/total-potential-capacity/bandwidth-profile/peak-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "link_uuid" + "\\}", apiClient.escapeString(linkUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        
        // verify the required parameter 'linkUuid' is set
        if (linkUuid == null) {
            throw new ApiException("Missing the required parameter 'linkUuid' when calling retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeCall(uuid, linkUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve peak-burst-size
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize(String uuid, String linkUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeWithHttpInfo(uuid, linkUuid);
        return resp.getData();
    }

    /**
     * Retrieve peak-burst-size
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeWithHttpInfo(String uuid, String linkUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(uuid, linkUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve peak-burst-size (asynchronously)
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeAsync(String uuid, String linkUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(uuid, linkUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/link/{link_uuid}/total-potential-capacity/bandwidth-profile/peak-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "link_uuid" + "\\}", apiClient.escapeString(linkUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        
        // verify the required parameter 'linkUuid' is set
        if (linkUuid == null) {
            throw new ApiException("Missing the required parameter 'linkUuid' when calling retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateCall(uuid, linkUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve peak-information-rate
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate(String uuid, String linkUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateWithHttpInfo(uuid, linkUuid);
        return resp.getData();
    }

    /**
     * Retrieve peak-information-rate
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateWithHttpInfo(String uuid, String linkUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(uuid, linkUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve peak-information-rate (asynchronously)
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateAsync(String uuid, String linkUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(uuid, linkUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityTotalPotentialCapacity
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityTotalPotentialCapacityCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/link/{link_uuid}/total-potential-capacity/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "link_uuid" + "\\}", apiClient.escapeString(linkUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityTotalPotentialCapacityValidateBeforeCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityTotalPotentialCapacity(Async)");
        }
        
        // verify the required parameter 'linkUuid' is set
        if (linkUuid == null) {
            throw new ApiException("Missing the required parameter 'linkUuid' when calling retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityTotalPotentialCapacity(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityTotalPotentialCapacityCall(uuid, linkUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve total-potential-capacity
     * Retrieve operation of resource: total-potential-capacity
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return Capacity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Capacity retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityTotalPotentialCapacity(String uuid, String linkUuid) throws ApiException {
        ApiResponse<Capacity> resp = retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityTotalPotentialCapacityWithHttpInfo(uuid, linkUuid);
        return resp.getData();
    }

    /**
     * Retrieve total-potential-capacity
     * Retrieve operation of resource: total-potential-capacity
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return ApiResponse&lt;Capacity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Capacity> retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityTotalPotentialCapacityWithHttpInfo(String uuid, String linkUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityTotalPotentialCapacityValidateBeforeCall(uuid, linkUuid, null, null);
        Type localVarReturnType = new TypeToken<Capacity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve total-potential-capacity (asynchronously)
     * Retrieve operation of resource: total-potential-capacity
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityTotalPotentialCapacityAsync(String uuid, String linkUuid, final ApiCallback<Capacity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityTotalPotentialCapacityValidateBeforeCall(uuid, linkUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Capacity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityTotalSizeTotalSize
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityTotalSizeTotalSizeCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/link/{link_uuid}/total-potential-capacity/total-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "link_uuid" + "\\}", apiClient.escapeString(linkUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityTotalSizeTotalSizeValidateBeforeCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityTotalSizeTotalSize(Async)");
        }
        
        // verify the required parameter 'linkUuid' is set
        if (linkUuid == null) {
            throw new ApiException("Missing the required parameter 'linkUuid' when calling retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityTotalSizeTotalSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityTotalSizeTotalSizeCall(uuid, linkUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve total-size
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityTotalSizeTotalSize(String uuid, String linkUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityTotalSizeTotalSizeWithHttpInfo(uuid, linkUuid);
        return resp.getData();
    }

    /**
     * Retrieve total-size
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityTotalSizeTotalSizeWithHttpInfo(String uuid, String linkUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityTotalSizeTotalSizeValidateBeforeCall(uuid, linkUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve total-size (asynchronously)
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityTotalSizeTotalSizeAsync(String uuid, String linkUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityTotalSizeTotalSizeValidateBeforeCall(uuid, linkUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyLinkValidationMechanismValidationMechanism
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyLinkValidationMechanismValidationMechanismCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/link/{link_uuid}/validation-mechanism/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "link_uuid" + "\\}", apiClient.escapeString(linkUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyLinkValidationMechanismValidationMechanismValidateBeforeCall(String uuid, String linkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyLinkValidationMechanismValidationMechanism(Async)");
        }
        
        // verify the required parameter 'linkUuid' is set
        if (linkUuid == null) {
            throw new ApiException("Missing the required parameter 'linkUuid' when calling retrieveContextTopologyContextTopologyLinkValidationMechanismValidationMechanism(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyLinkValidationMechanismValidationMechanismCall(uuid, linkUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve validation-mechanism
     * Retrieve operation of resource: validation-mechanism
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyContextTopologyLinkValidationMechanismValidationMechanism(String uuid, String linkUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyContextTopologyLinkValidationMechanismValidationMechanismWithHttpInfo(uuid, linkUuid);
        return resp.getData();
    }

    /**
     * Retrieve validation-mechanism
     * Retrieve operation of resource: validation-mechanism
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyContextTopologyLinkValidationMechanismValidationMechanismWithHttpInfo(String uuid, String linkUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyLinkValidationMechanismValidationMechanismValidateBeforeCall(uuid, linkUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve validation-mechanism (asynchronously)
     * Retrieve operation of resource: validation-mechanism
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyLinkValidationMechanismValidationMechanismAsync(String uuid, String linkUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyLinkValidationMechanismValidationMechanismValidateBeforeCall(uuid, linkUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyLinkValidationMechanismValidationMechanismById
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param validationMechanism ID of validation_mechanism (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyLinkValidationMechanismValidationMechanismByIdCall(String uuid, String linkUuid, String validationMechanism, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/link/{link_uuid}/validation-mechanism/{validation_mechanism}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "link_uuid" + "\\}", apiClient.escapeString(linkUuid.toString()))
            .replaceAll("\\{" + "validation_mechanism" + "\\}", apiClient.escapeString(validationMechanism.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyLinkValidationMechanismValidationMechanismByIdValidateBeforeCall(String uuid, String linkUuid, String validationMechanism, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyLinkValidationMechanismValidationMechanismById(Async)");
        }
        
        // verify the required parameter 'linkUuid' is set
        if (linkUuid == null) {
            throw new ApiException("Missing the required parameter 'linkUuid' when calling retrieveContextTopologyContextTopologyLinkValidationMechanismValidationMechanismById(Async)");
        }
        
        // verify the required parameter 'validationMechanism' is set
        if (validationMechanism == null) {
            throw new ApiException("Missing the required parameter 'validationMechanism' when calling retrieveContextTopologyContextTopologyLinkValidationMechanismValidationMechanismById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyLinkValidationMechanismValidationMechanismByIdCall(uuid, linkUuid, validationMechanism, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve validation-mechanism by ID
     * Retrieve operation of resource: validation-mechanism
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param validationMechanism ID of validation_mechanism (required)
     * @return ValidationMechanism
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ValidationMechanism retrieveContextTopologyContextTopologyLinkValidationMechanismValidationMechanismById(String uuid, String linkUuid, String validationMechanism) throws ApiException {
        ApiResponse<ValidationMechanism> resp = retrieveContextTopologyContextTopologyLinkValidationMechanismValidationMechanismByIdWithHttpInfo(uuid, linkUuid, validationMechanism);
        return resp.getData();
    }

    /**
     * Retrieve validation-mechanism by ID
     * Retrieve operation of resource: validation-mechanism
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param validationMechanism ID of validation_mechanism (required)
     * @return ApiResponse&lt;ValidationMechanism&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ValidationMechanism> retrieveContextTopologyContextTopologyLinkValidationMechanismValidationMechanismByIdWithHttpInfo(String uuid, String linkUuid, String validationMechanism) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyLinkValidationMechanismValidationMechanismByIdValidateBeforeCall(uuid, linkUuid, validationMechanism, null, null);
        Type localVarReturnType = new TypeToken<ValidationMechanism>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve validation-mechanism by ID (asynchronously)
     * Retrieve operation of resource: validation-mechanism
     * @param uuid ID of uuid (required)
     * @param linkUuid ID of link_uuid (required)
     * @param validationMechanism ID of validation_mechanism (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyLinkValidationMechanismValidationMechanismByIdAsync(String uuid, String linkUuid, String validationMechanism, final ApiCallback<ValidationMechanism> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyLinkValidationMechanismValidationMechanismByIdValidateBeforeCall(uuid, linkUuid, validationMechanism, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ValidationMechanism>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNameName
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNameNameCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/name/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNameNameValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNameName(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNameNameCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyContextTopologyNameName(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyContextTopologyNameNameWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyContextTopologyNameNameWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNameNameValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNameNameAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNameNameValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNameNameById
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNameNameByIdCall(String uuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNameNameByIdValidateBeforeCall(String uuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling retrieveContextTopologyContextTopologyNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNameNameByIdCall(uuid, valueName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @return NameAndValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NameAndValue retrieveContextTopologyContextTopologyNameNameById(String uuid, String valueName) throws ApiException {
        ApiResponse<NameAndValue> resp = retrieveContextTopologyContextTopologyNameNameByIdWithHttpInfo(uuid, valueName);
        return resp.getData();
    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @return ApiResponse&lt;NameAndValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NameAndValue> retrieveContextTopologyContextTopologyNameNameByIdWithHttpInfo(String uuid, String valueName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNameNameByIdValidateBeforeCall(uuid, valueName, null, null);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name by ID (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNameNameByIdAsync(String uuid, String valueName, final ApiCallback<NameAndValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNameNameByIdValidateBeforeCall(uuid, valueName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeAggregatedNodeEdgePointAggregatedNodeEdgePoint
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeAggregatedNodeEdgePointAggregatedNodeEdgePointCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/aggregated-node-edge-point/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeAggregatedNodeEdgePointAggregatedNodeEdgePointValidateBeforeCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeAggregatedNodeEdgePointAggregatedNodeEdgePoint(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeAggregatedNodeEdgePointAggregatedNodeEdgePoint(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeAggregatedNodeEdgePointAggregatedNodeEdgePointCall(uuid, nodeUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve aggregated-node-edge-point
     * Retrieve operation of resource: aggregated-node-edge-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyContextTopologyNodeAggregatedNodeEdgePointAggregatedNodeEdgePoint(String uuid, String nodeUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyContextTopologyNodeAggregatedNodeEdgePointAggregatedNodeEdgePointWithHttpInfo(uuid, nodeUuid);
        return resp.getData();
    }

    /**
     * Retrieve aggregated-node-edge-point
     * Retrieve operation of resource: aggregated-node-edge-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyContextTopologyNodeAggregatedNodeEdgePointAggregatedNodeEdgePointWithHttpInfo(String uuid, String nodeUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeAggregatedNodeEdgePointAggregatedNodeEdgePointValidateBeforeCall(uuid, nodeUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve aggregated-node-edge-point (asynchronously)
     * Retrieve operation of resource: aggregated-node-edge-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeAggregatedNodeEdgePointAggregatedNodeEdgePointAsync(String uuid, String nodeUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeAggregatedNodeEdgePointAggregatedNodeEdgePointValidateBeforeCall(uuid, nodeUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeAggregatedNodeEdgePointAggregatedNodeEdgePointById
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param topologyUuidNodeUuidNodeEdgePointUuid ID of topology_uuid_node_uuid_node_edge_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeAggregatedNodeEdgePointAggregatedNodeEdgePointByIdCall(String uuid, String nodeUuid, String topologyUuidNodeUuidNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/aggregated-node-edge-point/{topology_uuid_node_uuid_node_edge_point_uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "topology_uuid_node_uuid_node_edge_point_uuid" + "\\}", apiClient.escapeString(topologyUuidNodeUuidNodeEdgePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeAggregatedNodeEdgePointAggregatedNodeEdgePointByIdValidateBeforeCall(String uuid, String nodeUuid, String topologyUuidNodeUuidNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeAggregatedNodeEdgePointAggregatedNodeEdgePointById(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeAggregatedNodeEdgePointAggregatedNodeEdgePointById(Async)");
        }
        
        // verify the required parameter 'topologyUuidNodeUuidNodeEdgePointUuid' is set
        if (topologyUuidNodeUuidNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'topologyUuidNodeUuidNodeEdgePointUuid' when calling retrieveContextTopologyContextTopologyNodeAggregatedNodeEdgePointAggregatedNodeEdgePointById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeAggregatedNodeEdgePointAggregatedNodeEdgePointByIdCall(uuid, nodeUuid, topologyUuidNodeUuidNodeEdgePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve aggregated-node-edge-point by ID
     * Retrieve operation of resource: aggregated-node-edge-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param topologyUuidNodeUuidNodeEdgePointUuid ID of topology_uuid_node_uuid_node_edge_point_uuid (required)
     * @return NodeEdgePointRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeEdgePointRef retrieveContextTopologyContextTopologyNodeAggregatedNodeEdgePointAggregatedNodeEdgePointById(String uuid, String nodeUuid, String topologyUuidNodeUuidNodeEdgePointUuid) throws ApiException {
        ApiResponse<NodeEdgePointRef> resp = retrieveContextTopologyContextTopologyNodeAggregatedNodeEdgePointAggregatedNodeEdgePointByIdWithHttpInfo(uuid, nodeUuid, topologyUuidNodeUuidNodeEdgePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve aggregated-node-edge-point by ID
     * Retrieve operation of resource: aggregated-node-edge-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param topologyUuidNodeUuidNodeEdgePointUuid ID of topology_uuid_node_uuid_node_edge_point_uuid (required)
     * @return ApiResponse&lt;NodeEdgePointRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeEdgePointRef> retrieveContextTopologyContextTopologyNodeAggregatedNodeEdgePointAggregatedNodeEdgePointByIdWithHttpInfo(String uuid, String nodeUuid, String topologyUuidNodeUuidNodeEdgePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeAggregatedNodeEdgePointAggregatedNodeEdgePointByIdValidateBeforeCall(uuid, nodeUuid, topologyUuidNodeUuidNodeEdgePointUuid, null, null);
        Type localVarReturnType = new TypeToken<NodeEdgePointRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve aggregated-node-edge-point by ID (asynchronously)
     * Retrieve operation of resource: aggregated-node-edge-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param topologyUuidNodeUuidNodeEdgePointUuid ID of topology_uuid_node_uuid_node_edge_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeAggregatedNodeEdgePointAggregatedNodeEdgePointByIdAsync(String uuid, String nodeUuid, String topologyUuidNodeUuidNodeEdgePointUuid, final ApiCallback<NodeEdgePointRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeAggregatedNodeEdgePointAggregatedNodeEdgePointByIdValidateBeforeCall(uuid, nodeUuid, topologyUuidNodeUuidNodeEdgePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeEdgePointRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeAvailableCapacityAvailableCapacity
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeAvailableCapacityAvailableCapacityCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/available-capacity/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeAvailableCapacityAvailableCapacityValidateBeforeCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeAvailableCapacityAvailableCapacity(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeAvailableCapacityAvailableCapacity(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeAvailableCapacityAvailableCapacityCall(uuid, nodeUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve available-capacity
     * Retrieve operation of resource: available-capacity
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return Capacity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Capacity retrieveContextTopologyContextTopologyNodeAvailableCapacityAvailableCapacity(String uuid, String nodeUuid) throws ApiException {
        ApiResponse<Capacity> resp = retrieveContextTopologyContextTopologyNodeAvailableCapacityAvailableCapacityWithHttpInfo(uuid, nodeUuid);
        return resp.getData();
    }

    /**
     * Retrieve available-capacity
     * Retrieve operation of resource: available-capacity
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return ApiResponse&lt;Capacity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Capacity> retrieveContextTopologyContextTopologyNodeAvailableCapacityAvailableCapacityWithHttpInfo(String uuid, String nodeUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeAvailableCapacityAvailableCapacityValidateBeforeCall(uuid, nodeUuid, null, null);
        Type localVarReturnType = new TypeToken<Capacity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve available-capacity (asynchronously)
     * Retrieve operation of resource: available-capacity
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeAvailableCapacityAvailableCapacityAsync(String uuid, String nodeUuid, final ApiCallback<Capacity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeAvailableCapacityAvailableCapacityValidateBeforeCall(uuid, nodeUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Capacity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeAvailableCapacityBandwidthProfileBandwidthProfile
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeAvailableCapacityBandwidthProfileBandwidthProfileCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/available-capacity/bandwidth-profile/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeAvailableCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeAvailableCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeAvailableCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeAvailableCapacityBandwidthProfileBandwidthProfileCall(uuid, nodeUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve bandwidth-profile
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return BandwidthProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BandwidthProfile retrieveContextTopologyContextTopologyNodeAvailableCapacityBandwidthProfileBandwidthProfile(String uuid, String nodeUuid) throws ApiException {
        ApiResponse<BandwidthProfile> resp = retrieveContextTopologyContextTopologyNodeAvailableCapacityBandwidthProfileBandwidthProfileWithHttpInfo(uuid, nodeUuid);
        return resp.getData();
    }

    /**
     * Retrieve bandwidth-profile
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return ApiResponse&lt;BandwidthProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BandwidthProfile> retrieveContextTopologyContextTopologyNodeAvailableCapacityBandwidthProfileBandwidthProfileWithHttpInfo(String uuid, String nodeUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeAvailableCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(uuid, nodeUuid, null, null);
        Type localVarReturnType = new TypeToken<BandwidthProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve bandwidth-profile (asynchronously)
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeAvailableCapacityBandwidthProfileBandwidthProfileAsync(String uuid, String nodeUuid, final ApiCallback<BandwidthProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeAvailableCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(uuid, nodeUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BandwidthProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/available-capacity/bandwidth-profile/committed-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeCall(uuid, nodeUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve committed-burst-size
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyContextTopologyNodeAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(String uuid, String nodeUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyContextTopologyNodeAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeWithHttpInfo(uuid, nodeUuid);
        return resp.getData();
    }

    /**
     * Retrieve committed-burst-size
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyContextTopologyNodeAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeWithHttpInfo(String uuid, String nodeUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(uuid, nodeUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve committed-burst-size (asynchronously)
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeAsync(String uuid, String nodeUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(uuid, nodeUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/available-capacity/bandwidth-profile/committed-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateCall(uuid, nodeUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve committed-information-rate
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyContextTopologyNodeAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(String uuid, String nodeUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyContextTopologyNodeAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateWithHttpInfo(uuid, nodeUuid);
        return resp.getData();
    }

    /**
     * Retrieve committed-information-rate
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyContextTopologyNodeAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateWithHttpInfo(String uuid, String nodeUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(uuid, nodeUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve committed-information-rate (asynchronously)
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateAsync(String uuid, String nodeUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(uuid, nodeUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/available-capacity/bandwidth-profile/peak-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeCall(uuid, nodeUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve peak-burst-size
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyContextTopologyNodeAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize(String uuid, String nodeUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyContextTopologyNodeAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeWithHttpInfo(uuid, nodeUuid);
        return resp.getData();
    }

    /**
     * Retrieve peak-burst-size
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyContextTopologyNodeAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeWithHttpInfo(String uuid, String nodeUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(uuid, nodeUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve peak-burst-size (asynchronously)
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeAsync(String uuid, String nodeUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(uuid, nodeUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/available-capacity/bandwidth-profile/peak-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateCall(uuid, nodeUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve peak-information-rate
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyContextTopologyNodeAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate(String uuid, String nodeUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyContextTopologyNodeAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateWithHttpInfo(uuid, nodeUuid);
        return resp.getData();
    }

    /**
     * Retrieve peak-information-rate
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyContextTopologyNodeAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateWithHttpInfo(String uuid, String nodeUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(uuid, nodeUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve peak-information-rate (asynchronously)
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateAsync(String uuid, String nodeUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(uuid, nodeUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeAvailableCapacityTotalSizeTotalSize
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeAvailableCapacityTotalSizeTotalSizeCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/available-capacity/total-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeAvailableCapacityTotalSizeTotalSizeValidateBeforeCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeAvailableCapacityTotalSizeTotalSize(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeAvailableCapacityTotalSizeTotalSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeAvailableCapacityTotalSizeTotalSizeCall(uuid, nodeUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve total-size
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyContextTopologyNodeAvailableCapacityTotalSizeTotalSize(String uuid, String nodeUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyContextTopologyNodeAvailableCapacityTotalSizeTotalSizeWithHttpInfo(uuid, nodeUuid);
        return resp.getData();
    }

    /**
     * Retrieve total-size
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyContextTopologyNodeAvailableCapacityTotalSizeTotalSizeWithHttpInfo(String uuid, String nodeUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeAvailableCapacityTotalSizeTotalSizeValidateBeforeCall(uuid, nodeUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve total-size (asynchronously)
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeAvailableCapacityTotalSizeTotalSizeAsync(String uuid, String nodeUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeAvailableCapacityTotalSizeTotalSizeValidateBeforeCall(uuid, nodeUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeCostCharacteristicCostCharacteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeCostCharacteristicCostCharacteristicCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/cost-characteristic/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeCostCharacteristicCostCharacteristicValidateBeforeCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeCostCharacteristicCostCharacteristic(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeCostCharacteristicCostCharacteristic(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeCostCharacteristicCostCharacteristicCall(uuid, nodeUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve cost-characteristic
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyContextTopologyNodeCostCharacteristicCostCharacteristic(String uuid, String nodeUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyContextTopologyNodeCostCharacteristicCostCharacteristicWithHttpInfo(uuid, nodeUuid);
        return resp.getData();
    }

    /**
     * Retrieve cost-characteristic
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyContextTopologyNodeCostCharacteristicCostCharacteristicWithHttpInfo(String uuid, String nodeUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeCostCharacteristicCostCharacteristicValidateBeforeCall(uuid, nodeUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve cost-characteristic (asynchronously)
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeCostCharacteristicCostCharacteristicAsync(String uuid, String nodeUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeCostCharacteristicCostCharacteristicValidateBeforeCall(uuid, nodeUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeCostCharacteristicCostCharacteristicById
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param costName ID of cost_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeCostCharacteristicCostCharacteristicByIdCall(String uuid, String nodeUuid, String costName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/cost-characteristic/{cost_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "cost_name" + "\\}", apiClient.escapeString(costName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeCostCharacteristicCostCharacteristicByIdValidateBeforeCall(String uuid, String nodeUuid, String costName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeCostCharacteristicCostCharacteristicById(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeCostCharacteristicCostCharacteristicById(Async)");
        }
        
        // verify the required parameter 'costName' is set
        if (costName == null) {
            throw new ApiException("Missing the required parameter 'costName' when calling retrieveContextTopologyContextTopologyNodeCostCharacteristicCostCharacteristicById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeCostCharacteristicCostCharacteristicByIdCall(uuid, nodeUuid, costName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve cost-characteristic by ID
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param costName ID of cost_name (required)
     * @return CostCharacteristic
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CostCharacteristic retrieveContextTopologyContextTopologyNodeCostCharacteristicCostCharacteristicById(String uuid, String nodeUuid, String costName) throws ApiException {
        ApiResponse<CostCharacteristic> resp = retrieveContextTopologyContextTopologyNodeCostCharacteristicCostCharacteristicByIdWithHttpInfo(uuid, nodeUuid, costName);
        return resp.getData();
    }

    /**
     * Retrieve cost-characteristic by ID
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param costName ID of cost_name (required)
     * @return ApiResponse&lt;CostCharacteristic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CostCharacteristic> retrieveContextTopologyContextTopologyNodeCostCharacteristicCostCharacteristicByIdWithHttpInfo(String uuid, String nodeUuid, String costName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeCostCharacteristicCostCharacteristicByIdValidateBeforeCall(uuid, nodeUuid, costName, null, null);
        Type localVarReturnType = new TypeToken<CostCharacteristic>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve cost-characteristic by ID (asynchronously)
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param costName ID of cost_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeCostCharacteristicCostCharacteristicByIdAsync(String uuid, String nodeUuid, String costName, final ApiCallback<CostCharacteristic> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeCostCharacteristicCostCharacteristicByIdValidateBeforeCall(uuid, nodeUuid, costName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CostCharacteristic>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeEncapTopologyEncapTopology
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeEncapTopologyEncapTopologyCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/encap-topology/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeEncapTopologyEncapTopologyValidateBeforeCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeEncapTopologyEncapTopology(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeEncapTopologyEncapTopology(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeEncapTopologyEncapTopologyCall(uuid, nodeUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve encap-topology
     * Retrieve operation of resource: encap-topology
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return TopologyRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TopologyRef retrieveContextTopologyContextTopologyNodeEncapTopologyEncapTopology(String uuid, String nodeUuid) throws ApiException {
        ApiResponse<TopologyRef> resp = retrieveContextTopologyContextTopologyNodeEncapTopologyEncapTopologyWithHttpInfo(uuid, nodeUuid);
        return resp.getData();
    }

    /**
     * Retrieve encap-topology
     * Retrieve operation of resource: encap-topology
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return ApiResponse&lt;TopologyRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TopologyRef> retrieveContextTopologyContextTopologyNodeEncapTopologyEncapTopologyWithHttpInfo(String uuid, String nodeUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeEncapTopologyEncapTopologyValidateBeforeCall(uuid, nodeUuid, null, null);
        Type localVarReturnType = new TypeToken<TopologyRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve encap-topology (asynchronously)
     * Retrieve operation of resource: encap-topology
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeEncapTopologyEncapTopologyAsync(String uuid, String nodeUuid, final ApiCallback<TopologyRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeEncapTopologyEncapTopologyValidateBeforeCall(uuid, nodeUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TopologyRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeLatencyCharacteristicLatencyCharacteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeLatencyCharacteristicLatencyCharacteristicCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/latency-characteristic/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeLatencyCharacteristicLatencyCharacteristicValidateBeforeCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeLatencyCharacteristicLatencyCharacteristic(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeLatencyCharacteristicLatencyCharacteristic(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeLatencyCharacteristicLatencyCharacteristicCall(uuid, nodeUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve latency-characteristic
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyContextTopologyNodeLatencyCharacteristicLatencyCharacteristic(String uuid, String nodeUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyContextTopologyNodeLatencyCharacteristicLatencyCharacteristicWithHttpInfo(uuid, nodeUuid);
        return resp.getData();
    }

    /**
     * Retrieve latency-characteristic
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyContextTopologyNodeLatencyCharacteristicLatencyCharacteristicWithHttpInfo(String uuid, String nodeUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeLatencyCharacteristicLatencyCharacteristicValidateBeforeCall(uuid, nodeUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve latency-characteristic (asynchronously)
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeLatencyCharacteristicLatencyCharacteristicAsync(String uuid, String nodeUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeLatencyCharacteristicLatencyCharacteristicValidateBeforeCall(uuid, nodeUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeLatencyCharacteristicLatencyCharacteristicById
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeLatencyCharacteristicLatencyCharacteristicByIdCall(String uuid, String nodeUuid, String trafficPropertyName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/latency-characteristic/{traffic_property_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "traffic_property_name" + "\\}", apiClient.escapeString(trafficPropertyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeLatencyCharacteristicLatencyCharacteristicByIdValidateBeforeCall(String uuid, String nodeUuid, String trafficPropertyName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeLatencyCharacteristicLatencyCharacteristicById(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeLatencyCharacteristicLatencyCharacteristicById(Async)");
        }
        
        // verify the required parameter 'trafficPropertyName' is set
        if (trafficPropertyName == null) {
            throw new ApiException("Missing the required parameter 'trafficPropertyName' when calling retrieveContextTopologyContextTopologyNodeLatencyCharacteristicLatencyCharacteristicById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeLatencyCharacteristicLatencyCharacteristicByIdCall(uuid, nodeUuid, trafficPropertyName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve latency-characteristic by ID
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @return LatencyCharacteristic
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LatencyCharacteristic retrieveContextTopologyContextTopologyNodeLatencyCharacteristicLatencyCharacteristicById(String uuid, String nodeUuid, String trafficPropertyName) throws ApiException {
        ApiResponse<LatencyCharacteristic> resp = retrieveContextTopologyContextTopologyNodeLatencyCharacteristicLatencyCharacteristicByIdWithHttpInfo(uuid, nodeUuid, trafficPropertyName);
        return resp.getData();
    }

    /**
     * Retrieve latency-characteristic by ID
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @return ApiResponse&lt;LatencyCharacteristic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LatencyCharacteristic> retrieveContextTopologyContextTopologyNodeLatencyCharacteristicLatencyCharacteristicByIdWithHttpInfo(String uuid, String nodeUuid, String trafficPropertyName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeLatencyCharacteristicLatencyCharacteristicByIdValidateBeforeCall(uuid, nodeUuid, trafficPropertyName, null, null);
        Type localVarReturnType = new TypeToken<LatencyCharacteristic>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve latency-characteristic by ID (asynchronously)
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeLatencyCharacteristicLatencyCharacteristicByIdAsync(String uuid, String nodeUuid, String trafficPropertyName, final ApiCallback<LatencyCharacteristic> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeLatencyCharacteristicLatencyCharacteristicByIdValidateBeforeCall(uuid, nodeUuid, trafficPropertyName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LatencyCharacteristic>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeNameName
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNameNameCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/name/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNameNameValidateBeforeCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeNameName(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeNameName(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNameNameCall(uuid, nodeUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyContextTopologyNodeNameName(String uuid, String nodeUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyContextTopologyNodeNameNameWithHttpInfo(uuid, nodeUuid);
        return resp.getData();
    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyContextTopologyNodeNameNameWithHttpInfo(String uuid, String nodeUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNameNameValidateBeforeCall(uuid, nodeUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNameNameAsync(String uuid, String nodeUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNameNameValidateBeforeCall(uuid, nodeUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeNameNameById
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param valueName ID of value_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNameNameByIdCall(String uuid, String nodeUuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNameNameByIdValidateBeforeCall(String uuid, String nodeUuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeNameNameById(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling retrieveContextTopologyContextTopologyNodeNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNameNameByIdCall(uuid, nodeUuid, valueName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param valueName ID of value_name (required)
     * @return NameAndValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NameAndValue retrieveContextTopologyContextTopologyNodeNameNameById(String uuid, String nodeUuid, String valueName) throws ApiException {
        ApiResponse<NameAndValue> resp = retrieveContextTopologyContextTopologyNodeNameNameByIdWithHttpInfo(uuid, nodeUuid, valueName);
        return resp.getData();
    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param valueName ID of value_name (required)
     * @return ApiResponse&lt;NameAndValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NameAndValue> retrieveContextTopologyContextTopologyNodeNameNameByIdWithHttpInfo(String uuid, String nodeUuid, String valueName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNameNameByIdValidateBeforeCall(uuid, nodeUuid, valueName, null, null);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name by ID (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param valueName ID of value_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNameNameByIdAsync(String uuid, String nodeUuid, String valueName, final ApiCallback<NameAndValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNameNameByIdValidateBeforeCall(uuid, nodeUuid, valueName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeNode
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeNode(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve node
     * Retrieve operation of resource: node
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyContextTopologyNodeNode(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyContextTopologyNodeNodeWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve node
     * Retrieve operation of resource: node
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyContextTopologyNodeNodeWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve node (asynchronously)
     * Retrieve operation of resource: node
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeNodeById
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeByIdCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeByIdValidateBeforeCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeNodeById(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeNodeById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeByIdCall(uuid, nodeUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve node by ID
     * Retrieve operation of resource: node
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return Node
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Node retrieveContextTopologyContextTopologyNodeNodeById(String uuid, String nodeUuid) throws ApiException {
        ApiResponse<Node> resp = retrieveContextTopologyContextTopologyNodeNodeByIdWithHttpInfo(uuid, nodeUuid);
        return resp.getData();
    }

    /**
     * Retrieve node by ID
     * Retrieve operation of resource: node
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return ApiResponse&lt;Node&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Node> retrieveContextTopologyContextTopologyNodeNodeByIdWithHttpInfo(String uuid, String nodeUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeByIdValidateBeforeCall(uuid, nodeUuid, null, null);
        Type localVarReturnType = new TypeToken<Node>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve node by ID (asynchronously)
     * Retrieve operation of resource: node
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeByIdAsync(String uuid, String nodeUuid, final ApiCallback<Node> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeByIdValidateBeforeCall(uuid, nodeUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Node>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityAvailableCapacity
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityAvailableCapacityCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/available-capacity/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityAvailableCapacityValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityAvailableCapacity(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityAvailableCapacity(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityAvailableCapacity(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityAvailableCapacityCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve available-capacity
     * Retrieve operation of resource: available-capacity
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return Capacity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Capacity retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityAvailableCapacity(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        ApiResponse<Capacity> resp = retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityAvailableCapacityWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve available-capacity
     * Retrieve operation of resource: available-capacity
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return ApiResponse&lt;Capacity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Capacity> retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityAvailableCapacityWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityAvailableCapacityValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<Capacity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve available-capacity (asynchronously)
     * Retrieve operation of resource: available-capacity
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityAvailableCapacityAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ApiCallback<Capacity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityAvailableCapacityValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Capacity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileBandwidthProfile
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileBandwidthProfileCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/available-capacity/bandwidth-profile/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileBandwidthProfileCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve bandwidth-profile
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return BandwidthProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BandwidthProfile retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileBandwidthProfile(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        ApiResponse<BandwidthProfile> resp = retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileBandwidthProfileWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve bandwidth-profile
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return ApiResponse&lt;BandwidthProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BandwidthProfile> retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileBandwidthProfileWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<BandwidthProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve bandwidth-profile (asynchronously)
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileBandwidthProfileAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ApiCallback<BandwidthProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BandwidthProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/available-capacity/bandwidth-profile/committed-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve committed-burst-size
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve committed-burst-size
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve committed-burst-size (asynchronously)
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/available-capacity/bandwidth-profile/committed-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve committed-information-rate
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve committed-information-rate
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve committed-information-rate (asynchronously)
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/available-capacity/bandwidth-profile/peak-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve peak-burst-size
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve peak-burst-size
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve peak-burst-size (asynchronously)
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/available-capacity/bandwidth-profile/peak-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve peak-information-rate
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve peak-information-rate
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve peak-information-rate (asynchronously)
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityTotalSizeTotalSize
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityTotalSizeTotalSizeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/available-capacity/total-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityTotalSizeTotalSizeValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityTotalSizeTotalSize(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityTotalSizeTotalSize(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityTotalSizeTotalSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityTotalSizeTotalSizeCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve total-size
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityTotalSizeTotalSize(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityTotalSizeTotalSizeWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve total-size
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityTotalSizeTotalSizeWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityTotalSizeTotalSizeValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve total-size (asynchronously)
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityTotalSizeTotalSizeAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityTotalSizeTotalSizeValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeNodeRuleGroupComposedRuleGroupComposedRuleGroup
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupComposedRuleGroupComposedRuleGroupCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/composed-rule-group/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupComposedRuleGroupComposedRuleGroupValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupComposedRuleGroupComposedRuleGroup(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupComposedRuleGroupComposedRuleGroup(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupComposedRuleGroupComposedRuleGroup(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupComposedRuleGroupComposedRuleGroupCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve composed-rule-group
     * Retrieve operation of resource: composed-rule-group
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyContextTopologyNodeNodeRuleGroupComposedRuleGroupComposedRuleGroup(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyContextTopologyNodeNodeRuleGroupComposedRuleGroupComposedRuleGroupWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve composed-rule-group
     * Retrieve operation of resource: composed-rule-group
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyContextTopologyNodeNodeRuleGroupComposedRuleGroupComposedRuleGroupWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupComposedRuleGroupComposedRuleGroupValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve composed-rule-group (asynchronously)
     * Retrieve operation of resource: composed-rule-group
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupComposedRuleGroupComposedRuleGroupAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupComposedRuleGroupComposedRuleGroupValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeNodeRuleGroupComposedRuleGroupComposedRuleGroupById
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param topologyUuidNodeUuidNodeRuleGroupUuid ID of topology_uuid_node_uuid_node_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupComposedRuleGroupComposedRuleGroupByIdCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String topologyUuidNodeUuidNodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/composed-rule-group/{topology_uuid_node_uuid_node_rule_group_uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "topology_uuid_node_uuid_node_rule_group_uuid" + "\\}", apiClient.escapeString(topologyUuidNodeUuidNodeRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupComposedRuleGroupComposedRuleGroupByIdValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String topologyUuidNodeUuidNodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupComposedRuleGroupComposedRuleGroupById(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupComposedRuleGroupComposedRuleGroupById(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupComposedRuleGroupComposedRuleGroupById(Async)");
        }
        
        // verify the required parameter 'topologyUuidNodeUuidNodeRuleGroupUuid' is set
        if (topologyUuidNodeUuidNodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'topologyUuidNodeUuidNodeRuleGroupUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupComposedRuleGroupComposedRuleGroupById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupComposedRuleGroupComposedRuleGroupByIdCall(uuid, nodeUuid, nodeRuleGroupUuid, topologyUuidNodeUuidNodeRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve composed-rule-group by ID
     * Retrieve operation of resource: composed-rule-group
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param topologyUuidNodeUuidNodeRuleGroupUuid ID of topology_uuid_node_uuid_node_rule_group_uuid (required)
     * @return NodeRuleGroupRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeRuleGroupRef retrieveContextTopologyContextTopologyNodeNodeRuleGroupComposedRuleGroupComposedRuleGroupById(String uuid, String nodeUuid, String nodeRuleGroupUuid, String topologyUuidNodeUuidNodeRuleGroupUuid) throws ApiException {
        ApiResponse<NodeRuleGroupRef> resp = retrieveContextTopologyContextTopologyNodeNodeRuleGroupComposedRuleGroupComposedRuleGroupByIdWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, topologyUuidNodeUuidNodeRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve composed-rule-group by ID
     * Retrieve operation of resource: composed-rule-group
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param topologyUuidNodeUuidNodeRuleGroupUuid ID of topology_uuid_node_uuid_node_rule_group_uuid (required)
     * @return ApiResponse&lt;NodeRuleGroupRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeRuleGroupRef> retrieveContextTopologyContextTopologyNodeNodeRuleGroupComposedRuleGroupComposedRuleGroupByIdWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String topologyUuidNodeUuidNodeRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupComposedRuleGroupComposedRuleGroupByIdValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, topologyUuidNodeUuidNodeRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<NodeRuleGroupRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve composed-rule-group by ID (asynchronously)
     * Retrieve operation of resource: composed-rule-group
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param topologyUuidNodeUuidNodeRuleGroupUuid ID of topology_uuid_node_uuid_node_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupComposedRuleGroupComposedRuleGroupByIdAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String topologyUuidNodeUuidNodeRuleGroupUuid, final ApiCallback<NodeRuleGroupRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupComposedRuleGroupComposedRuleGroupByIdValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, topologyUuidNodeUuidNodeRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeRuleGroupRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeNodeRuleGroupCostCharacteristicCostCharacteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupCostCharacteristicCostCharacteristicCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/cost-characteristic/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupCostCharacteristicCostCharacteristicValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupCostCharacteristicCostCharacteristic(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupCostCharacteristicCostCharacteristic(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupCostCharacteristicCostCharacteristic(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupCostCharacteristicCostCharacteristicCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve cost-characteristic
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyContextTopologyNodeNodeRuleGroupCostCharacteristicCostCharacteristic(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyContextTopologyNodeNodeRuleGroupCostCharacteristicCostCharacteristicWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve cost-characteristic
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyContextTopologyNodeNodeRuleGroupCostCharacteristicCostCharacteristicWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupCostCharacteristicCostCharacteristicValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve cost-characteristic (asynchronously)
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupCostCharacteristicCostCharacteristicAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupCostCharacteristicCostCharacteristicValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeNodeRuleGroupCostCharacteristicCostCharacteristicById
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param costName ID of cost_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupCostCharacteristicCostCharacteristicByIdCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String costName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/cost-characteristic/{cost_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "cost_name" + "\\}", apiClient.escapeString(costName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupCostCharacteristicCostCharacteristicByIdValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String costName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupCostCharacteristicCostCharacteristicById(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupCostCharacteristicCostCharacteristicById(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupCostCharacteristicCostCharacteristicById(Async)");
        }
        
        // verify the required parameter 'costName' is set
        if (costName == null) {
            throw new ApiException("Missing the required parameter 'costName' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupCostCharacteristicCostCharacteristicById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupCostCharacteristicCostCharacteristicByIdCall(uuid, nodeUuid, nodeRuleGroupUuid, costName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve cost-characteristic by ID
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param costName ID of cost_name (required)
     * @return CostCharacteristic
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CostCharacteristic retrieveContextTopologyContextTopologyNodeNodeRuleGroupCostCharacteristicCostCharacteristicById(String uuid, String nodeUuid, String nodeRuleGroupUuid, String costName) throws ApiException {
        ApiResponse<CostCharacteristic> resp = retrieveContextTopologyContextTopologyNodeNodeRuleGroupCostCharacteristicCostCharacteristicByIdWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, costName);
        return resp.getData();
    }

    /**
     * Retrieve cost-characteristic by ID
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param costName ID of cost_name (required)
     * @return ApiResponse&lt;CostCharacteristic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CostCharacteristic> retrieveContextTopologyContextTopologyNodeNodeRuleGroupCostCharacteristicCostCharacteristicByIdWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String costName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupCostCharacteristicCostCharacteristicByIdValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, costName, null, null);
        Type localVarReturnType = new TypeToken<CostCharacteristic>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve cost-characteristic by ID (asynchronously)
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param costName ID of cost_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupCostCharacteristicCostCharacteristicByIdAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String costName, final ApiCallback<CostCharacteristic> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupCostCharacteristicCostCharacteristicByIdValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, costName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CostCharacteristic>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroup
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroupCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/inter-rule-group/{inter_rule_group_uuid}/associated-node-rule-group/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "inter_rule_group_uuid" + "\\}", apiClient.escapeString(interRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroupValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroup(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroup(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroup(Async)");
        }
        
        // verify the required parameter 'interRuleGroupUuid' is set
        if (interRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'interRuleGroupUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroup(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroupCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve associated-node-rule-group
     * Retrieve operation of resource: associated-node-rule-group
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroup(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroupWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve associated-node-rule-group
     * Retrieve operation of resource: associated-node-rule-group
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroupWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroupValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve associated-node-rule-group (asynchronously)
     * Retrieve operation of resource: associated-node-rule-group
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroupAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroupValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroupById
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param topologyUuidNodeUuidNodeRuleGroupUuid ID of topology_uuid_node_uuid_node_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroupByIdCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String topologyUuidNodeUuidNodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/inter-rule-group/{inter_rule_group_uuid}/associated-node-rule-group/{topology_uuid_node_uuid_node_rule_group_uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "inter_rule_group_uuid" + "\\}", apiClient.escapeString(interRuleGroupUuid.toString()))
            .replaceAll("\\{" + "topology_uuid_node_uuid_node_rule_group_uuid" + "\\}", apiClient.escapeString(topologyUuidNodeUuidNodeRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroupByIdValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String topologyUuidNodeUuidNodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroupById(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroupById(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroupById(Async)");
        }
        
        // verify the required parameter 'interRuleGroupUuid' is set
        if (interRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'interRuleGroupUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroupById(Async)");
        }
        
        // verify the required parameter 'topologyUuidNodeUuidNodeRuleGroupUuid' is set
        if (topologyUuidNodeUuidNodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'topologyUuidNodeUuidNodeRuleGroupUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroupById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroupByIdCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, topologyUuidNodeUuidNodeRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve associated-node-rule-group by ID
     * Retrieve operation of resource: associated-node-rule-group
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param topologyUuidNodeUuidNodeRuleGroupUuid ID of topology_uuid_node_uuid_node_rule_group_uuid (required)
     * @return NodeRuleGroupRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeRuleGroupRef retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroupById(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String topologyUuidNodeUuidNodeRuleGroupUuid) throws ApiException {
        ApiResponse<NodeRuleGroupRef> resp = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroupByIdWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, topologyUuidNodeUuidNodeRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve associated-node-rule-group by ID
     * Retrieve operation of resource: associated-node-rule-group
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param topologyUuidNodeUuidNodeRuleGroupUuid ID of topology_uuid_node_uuid_node_rule_group_uuid (required)
     * @return ApiResponse&lt;NodeRuleGroupRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeRuleGroupRef> retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroupByIdWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String topologyUuidNodeUuidNodeRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroupByIdValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, topologyUuidNodeUuidNodeRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<NodeRuleGroupRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve associated-node-rule-group by ID (asynchronously)
     * Retrieve operation of resource: associated-node-rule-group
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param topologyUuidNodeUuidNodeRuleGroupUuid ID of topology_uuid_node_uuid_node_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroupByIdAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String topologyUuidNodeUuidNodeRuleGroupUuid, final ApiCallback<NodeRuleGroupRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroupByIdValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, topologyUuidNodeUuidNodeRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeRuleGroupRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityAvailableCapacity
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityAvailableCapacityCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/inter-rule-group/{inter_rule_group_uuid}/available-capacity/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "inter_rule_group_uuid" + "\\}", apiClient.escapeString(interRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityAvailableCapacityValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityAvailableCapacity(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityAvailableCapacity(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityAvailableCapacity(Async)");
        }
        
        // verify the required parameter 'interRuleGroupUuid' is set
        if (interRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'interRuleGroupUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityAvailableCapacity(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityAvailableCapacityCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve available-capacity
     * Retrieve operation of resource: available-capacity
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return Capacity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Capacity retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityAvailableCapacity(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        ApiResponse<Capacity> resp = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityAvailableCapacityWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve available-capacity
     * Retrieve operation of resource: available-capacity
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return ApiResponse&lt;Capacity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Capacity> retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityAvailableCapacityWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityAvailableCapacityValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<Capacity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve available-capacity (asynchronously)
     * Retrieve operation of resource: available-capacity
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityAvailableCapacityAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ApiCallback<Capacity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityAvailableCapacityValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Capacity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileBandwidthProfile
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileBandwidthProfileCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/inter-rule-group/{inter_rule_group_uuid}/available-capacity/bandwidth-profile/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "inter_rule_group_uuid" + "\\}", apiClient.escapeString(interRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        
        // verify the required parameter 'interRuleGroupUuid' is set
        if (interRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'interRuleGroupUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileBandwidthProfileCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve bandwidth-profile
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return BandwidthProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BandwidthProfile retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileBandwidthProfile(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        ApiResponse<BandwidthProfile> resp = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileBandwidthProfileWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve bandwidth-profile
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return ApiResponse&lt;BandwidthProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BandwidthProfile> retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileBandwidthProfileWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<BandwidthProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve bandwidth-profile (asynchronously)
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileBandwidthProfileAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ApiCallback<BandwidthProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BandwidthProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/inter-rule-group/{inter_rule_group_uuid}/available-capacity/bandwidth-profile/committed-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "inter_rule_group_uuid" + "\\}", apiClient.escapeString(interRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        
        // verify the required parameter 'interRuleGroupUuid' is set
        if (interRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'interRuleGroupUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve committed-burst-size
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve committed-burst-size
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve committed-burst-size (asynchronously)
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/inter-rule-group/{inter_rule_group_uuid}/available-capacity/bandwidth-profile/committed-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "inter_rule_group_uuid" + "\\}", apiClient.escapeString(interRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        
        // verify the required parameter 'interRuleGroupUuid' is set
        if (interRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'interRuleGroupUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve committed-information-rate
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve committed-information-rate
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve committed-information-rate (asynchronously)
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/inter-rule-group/{inter_rule_group_uuid}/available-capacity/bandwidth-profile/peak-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "inter_rule_group_uuid" + "\\}", apiClient.escapeString(interRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        
        // verify the required parameter 'interRuleGroupUuid' is set
        if (interRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'interRuleGroupUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve peak-burst-size
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve peak-burst-size
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve peak-burst-size (asynchronously)
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/inter-rule-group/{inter_rule_group_uuid}/available-capacity/bandwidth-profile/peak-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "inter_rule_group_uuid" + "\\}", apiClient.escapeString(interRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        
        // verify the required parameter 'interRuleGroupUuid' is set
        if (interRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'interRuleGroupUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve peak-information-rate
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve peak-information-rate
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve peak-information-rate (asynchronously)
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityTotalSizeTotalSize
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityTotalSizeTotalSizeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/inter-rule-group/{inter_rule_group_uuid}/available-capacity/total-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "inter_rule_group_uuid" + "\\}", apiClient.escapeString(interRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityTotalSizeTotalSizeValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityTotalSizeTotalSize(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityTotalSizeTotalSize(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityTotalSizeTotalSize(Async)");
        }
        
        // verify the required parameter 'interRuleGroupUuid' is set
        if (interRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'interRuleGroupUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityTotalSizeTotalSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityTotalSizeTotalSizeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve total-size
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityTotalSizeTotalSize(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityTotalSizeTotalSizeWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve total-size
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityTotalSizeTotalSizeWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityTotalSizeTotalSizeValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve total-size (asynchronously)
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityTotalSizeTotalSizeAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityTotalSizeTotalSizeValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristicCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/inter-rule-group/{inter_rule_group_uuid}/cost-characteristic/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "inter_rule_group_uuid" + "\\}", apiClient.escapeString(interRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristicValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristic(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristic(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristic(Async)");
        }
        
        // verify the required parameter 'interRuleGroupUuid' is set
        if (interRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'interRuleGroupUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristic(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristicCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve cost-characteristic
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristic(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristicWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve cost-characteristic
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristicWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristicValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve cost-characteristic (asynchronously)
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristicAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristicValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristicById
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param costName ID of cost_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristicByIdCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String costName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/inter-rule-group/{inter_rule_group_uuid}/cost-characteristic/{cost_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "inter_rule_group_uuid" + "\\}", apiClient.escapeString(interRuleGroupUuid.toString()))
            .replaceAll("\\{" + "cost_name" + "\\}", apiClient.escapeString(costName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristicByIdValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String costName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristicById(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristicById(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristicById(Async)");
        }
        
        // verify the required parameter 'interRuleGroupUuid' is set
        if (interRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'interRuleGroupUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristicById(Async)");
        }
        
        // verify the required parameter 'costName' is set
        if (costName == null) {
            throw new ApiException("Missing the required parameter 'costName' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristicById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristicByIdCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, costName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve cost-characteristic by ID
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param costName ID of cost_name (required)
     * @return CostCharacteristic
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CostCharacteristic retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristicById(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String costName) throws ApiException {
        ApiResponse<CostCharacteristic> resp = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristicByIdWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, costName);
        return resp.getData();
    }

    /**
     * Retrieve cost-characteristic by ID
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param costName ID of cost_name (required)
     * @return ApiResponse&lt;CostCharacteristic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CostCharacteristic> retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristicByIdWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String costName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristicByIdValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, costName, null, null);
        Type localVarReturnType = new TypeToken<CostCharacteristic>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve cost-characteristic by ID (asynchronously)
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param costName ID of cost_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristicByIdAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String costName, final ApiCallback<CostCharacteristic> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristicByIdValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, costName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CostCharacteristic>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupInterRuleGroup
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupInterRuleGroupCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/inter-rule-group/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupInterRuleGroupValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupInterRuleGroup(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupInterRuleGroup(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupInterRuleGroup(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupInterRuleGroupCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve inter-rule-group
     * Retrieve operation of resource: inter-rule-group
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupInterRuleGroup(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupInterRuleGroupWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve inter-rule-group
     * Retrieve operation of resource: inter-rule-group
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupInterRuleGroupWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupInterRuleGroupValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve inter-rule-group (asynchronously)
     * Retrieve operation of resource: inter-rule-group
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupInterRuleGroupAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupInterRuleGroupValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupInterRuleGroupById
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupInterRuleGroupByIdCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/inter-rule-group/{inter_rule_group_uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "inter_rule_group_uuid" + "\\}", apiClient.escapeString(interRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupInterRuleGroupByIdValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupInterRuleGroupById(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupInterRuleGroupById(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupInterRuleGroupById(Async)");
        }
        
        // verify the required parameter 'interRuleGroupUuid' is set
        if (interRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'interRuleGroupUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupInterRuleGroupById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupInterRuleGroupByIdCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve inter-rule-group by ID
     * Retrieve operation of resource: inter-rule-group
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return InterRuleGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InterRuleGroup retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupInterRuleGroupById(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        ApiResponse<InterRuleGroup> resp = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupInterRuleGroupByIdWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve inter-rule-group by ID
     * Retrieve operation of resource: inter-rule-group
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return ApiResponse&lt;InterRuleGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InterRuleGroup> retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupInterRuleGroupByIdWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupInterRuleGroupByIdValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<InterRuleGroup>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve inter-rule-group by ID (asynchronously)
     * Retrieve operation of resource: inter-rule-group
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupInterRuleGroupByIdAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ApiCallback<InterRuleGroup> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupInterRuleGroupByIdValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InterRuleGroup>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristicCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/inter-rule-group/{inter_rule_group_uuid}/latency-characteristic/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "inter_rule_group_uuid" + "\\}", apiClient.escapeString(interRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristicValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristic(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristic(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristic(Async)");
        }
        
        // verify the required parameter 'interRuleGroupUuid' is set
        if (interRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'interRuleGroupUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristic(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristicCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve latency-characteristic
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristic(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristicWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve latency-characteristic
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristicWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristicValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve latency-characteristic (asynchronously)
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristicAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristicValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristicById
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristicByIdCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String trafficPropertyName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/inter-rule-group/{inter_rule_group_uuid}/latency-characteristic/{traffic_property_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "inter_rule_group_uuid" + "\\}", apiClient.escapeString(interRuleGroupUuid.toString()))
            .replaceAll("\\{" + "traffic_property_name" + "\\}", apiClient.escapeString(trafficPropertyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristicByIdValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String trafficPropertyName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristicById(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristicById(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristicById(Async)");
        }
        
        // verify the required parameter 'interRuleGroupUuid' is set
        if (interRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'interRuleGroupUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristicById(Async)");
        }
        
        // verify the required parameter 'trafficPropertyName' is set
        if (trafficPropertyName == null) {
            throw new ApiException("Missing the required parameter 'trafficPropertyName' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristicById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristicByIdCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, trafficPropertyName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve latency-characteristic by ID
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @return LatencyCharacteristic
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LatencyCharacteristic retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristicById(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String trafficPropertyName) throws ApiException {
        ApiResponse<LatencyCharacteristic> resp = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristicByIdWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, trafficPropertyName);
        return resp.getData();
    }

    /**
     * Retrieve latency-characteristic by ID
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @return ApiResponse&lt;LatencyCharacteristic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LatencyCharacteristic> retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristicByIdWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String trafficPropertyName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristicByIdValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, trafficPropertyName, null, null);
        Type localVarReturnType = new TypeToken<LatencyCharacteristic>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve latency-characteristic by ID (asynchronously)
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristicByIdAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String trafficPropertyName, final ApiCallback<LatencyCharacteristic> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristicByIdValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, trafficPropertyName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LatencyCharacteristic>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupNameName
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupNameNameCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/inter-rule-group/{inter_rule_group_uuid}/name/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "inter_rule_group_uuid" + "\\}", apiClient.escapeString(interRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupNameNameValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupNameName(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupNameName(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupNameName(Async)");
        }
        
        // verify the required parameter 'interRuleGroupUuid' is set
        if (interRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'interRuleGroupUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupNameName(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupNameNameCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupNameName(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupNameNameWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupNameNameWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupNameNameValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupNameNameAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupNameNameValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupNameNameById
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param valueName ID of value_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupNameNameByIdCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/inter-rule-group/{inter_rule_group_uuid}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "inter_rule_group_uuid" + "\\}", apiClient.escapeString(interRuleGroupUuid.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupNameNameByIdValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupNameNameById(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupNameNameById(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupNameNameById(Async)");
        }
        
        // verify the required parameter 'interRuleGroupUuid' is set
        if (interRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'interRuleGroupUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupNameNameByIdCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, valueName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param valueName ID of value_name (required)
     * @return NameAndValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NameAndValue retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupNameNameById(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String valueName) throws ApiException {
        ApiResponse<NameAndValue> resp = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupNameNameByIdWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, valueName);
        return resp.getData();
    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param valueName ID of value_name (required)
     * @return ApiResponse&lt;NameAndValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NameAndValue> retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupNameNameByIdWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String valueName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupNameNameByIdValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, valueName, null, null);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name by ID (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param valueName ID of value_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupNameNameByIdAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String valueName, final ApiCallback<NameAndValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupNameNameByIdValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, valueName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristicCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/inter-rule-group/{inter_rule_group_uuid}/risk-characteristic/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "inter_rule_group_uuid" + "\\}", apiClient.escapeString(interRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristicValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristic(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristic(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristic(Async)");
        }
        
        // verify the required parameter 'interRuleGroupUuid' is set
        if (interRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'interRuleGroupUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristic(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristicCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve risk-characteristic
     * Retrieve operation of resource: risk-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristic(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristicWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve risk-characteristic
     * Retrieve operation of resource: risk-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristicWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristicValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve risk-characteristic (asynchronously)
     * Retrieve operation of resource: risk-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristicAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristicValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristicById
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param riskCharacteristicName ID of risk_characteristic_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristicByIdCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String riskCharacteristicName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/inter-rule-group/{inter_rule_group_uuid}/risk-characteristic/{risk_characteristic_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "inter_rule_group_uuid" + "\\}", apiClient.escapeString(interRuleGroupUuid.toString()))
            .replaceAll("\\{" + "risk_characteristic_name" + "\\}", apiClient.escapeString(riskCharacteristicName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristicByIdValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String riskCharacteristicName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristicById(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristicById(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristicById(Async)");
        }
        
        // verify the required parameter 'interRuleGroupUuid' is set
        if (interRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'interRuleGroupUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristicById(Async)");
        }
        
        // verify the required parameter 'riskCharacteristicName' is set
        if (riskCharacteristicName == null) {
            throw new ApiException("Missing the required parameter 'riskCharacteristicName' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristicById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristicByIdCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, riskCharacteristicName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve risk-characteristic by ID
     * Retrieve operation of resource: risk-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param riskCharacteristicName ID of risk_characteristic_name (required)
     * @return RiskCharacteristic
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RiskCharacteristic retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristicById(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String riskCharacteristicName) throws ApiException {
        ApiResponse<RiskCharacteristic> resp = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristicByIdWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, riskCharacteristicName);
        return resp.getData();
    }

    /**
     * Retrieve risk-characteristic by ID
     * Retrieve operation of resource: risk-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param riskCharacteristicName ID of risk_characteristic_name (required)
     * @return ApiResponse&lt;RiskCharacteristic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RiskCharacteristic> retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristicByIdWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String riskCharacteristicName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristicByIdValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, riskCharacteristicName, null, null);
        Type localVarReturnType = new TypeToken<RiskCharacteristic>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve risk-characteristic by ID (asynchronously)
     * Retrieve operation of resource: risk-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param riskCharacteristicName ID of risk_characteristic_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristicByIdAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String riskCharacteristicName, final ApiCallback<RiskCharacteristic> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristicByIdValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, riskCharacteristicName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RiskCharacteristic>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameName
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param localId ID of local_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameNameCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/inter-rule-group/{inter_rule_group_uuid}/rule/{local_id}/name/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "inter_rule_group_uuid" + "\\}", apiClient.escapeString(interRuleGroupUuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameNameValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameName(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameName(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameName(Async)");
        }
        
        // verify the required parameter 'interRuleGroupUuid' is set
        if (interRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'interRuleGroupUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameName(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameName(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameNameCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, localId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param localId ID of local_id (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameName(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String localId) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameNameWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, localId);
        return resp.getData();
    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameNameWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameNameValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, localId, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameNameAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String localId, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameNameValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, localId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameNameById
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameNameByIdCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String localId, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/inter-rule-group/{inter_rule_group_uuid}/rule/{local_id}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "inter_rule_group_uuid" + "\\}", apiClient.escapeString(interRuleGroupUuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameNameByIdValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String localId, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameNameById(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameNameById(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameNameById(Async)");
        }
        
        // verify the required parameter 'interRuleGroupUuid' is set
        if (interRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'interRuleGroupUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameNameById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameNameByIdCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, localId, valueName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @return NameAndValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NameAndValue retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameNameById(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String localId, String valueName) throws ApiException {
        ApiResponse<NameAndValue> resp = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameNameByIdWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, localId, valueName);
        return resp.getData();
    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @return ApiResponse&lt;NameAndValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NameAndValue> retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameNameByIdWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String localId, String valueName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameNameByIdValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, localId, valueName, null, null);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name by ID (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameNameByIdAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String localId, String valueName, final ApiCallback<NameAndValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameNameByIdValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, localId, valueName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRule
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRuleCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/inter-rule-group/{inter_rule_group_uuid}/rule/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "inter_rule_group_uuid" + "\\}", apiClient.escapeString(interRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRuleValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRule(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRule(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRule(Async)");
        }
        
        // verify the required parameter 'interRuleGroupUuid' is set
        if (interRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'interRuleGroupUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRule(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRuleCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve rule
     * Retrieve operation of resource: rule
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRule(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRuleWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve rule
     * Retrieve operation of resource: rule
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRuleWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRuleValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve rule (asynchronously)
     * Retrieve operation of resource: rule
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRuleAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRuleValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRuleById
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param localId ID of local_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRuleByIdCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/inter-rule-group/{inter_rule_group_uuid}/rule/{local_id}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "inter_rule_group_uuid" + "\\}", apiClient.escapeString(interRuleGroupUuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRuleByIdValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRuleById(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRuleById(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRuleById(Async)");
        }
        
        // verify the required parameter 'interRuleGroupUuid' is set
        if (interRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'interRuleGroupUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRuleById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRuleById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRuleByIdCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, localId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve rule by ID
     * Retrieve operation of resource: rule
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param localId ID of local_id (required)
     * @return Rule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Rule retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRuleById(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String localId) throws ApiException {
        ApiResponse<Rule> resp = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRuleByIdWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, localId);
        return resp.getData();
    }

    /**
     * Retrieve rule by ID
     * Retrieve operation of resource: rule
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;Rule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Rule> retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRuleByIdWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRuleByIdValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, localId, null, null);
        Type localVarReturnType = new TypeToken<Rule>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve rule by ID (asynchronously)
     * Retrieve operation of resource: rule
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRuleByIdAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, String localId, final ApiCallback<Rule> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRuleByIdValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, localId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Rule>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileBandwidthProfile
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileBandwidthProfileCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/inter-rule-group/{inter_rule_group_uuid}/total-potential-capacity/bandwidth-profile/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "inter_rule_group_uuid" + "\\}", apiClient.escapeString(interRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        
        // verify the required parameter 'interRuleGroupUuid' is set
        if (interRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'interRuleGroupUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileBandwidthProfileCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve bandwidth-profile
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return BandwidthProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BandwidthProfile retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileBandwidthProfile(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        ApiResponse<BandwidthProfile> resp = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileBandwidthProfileWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve bandwidth-profile
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return ApiResponse&lt;BandwidthProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BandwidthProfile> retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileBandwidthProfileWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<BandwidthProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve bandwidth-profile (asynchronously)
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileBandwidthProfileAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ApiCallback<BandwidthProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BandwidthProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/inter-rule-group/{inter_rule_group_uuid}/total-potential-capacity/bandwidth-profile/committed-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "inter_rule_group_uuid" + "\\}", apiClient.escapeString(interRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        
        // verify the required parameter 'interRuleGroupUuid' is set
        if (interRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'interRuleGroupUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve committed-burst-size
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve committed-burst-size
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve committed-burst-size (asynchronously)
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/inter-rule-group/{inter_rule_group_uuid}/total-potential-capacity/bandwidth-profile/committed-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "inter_rule_group_uuid" + "\\}", apiClient.escapeString(interRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        
        // verify the required parameter 'interRuleGroupUuid' is set
        if (interRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'interRuleGroupUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve committed-information-rate
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve committed-information-rate
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve committed-information-rate (asynchronously)
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/inter-rule-group/{inter_rule_group_uuid}/total-potential-capacity/bandwidth-profile/peak-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "inter_rule_group_uuid" + "\\}", apiClient.escapeString(interRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        
        // verify the required parameter 'interRuleGroupUuid' is set
        if (interRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'interRuleGroupUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve peak-burst-size
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve peak-burst-size
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve peak-burst-size (asynchronously)
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/inter-rule-group/{inter_rule_group_uuid}/total-potential-capacity/bandwidth-profile/peak-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "inter_rule_group_uuid" + "\\}", apiClient.escapeString(interRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        
        // verify the required parameter 'interRuleGroupUuid' is set
        if (interRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'interRuleGroupUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve peak-information-rate
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve peak-information-rate
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve peak-information-rate (asynchronously)
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityTotalPotentialCapacity
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityTotalPotentialCapacityCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/inter-rule-group/{inter_rule_group_uuid}/total-potential-capacity/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "inter_rule_group_uuid" + "\\}", apiClient.escapeString(interRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityTotalPotentialCapacityValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityTotalPotentialCapacity(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityTotalPotentialCapacity(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityTotalPotentialCapacity(Async)");
        }
        
        // verify the required parameter 'interRuleGroupUuid' is set
        if (interRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'interRuleGroupUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityTotalPotentialCapacity(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityTotalPotentialCapacityCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve total-potential-capacity
     * Retrieve operation of resource: total-potential-capacity
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return Capacity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Capacity retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityTotalPotentialCapacity(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        ApiResponse<Capacity> resp = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityTotalPotentialCapacityWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve total-potential-capacity
     * Retrieve operation of resource: total-potential-capacity
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return ApiResponse&lt;Capacity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Capacity> retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityTotalPotentialCapacityWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityTotalPotentialCapacityValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<Capacity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve total-potential-capacity (asynchronously)
     * Retrieve operation of resource: total-potential-capacity
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityTotalPotentialCapacityAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ApiCallback<Capacity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityTotalPotentialCapacityValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Capacity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityTotalSizeTotalSize
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityTotalSizeTotalSizeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/inter-rule-group/{inter_rule_group_uuid}/total-potential-capacity/total-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "inter_rule_group_uuid" + "\\}", apiClient.escapeString(interRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityTotalSizeTotalSizeValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityTotalSizeTotalSize(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityTotalSizeTotalSize(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityTotalSizeTotalSize(Async)");
        }
        
        // verify the required parameter 'interRuleGroupUuid' is set
        if (interRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'interRuleGroupUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityTotalSizeTotalSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityTotalSizeTotalSizeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve total-size
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityTotalSizeTotalSize(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityTotalSizeTotalSizeWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve total-size
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityTotalSizeTotalSizeWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityTotalSizeTotalSizeValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve total-size (asynchronously)
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param interRuleGroupUuid ID of inter_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityTotalSizeTotalSizeAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String interRuleGroupUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityTotalSizeTotalSizeValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeNodeRuleGroupLatencyCharacteristicLatencyCharacteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupLatencyCharacteristicLatencyCharacteristicCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/latency-characteristic/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupLatencyCharacteristicLatencyCharacteristicValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupLatencyCharacteristicLatencyCharacteristic(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupLatencyCharacteristicLatencyCharacteristic(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupLatencyCharacteristicLatencyCharacteristic(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupLatencyCharacteristicLatencyCharacteristicCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve latency-characteristic
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyContextTopologyNodeNodeRuleGroupLatencyCharacteristicLatencyCharacteristic(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyContextTopologyNodeNodeRuleGroupLatencyCharacteristicLatencyCharacteristicWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve latency-characteristic
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyContextTopologyNodeNodeRuleGroupLatencyCharacteristicLatencyCharacteristicWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupLatencyCharacteristicLatencyCharacteristicValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve latency-characteristic (asynchronously)
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupLatencyCharacteristicLatencyCharacteristicAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupLatencyCharacteristicLatencyCharacteristicValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeNodeRuleGroupLatencyCharacteristicLatencyCharacteristicById
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupLatencyCharacteristicLatencyCharacteristicByIdCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String trafficPropertyName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/latency-characteristic/{traffic_property_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "traffic_property_name" + "\\}", apiClient.escapeString(trafficPropertyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupLatencyCharacteristicLatencyCharacteristicByIdValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String trafficPropertyName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupLatencyCharacteristicLatencyCharacteristicById(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupLatencyCharacteristicLatencyCharacteristicById(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupLatencyCharacteristicLatencyCharacteristicById(Async)");
        }
        
        // verify the required parameter 'trafficPropertyName' is set
        if (trafficPropertyName == null) {
            throw new ApiException("Missing the required parameter 'trafficPropertyName' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupLatencyCharacteristicLatencyCharacteristicById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupLatencyCharacteristicLatencyCharacteristicByIdCall(uuid, nodeUuid, nodeRuleGroupUuid, trafficPropertyName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve latency-characteristic by ID
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @return LatencyCharacteristic
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LatencyCharacteristic retrieveContextTopologyContextTopologyNodeNodeRuleGroupLatencyCharacteristicLatencyCharacteristicById(String uuid, String nodeUuid, String nodeRuleGroupUuid, String trafficPropertyName) throws ApiException {
        ApiResponse<LatencyCharacteristic> resp = retrieveContextTopologyContextTopologyNodeNodeRuleGroupLatencyCharacteristicLatencyCharacteristicByIdWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, trafficPropertyName);
        return resp.getData();
    }

    /**
     * Retrieve latency-characteristic by ID
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @return ApiResponse&lt;LatencyCharacteristic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LatencyCharacteristic> retrieveContextTopologyContextTopologyNodeNodeRuleGroupLatencyCharacteristicLatencyCharacteristicByIdWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String trafficPropertyName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupLatencyCharacteristicLatencyCharacteristicByIdValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, trafficPropertyName, null, null);
        Type localVarReturnType = new TypeToken<LatencyCharacteristic>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve latency-characteristic by ID (asynchronously)
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupLatencyCharacteristicLatencyCharacteristicByIdAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String trafficPropertyName, final ApiCallback<LatencyCharacteristic> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupLatencyCharacteristicLatencyCharacteristicByIdValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, trafficPropertyName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LatencyCharacteristic>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeNodeRuleGroupNameName
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupNameNameCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/name/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupNameNameValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupNameName(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupNameName(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupNameName(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupNameNameCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyContextTopologyNodeNodeRuleGroupNameName(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyContextTopologyNodeNodeRuleGroupNameNameWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyContextTopologyNodeNodeRuleGroupNameNameWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupNameNameValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupNameNameAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupNameNameValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeNodeRuleGroupNameNameById
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param valueName ID of value_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupNameNameByIdCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupNameNameByIdValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupNameNameById(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupNameNameById(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupNameNameByIdCall(uuid, nodeUuid, nodeRuleGroupUuid, valueName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param valueName ID of value_name (required)
     * @return NameAndValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NameAndValue retrieveContextTopologyContextTopologyNodeNodeRuleGroupNameNameById(String uuid, String nodeUuid, String nodeRuleGroupUuid, String valueName) throws ApiException {
        ApiResponse<NameAndValue> resp = retrieveContextTopologyContextTopologyNodeNodeRuleGroupNameNameByIdWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, valueName);
        return resp.getData();
    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param valueName ID of value_name (required)
     * @return ApiResponse&lt;NameAndValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NameAndValue> retrieveContextTopologyContextTopologyNodeNodeRuleGroupNameNameByIdWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String valueName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupNameNameByIdValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, valueName, null, null);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name by ID (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param valueName ID of value_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupNameNameByIdAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String valueName, final ApiCallback<NameAndValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupNameNameByIdValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, valueName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeNodeRuleGroupNodeEdgePointNodeEdgePoint
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupNodeEdgePointNodeEdgePointCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/node-edge-point/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupNodeEdgePointNodeEdgePointValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupNodeEdgePointNodeEdgePoint(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupNodeEdgePointNodeEdgePoint(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupNodeEdgePointNodeEdgePoint(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupNodeEdgePointNodeEdgePointCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve node-edge-point
     * Retrieve operation of resource: node-edge-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyContextTopologyNodeNodeRuleGroupNodeEdgePointNodeEdgePoint(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyContextTopologyNodeNodeRuleGroupNodeEdgePointNodeEdgePointWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve node-edge-point
     * Retrieve operation of resource: node-edge-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyContextTopologyNodeNodeRuleGroupNodeEdgePointNodeEdgePointWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupNodeEdgePointNodeEdgePointValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve node-edge-point (asynchronously)
     * Retrieve operation of resource: node-edge-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupNodeEdgePointNodeEdgePointAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupNodeEdgePointNodeEdgePointValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeNodeRuleGroupNodeEdgePointNodeEdgePointById
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param topologyUuidNodeUuidNodeEdgePointUuid ID of topology_uuid_node_uuid_node_edge_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupNodeEdgePointNodeEdgePointByIdCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String topologyUuidNodeUuidNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/node-edge-point/{topology_uuid_node_uuid_node_edge_point_uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "topology_uuid_node_uuid_node_edge_point_uuid" + "\\}", apiClient.escapeString(topologyUuidNodeUuidNodeEdgePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupNodeEdgePointNodeEdgePointByIdValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String topologyUuidNodeUuidNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupNodeEdgePointNodeEdgePointById(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupNodeEdgePointNodeEdgePointById(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupNodeEdgePointNodeEdgePointById(Async)");
        }
        
        // verify the required parameter 'topologyUuidNodeUuidNodeEdgePointUuid' is set
        if (topologyUuidNodeUuidNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'topologyUuidNodeUuidNodeEdgePointUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupNodeEdgePointNodeEdgePointById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupNodeEdgePointNodeEdgePointByIdCall(uuid, nodeUuid, nodeRuleGroupUuid, topologyUuidNodeUuidNodeEdgePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve node-edge-point by ID
     * Retrieve operation of resource: node-edge-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param topologyUuidNodeUuidNodeEdgePointUuid ID of topology_uuid_node_uuid_node_edge_point_uuid (required)
     * @return NodeEdgePointRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeEdgePointRef retrieveContextTopologyContextTopologyNodeNodeRuleGroupNodeEdgePointNodeEdgePointById(String uuid, String nodeUuid, String nodeRuleGroupUuid, String topologyUuidNodeUuidNodeEdgePointUuid) throws ApiException {
        ApiResponse<NodeEdgePointRef> resp = retrieveContextTopologyContextTopologyNodeNodeRuleGroupNodeEdgePointNodeEdgePointByIdWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, topologyUuidNodeUuidNodeEdgePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve node-edge-point by ID
     * Retrieve operation of resource: node-edge-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param topologyUuidNodeUuidNodeEdgePointUuid ID of topology_uuid_node_uuid_node_edge_point_uuid (required)
     * @return ApiResponse&lt;NodeEdgePointRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeEdgePointRef> retrieveContextTopologyContextTopologyNodeNodeRuleGroupNodeEdgePointNodeEdgePointByIdWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String topologyUuidNodeUuidNodeEdgePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupNodeEdgePointNodeEdgePointByIdValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, topologyUuidNodeUuidNodeEdgePointUuid, null, null);
        Type localVarReturnType = new TypeToken<NodeEdgePointRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve node-edge-point by ID (asynchronously)
     * Retrieve operation of resource: node-edge-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param topologyUuidNodeUuidNodeEdgePointUuid ID of topology_uuid_node_uuid_node_edge_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupNodeEdgePointNodeEdgePointByIdAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String topologyUuidNodeUuidNodeEdgePointUuid, final ApiCallback<NodeEdgePointRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupNodeEdgePointNodeEdgePointByIdValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, topologyUuidNodeUuidNodeEdgePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeEdgePointRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeNodeRuleGroupNodeRuleGroup
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupNodeRuleGroupCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/node-rule-group/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupNodeRuleGroupValidateBeforeCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupNodeRuleGroup(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupNodeRuleGroup(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupNodeRuleGroupCall(uuid, nodeUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve node-rule-group
     * Retrieve operation of resource: node-rule-group
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyContextTopologyNodeNodeRuleGroupNodeRuleGroup(String uuid, String nodeUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyContextTopologyNodeNodeRuleGroupNodeRuleGroupWithHttpInfo(uuid, nodeUuid);
        return resp.getData();
    }

    /**
     * Retrieve node-rule-group
     * Retrieve operation of resource: node-rule-group
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyContextTopologyNodeNodeRuleGroupNodeRuleGroupWithHttpInfo(String uuid, String nodeUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupNodeRuleGroupValidateBeforeCall(uuid, nodeUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve node-rule-group (asynchronously)
     * Retrieve operation of resource: node-rule-group
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupNodeRuleGroupAsync(String uuid, String nodeUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupNodeRuleGroupValidateBeforeCall(uuid, nodeUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeNodeRuleGroupNodeRuleGroupById
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupNodeRuleGroupByIdCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupNodeRuleGroupByIdValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupNodeRuleGroupById(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupNodeRuleGroupById(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupNodeRuleGroupById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupNodeRuleGroupByIdCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve node-rule-group by ID
     * Retrieve operation of resource: node-rule-group
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return NodeRuleGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeRuleGroup retrieveContextTopologyContextTopologyNodeNodeRuleGroupNodeRuleGroupById(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        ApiResponse<NodeRuleGroup> resp = retrieveContextTopologyContextTopologyNodeNodeRuleGroupNodeRuleGroupByIdWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve node-rule-group by ID
     * Retrieve operation of resource: node-rule-group
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return ApiResponse&lt;NodeRuleGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeRuleGroup> retrieveContextTopologyContextTopologyNodeNodeRuleGroupNodeRuleGroupByIdWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupNodeRuleGroupByIdValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<NodeRuleGroup>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve node-rule-group by ID (asynchronously)
     * Retrieve operation of resource: node-rule-group
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupNodeRuleGroupByIdAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ApiCallback<NodeRuleGroup> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupNodeRuleGroupByIdValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeRuleGroup>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeNodeRuleGroupRiskCharacteristicRiskCharacteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupRiskCharacteristicRiskCharacteristicCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/risk-characteristic/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupRiskCharacteristicRiskCharacteristicValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupRiskCharacteristicRiskCharacteristic(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupRiskCharacteristicRiskCharacteristic(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupRiskCharacteristicRiskCharacteristic(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupRiskCharacteristicRiskCharacteristicCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve risk-characteristic
     * Retrieve operation of resource: risk-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyContextTopologyNodeNodeRuleGroupRiskCharacteristicRiskCharacteristic(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyContextTopologyNodeNodeRuleGroupRiskCharacteristicRiskCharacteristicWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve risk-characteristic
     * Retrieve operation of resource: risk-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyContextTopologyNodeNodeRuleGroupRiskCharacteristicRiskCharacteristicWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupRiskCharacteristicRiskCharacteristicValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve risk-characteristic (asynchronously)
     * Retrieve operation of resource: risk-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupRiskCharacteristicRiskCharacteristicAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupRiskCharacteristicRiskCharacteristicValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeNodeRuleGroupRiskCharacteristicRiskCharacteristicById
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param riskCharacteristicName ID of risk_characteristic_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupRiskCharacteristicRiskCharacteristicByIdCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String riskCharacteristicName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/risk-characteristic/{risk_characteristic_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "risk_characteristic_name" + "\\}", apiClient.escapeString(riskCharacteristicName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupRiskCharacteristicRiskCharacteristicByIdValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String riskCharacteristicName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupRiskCharacteristicRiskCharacteristicById(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupRiskCharacteristicRiskCharacteristicById(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupRiskCharacteristicRiskCharacteristicById(Async)");
        }
        
        // verify the required parameter 'riskCharacteristicName' is set
        if (riskCharacteristicName == null) {
            throw new ApiException("Missing the required parameter 'riskCharacteristicName' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupRiskCharacteristicRiskCharacteristicById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupRiskCharacteristicRiskCharacteristicByIdCall(uuid, nodeUuid, nodeRuleGroupUuid, riskCharacteristicName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve risk-characteristic by ID
     * Retrieve operation of resource: risk-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param riskCharacteristicName ID of risk_characteristic_name (required)
     * @return RiskCharacteristic
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RiskCharacteristic retrieveContextTopologyContextTopologyNodeNodeRuleGroupRiskCharacteristicRiskCharacteristicById(String uuid, String nodeUuid, String nodeRuleGroupUuid, String riskCharacteristicName) throws ApiException {
        ApiResponse<RiskCharacteristic> resp = retrieveContextTopologyContextTopologyNodeNodeRuleGroupRiskCharacteristicRiskCharacteristicByIdWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, riskCharacteristicName);
        return resp.getData();
    }

    /**
     * Retrieve risk-characteristic by ID
     * Retrieve operation of resource: risk-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param riskCharacteristicName ID of risk_characteristic_name (required)
     * @return ApiResponse&lt;RiskCharacteristic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RiskCharacteristic> retrieveContextTopologyContextTopologyNodeNodeRuleGroupRiskCharacteristicRiskCharacteristicByIdWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String riskCharacteristicName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupRiskCharacteristicRiskCharacteristicByIdValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, riskCharacteristicName, null, null);
        Type localVarReturnType = new TypeToken<RiskCharacteristic>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve risk-characteristic by ID (asynchronously)
     * Retrieve operation of resource: risk-characteristic
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param riskCharacteristicName ID of risk_characteristic_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupRiskCharacteristicRiskCharacteristicByIdAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String riskCharacteristicName, final ApiCallback<RiskCharacteristic> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupRiskCharacteristicRiskCharacteristicByIdValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, riskCharacteristicName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RiskCharacteristic>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeNodeRuleGroupRuleNameName
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param localId ID of local_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupRuleNameNameCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/rule/{local_id}/name/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupRuleNameNameValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupRuleNameName(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupRuleNameName(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupRuleNameName(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupRuleNameName(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupRuleNameNameCall(uuid, nodeUuid, nodeRuleGroupUuid, localId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param localId ID of local_id (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyContextTopologyNodeNodeRuleGroupRuleNameName(String uuid, String nodeUuid, String nodeRuleGroupUuid, String localId) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyContextTopologyNodeNodeRuleGroupRuleNameNameWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, localId);
        return resp.getData();
    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyContextTopologyNodeNodeRuleGroupRuleNameNameWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupRuleNameNameValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, localId, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupRuleNameNameAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String localId, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupRuleNameNameValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, localId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeNodeRuleGroupRuleNameNameById
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupRuleNameNameByIdCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String localId, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/rule/{local_id}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupRuleNameNameByIdValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String localId, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupRuleNameNameById(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupRuleNameNameById(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupRuleNameNameById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupRuleNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupRuleNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupRuleNameNameByIdCall(uuid, nodeUuid, nodeRuleGroupUuid, localId, valueName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @return NameAndValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NameAndValue retrieveContextTopologyContextTopologyNodeNodeRuleGroupRuleNameNameById(String uuid, String nodeUuid, String nodeRuleGroupUuid, String localId, String valueName) throws ApiException {
        ApiResponse<NameAndValue> resp = retrieveContextTopologyContextTopologyNodeNodeRuleGroupRuleNameNameByIdWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, localId, valueName);
        return resp.getData();
    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @return ApiResponse&lt;NameAndValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NameAndValue> retrieveContextTopologyContextTopologyNodeNodeRuleGroupRuleNameNameByIdWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String localId, String valueName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupRuleNameNameByIdValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, localId, valueName, null, null);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name by ID (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupRuleNameNameByIdAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String localId, String valueName, final ApiCallback<NameAndValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupRuleNameNameByIdValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, localId, valueName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeNodeRuleGroupRuleRule
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupRuleRuleCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/rule/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupRuleRuleValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupRuleRule(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupRuleRule(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupRuleRule(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupRuleRuleCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve rule
     * Retrieve operation of resource: rule
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyContextTopologyNodeNodeRuleGroupRuleRule(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyContextTopologyNodeNodeRuleGroupRuleRuleWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve rule
     * Retrieve operation of resource: rule
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyContextTopologyNodeNodeRuleGroupRuleRuleWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupRuleRuleValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve rule (asynchronously)
     * Retrieve operation of resource: rule
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupRuleRuleAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupRuleRuleValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeNodeRuleGroupRuleRuleById
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param localId ID of local_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupRuleRuleByIdCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/rule/{local_id}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()))
            .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupRuleRuleByIdValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupRuleRuleById(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupRuleRuleById(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupRuleRuleById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupRuleRuleById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupRuleRuleByIdCall(uuid, nodeUuid, nodeRuleGroupUuid, localId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve rule by ID
     * Retrieve operation of resource: rule
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param localId ID of local_id (required)
     * @return Rule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Rule retrieveContextTopologyContextTopologyNodeNodeRuleGroupRuleRuleById(String uuid, String nodeUuid, String nodeRuleGroupUuid, String localId) throws ApiException {
        ApiResponse<Rule> resp = retrieveContextTopologyContextTopologyNodeNodeRuleGroupRuleRuleByIdWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid, localId);
        return resp.getData();
    }

    /**
     * Retrieve rule by ID
     * Retrieve operation of resource: rule
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;Rule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Rule> retrieveContextTopologyContextTopologyNodeNodeRuleGroupRuleRuleByIdWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupRuleRuleByIdValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, localId, null, null);
        Type localVarReturnType = new TypeToken<Rule>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve rule by ID (asynchronously)
     * Retrieve operation of resource: rule
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupRuleRuleByIdAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, String localId, final ApiCallback<Rule> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupRuleRuleByIdValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, localId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Rule>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileBandwidthProfile
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileBandwidthProfileCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/total-potential-capacity/bandwidth-profile/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileBandwidthProfileCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve bandwidth-profile
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return BandwidthProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BandwidthProfile retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileBandwidthProfile(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        ApiResponse<BandwidthProfile> resp = retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileBandwidthProfileWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve bandwidth-profile
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return ApiResponse&lt;BandwidthProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BandwidthProfile> retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileBandwidthProfileWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<BandwidthProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve bandwidth-profile (asynchronously)
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileBandwidthProfileAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ApiCallback<BandwidthProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BandwidthProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/total-potential-capacity/bandwidth-profile/committed-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve committed-burst-size
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve committed-burst-size
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve committed-burst-size (asynchronously)
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/total-potential-capacity/bandwidth-profile/committed-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve committed-information-rate
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve committed-information-rate
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve committed-information-rate (asynchronously)
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/total-potential-capacity/bandwidth-profile/peak-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve peak-burst-size
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve peak-burst-size
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve peak-burst-size (asynchronously)
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/total-potential-capacity/bandwidth-profile/peak-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve peak-information-rate
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve peak-information-rate
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve peak-information-rate (asynchronously)
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityTotalPotentialCapacity
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityTotalPotentialCapacityCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/total-potential-capacity/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityTotalPotentialCapacityValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityTotalPotentialCapacity(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityTotalPotentialCapacity(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityTotalPotentialCapacity(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityTotalPotentialCapacityCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve total-potential-capacity
     * Retrieve operation of resource: total-potential-capacity
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return Capacity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Capacity retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityTotalPotentialCapacity(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        ApiResponse<Capacity> resp = retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityTotalPotentialCapacityWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve total-potential-capacity
     * Retrieve operation of resource: total-potential-capacity
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return ApiResponse&lt;Capacity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Capacity> retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityTotalPotentialCapacityWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityTotalPotentialCapacityValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<Capacity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve total-potential-capacity (asynchronously)
     * Retrieve operation of resource: total-potential-capacity
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityTotalPotentialCapacityAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ApiCallback<Capacity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityTotalPotentialCapacityValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Capacity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityTotalSizeTotalSize
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityTotalSizeTotalSizeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/node-rule-group/{node_rule_group_uuid}/total-potential-capacity/total-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "node_rule_group_uuid" + "\\}", apiClient.escapeString(nodeRuleGroupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityTotalSizeTotalSizeValidateBeforeCall(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityTotalSizeTotalSize(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityTotalSizeTotalSize(Async)");
        }
        
        // verify the required parameter 'nodeRuleGroupUuid' is set
        if (nodeRuleGroupUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeRuleGroupUuid' when calling retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityTotalSizeTotalSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityTotalSizeTotalSizeCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve total-size
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityTotalSizeTotalSize(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityTotalSizeTotalSizeWithHttpInfo(uuid, nodeUuid, nodeRuleGroupUuid);
        return resp.getData();
    }

    /**
     * Retrieve total-size
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityTotalSizeTotalSizeWithHttpInfo(String uuid, String nodeUuid, String nodeRuleGroupUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityTotalSizeTotalSizeValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve total-size (asynchronously)
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param nodeRuleGroupUuid ID of node_rule_group_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityTotalSizeTotalSizeAsync(String uuid, String nodeUuid, String nodeRuleGroupUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityTotalSizeTotalSizeValidateBeforeCall(uuid, nodeUuid, nodeRuleGroupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAggregatedNodeEdgePointAggregatedNodeEdgePoint
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAggregatedNodeEdgePointAggregatedNodeEdgePointCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/aggregated-node-edge-point/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAggregatedNodeEdgePointAggregatedNodeEdgePointValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAggregatedNodeEdgePointAggregatedNodeEdgePoint(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAggregatedNodeEdgePointAggregatedNodeEdgePoint(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAggregatedNodeEdgePointAggregatedNodeEdgePoint(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAggregatedNodeEdgePointAggregatedNodeEdgePointCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve aggregated-node-edge-point
     * Retrieve operation of resource: aggregated-node-edge-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAggregatedNodeEdgePointAggregatedNodeEdgePoint(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAggregatedNodeEdgePointAggregatedNodeEdgePointWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve aggregated-node-edge-point
     * Retrieve operation of resource: aggregated-node-edge-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAggregatedNodeEdgePointAggregatedNodeEdgePointWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAggregatedNodeEdgePointAggregatedNodeEdgePointValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve aggregated-node-edge-point (asynchronously)
     * Retrieve operation of resource: aggregated-node-edge-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAggregatedNodeEdgePointAggregatedNodeEdgePointAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAggregatedNodeEdgePointAggregatedNodeEdgePointValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAggregatedNodeEdgePointAggregatedNodeEdgePointById
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param topologyUuidNodeUuidNodeEdgePointUuid ID of topology_uuid_node_uuid_node_edge_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAggregatedNodeEdgePointAggregatedNodeEdgePointByIdCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String topologyUuidNodeUuidNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/aggregated-node-edge-point/{topology_uuid_node_uuid_node_edge_point_uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()))
            .replaceAll("\\{" + "topology_uuid_node_uuid_node_edge_point_uuid" + "\\}", apiClient.escapeString(topologyUuidNodeUuidNodeEdgePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAggregatedNodeEdgePointAggregatedNodeEdgePointByIdValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String topologyUuidNodeUuidNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAggregatedNodeEdgePointAggregatedNodeEdgePointById(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAggregatedNodeEdgePointAggregatedNodeEdgePointById(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAggregatedNodeEdgePointAggregatedNodeEdgePointById(Async)");
        }
        
        // verify the required parameter 'topologyUuidNodeUuidNodeEdgePointUuid' is set
        if (topologyUuidNodeUuidNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'topologyUuidNodeUuidNodeEdgePointUuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAggregatedNodeEdgePointAggregatedNodeEdgePointById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAggregatedNodeEdgePointAggregatedNodeEdgePointByIdCall(uuid, nodeUuid, ownedNodeEdgePointUuid, topologyUuidNodeUuidNodeEdgePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve aggregated-node-edge-point by ID
     * Retrieve operation of resource: aggregated-node-edge-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param topologyUuidNodeUuidNodeEdgePointUuid ID of topology_uuid_node_uuid_node_edge_point_uuid (required)
     * @return NodeEdgePointRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeEdgePointRef retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAggregatedNodeEdgePointAggregatedNodeEdgePointById(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String topologyUuidNodeUuidNodeEdgePointUuid) throws ApiException {
        ApiResponse<NodeEdgePointRef> resp = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAggregatedNodeEdgePointAggregatedNodeEdgePointByIdWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid, topologyUuidNodeUuidNodeEdgePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve aggregated-node-edge-point by ID
     * Retrieve operation of resource: aggregated-node-edge-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param topologyUuidNodeUuidNodeEdgePointUuid ID of topology_uuid_node_uuid_node_edge_point_uuid (required)
     * @return ApiResponse&lt;NodeEdgePointRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeEdgePointRef> retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAggregatedNodeEdgePointAggregatedNodeEdgePointByIdWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String topologyUuidNodeUuidNodeEdgePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAggregatedNodeEdgePointAggregatedNodeEdgePointByIdValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, topologyUuidNodeUuidNodeEdgePointUuid, null, null);
        Type localVarReturnType = new TypeToken<NodeEdgePointRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve aggregated-node-edge-point by ID (asynchronously)
     * Retrieve operation of resource: aggregated-node-edge-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param topologyUuidNodeUuidNodeEdgePointUuid ID of topology_uuid_node_uuid_node_edge_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAggregatedNodeEdgePointAggregatedNodeEdgePointByIdAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String topologyUuidNodeUuidNodeEdgePointUuid, final ApiCallback<NodeEdgePointRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAggregatedNodeEdgePointAggregatedNodeEdgePointByIdValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, topologyUuidNodeUuidNodeEdgePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeEdgePointRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityAvailableCapacity
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityAvailableCapacityCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/available-capacity/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityAvailableCapacityValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityAvailableCapacity(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityAvailableCapacity(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityAvailableCapacity(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityAvailableCapacityCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve available-capacity
     * Retrieve operation of resource: available-capacity
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return Capacity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Capacity retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityAvailableCapacity(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        ApiResponse<Capacity> resp = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityAvailableCapacityWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve available-capacity
     * Retrieve operation of resource: available-capacity
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return ApiResponse&lt;Capacity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Capacity> retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityAvailableCapacityWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityAvailableCapacityValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, null, null);
        Type localVarReturnType = new TypeToken<Capacity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve available-capacity (asynchronously)
     * Retrieve operation of resource: available-capacity
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityAvailableCapacityAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ApiCallback<Capacity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityAvailableCapacityValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Capacity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileBandwidthProfile
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileBandwidthProfileCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/available-capacity/bandwidth-profile/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileBandwidthProfileCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve bandwidth-profile
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return BandwidthProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BandwidthProfile retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileBandwidthProfile(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        ApiResponse<BandwidthProfile> resp = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileBandwidthProfileWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve bandwidth-profile
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return ApiResponse&lt;BandwidthProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BandwidthProfile> retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileBandwidthProfileWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, null, null);
        Type localVarReturnType = new TypeToken<BandwidthProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve bandwidth-profile (asynchronously)
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileBandwidthProfileAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ApiCallback<BandwidthProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BandwidthProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/available-capacity/bandwidth-profile/committed-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve committed-burst-size
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve committed-burst-size
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve committed-burst-size (asynchronously)
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/available-capacity/bandwidth-profile/committed-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve committed-information-rate
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve committed-information-rate
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve committed-information-rate (asynchronously)
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/available-capacity/bandwidth-profile/peak-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve peak-burst-size
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve peak-burst-size
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve peak-burst-size (asynchronously)
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/available-capacity/bandwidth-profile/peak-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve peak-information-rate
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve peak-information-rate
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve peak-information-rate (asynchronously)
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityTotalSizeTotalSize
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityTotalSizeTotalSizeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/available-capacity/total-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityTotalSizeTotalSizeValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityTotalSizeTotalSize(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityTotalSizeTotalSize(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityTotalSizeTotalSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityTotalSizeTotalSizeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve total-size
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityTotalSizeTotalSize(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityTotalSizeTotalSizeWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve total-size
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityTotalSizeTotalSizeWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityTotalSizeTotalSizeValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve total-size (asynchronously)
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityTotalSizeTotalSizeAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityTotalSizeTotalSizeValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListCepList
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListCepListCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/cep-list/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListCepListValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListCepList(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListCepList(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListCepList(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListCepListCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve cep-list
     * Retrieve operation of resource: cep-list
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return CepList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CepList retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListCepList(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        ApiResponse<CepList> resp = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListCepListWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve cep-list
     * Retrieve operation of resource: cep-list
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return ApiResponse&lt;CepList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CepList> retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListCepListWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListCepListValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, null, null);
        Type localVarReturnType = new TypeToken<CepList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve cep-list (asynchronously)
     * Retrieve operation of resource: cep-list
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListCepListAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ApiCallback<CepList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListCepListValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CepList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPoint
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/cep-list/connection-end-point/{connection_end_point_uuid}/aggregated-connection-end-point/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPoint(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPoint(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPoint(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPoint(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointCall(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve aggregated-connection-end-point
     * Retrieve operation of resource: aggregated-connection-end-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPoint(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid);
        return resp.getData();
    }

    /**
     * Retrieve aggregated-connection-end-point
     * Retrieve operation of resource: aggregated-connection-end-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve aggregated-connection-end-point (asynchronously)
     * Retrieve operation of resource: aggregated-connection-end-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointById
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid ID of topology_uuid_node_uuid_node_edge_point_uuid_connection_end_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointByIdCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, String topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/cep-list/connection-end-point/{connection_end_point_uuid}/aggregated-connection-end-point/{topology_uuid_node_uuid_node_edge_point_uuid_connection_end_point_uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()))
            .replaceAll("\\{" + "topology_uuid_node_uuid_node_edge_point_uuid_connection_end_point_uuid" + "\\}", apiClient.escapeString(topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointByIdValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, String topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointById(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointById(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointById(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointById(Async)");
        }
        
        // verify the required parameter 'topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid' is set
        if (topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointByIdCall(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve aggregated-connection-end-point by ID
     * Retrieve operation of resource: aggregated-connection-end-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid ID of topology_uuid_node_uuid_node_edge_point_uuid_connection_end_point_uuid (required)
     * @return ConnectionEndPointRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConnectionEndPointRef retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointById(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, String topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid) throws ApiException {
        ApiResponse<ConnectionEndPointRef> resp = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointByIdWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid);
        return resp.getData();
    }

    /**
     * Retrieve aggregated-connection-end-point by ID
     * Retrieve operation of resource: aggregated-connection-end-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid ID of topology_uuid_node_uuid_node_edge_point_uuid_connection_end_point_uuid (required)
     * @return ApiResponse&lt;ConnectionEndPointRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConnectionEndPointRef> retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointByIdWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, String topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointByIdValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid, null, null);
        Type localVarReturnType = new TypeToken<ConnectionEndPointRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve aggregated-connection-end-point by ID (asynchronously)
     * Retrieve operation of resource: aggregated-connection-end-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid ID of topology_uuid_node_uuid_node_edge_point_uuid_connection_end_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointByIdAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, String topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid, final ApiCallback<ConnectionEndPointRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointByIdValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConnectionEndPointRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpec
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/cep-list/connection-end-point/{connection_end_point_uuid}/arof-connection-end-point-spec/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpec(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpec(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpec(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpec(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecCall(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve arof-connection-end-point-spec
     * Retrieve operation of resource: arof-connection-end-point-spec
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return ArofConnectionEndPointSpec
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ArofConnectionEndPointSpec retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpec(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid) throws ApiException {
        ApiResponse<ArofConnectionEndPointSpec> resp = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid);
        return resp.getData();
    }

    /**
     * Retrieve arof-connection-end-point-spec
     * Retrieve operation of resource: arof-connection-end-point-spec
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return ApiResponse&lt;ArofConnectionEndPointSpec&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ArofConnectionEndPointSpec> retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, null, null);
        Type localVarReturnType = new TypeToken<ArofConnectionEndPointSpec>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve arof-connection-end-point-spec (asynchronously)
     * Retrieve operation of resource: arof-connection-end-point-spec
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, final ApiCallback<ArofConnectionEndPointSpec> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ArofConnectionEndPointSpec>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointArofConnectionEndPointSpecMediaChannelMediaChannel
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointArofConnectionEndPointSpecMediaChannelMediaChannelCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/cep-list/connection-end-point/{connection_end_point_uuid}/arof-connection-end-point-spec/media-channel/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointArofConnectionEndPointSpecMediaChannelMediaChannelValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointArofConnectionEndPointSpecMediaChannelMediaChannel(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointArofConnectionEndPointSpecMediaChannelMediaChannel(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointArofConnectionEndPointSpecMediaChannelMediaChannel(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointArofConnectionEndPointSpecMediaChannelMediaChannel(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointArofConnectionEndPointSpecMediaChannelMediaChannelCall(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve media-channel
     * Retrieve operation of resource: media-channel
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return ArofPropertiesPac
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ArofPropertiesPac retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointArofConnectionEndPointSpecMediaChannelMediaChannel(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid) throws ApiException {
        ApiResponse<ArofPropertiesPac> resp = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointArofConnectionEndPointSpecMediaChannelMediaChannelWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid);
        return resp.getData();
    }

    /**
     * Retrieve media-channel
     * Retrieve operation of resource: media-channel
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return ApiResponse&lt;ArofPropertiesPac&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ArofPropertiesPac> retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointArofConnectionEndPointSpecMediaChannelMediaChannelWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointArofConnectionEndPointSpecMediaChannelMediaChannelValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, null, null);
        Type localVarReturnType = new TypeToken<ArofPropertiesPac>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve media-channel (asynchronously)
     * Retrieve operation of resource: media-channel
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointArofConnectionEndPointSpecMediaChannelMediaChannelAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, final ApiCallback<ArofPropertiesPac> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointArofConnectionEndPointSpecMediaChannelMediaChannelValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ArofPropertiesPac>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumFrequencyConstraintFrequencyConstraint
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumFrequencyConstraintFrequencyConstraintCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/cep-list/connection-end-point/{connection_end_point_uuid}/arof-connection-end-point-spec/media-channel/occupied-spectrum/frequency-constraint/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumFrequencyConstraintFrequencyConstraintValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumFrequencyConstraintFrequencyConstraint(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumFrequencyConstraintFrequencyConstraint(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumFrequencyConstraintFrequencyConstraint(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumFrequencyConstraintFrequencyConstraint(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumFrequencyConstraintFrequencyConstraintCall(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve frequency-constraint
     * Retrieve operation of resource: frequency-constraint
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return FrequencyConstraint
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FrequencyConstraint retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumFrequencyConstraintFrequencyConstraint(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid) throws ApiException {
        ApiResponse<FrequencyConstraint> resp = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumFrequencyConstraintFrequencyConstraintWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid);
        return resp.getData();
    }

    /**
     * Retrieve frequency-constraint
     * Retrieve operation of resource: frequency-constraint
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return ApiResponse&lt;FrequencyConstraint&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FrequencyConstraint> retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumFrequencyConstraintFrequencyConstraintWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumFrequencyConstraintFrequencyConstraintValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, null, null);
        Type localVarReturnType = new TypeToken<FrequencyConstraint>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve frequency-constraint (asynchronously)
     * Retrieve operation of resource: frequency-constraint
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumFrequencyConstraintFrequencyConstraintAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, final ApiCallback<FrequencyConstraint> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumFrequencyConstraintFrequencyConstraintValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FrequencyConstraint>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumOccupiedSpectrum
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumOccupiedSpectrumCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/cep-list/connection-end-point/{connection_end_point_uuid}/arof-connection-end-point-spec/media-channel/occupied-spectrum/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumOccupiedSpectrumValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumOccupiedSpectrum(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumOccupiedSpectrum(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumOccupiedSpectrum(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumOccupiedSpectrum(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumOccupiedSpectrumCall(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve occupied-spectrum
     * Retrieve operation of resource: occupied-spectrum
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return SpectrumBand
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SpectrumBand retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumOccupiedSpectrum(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid) throws ApiException {
        ApiResponse<SpectrumBand> resp = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumOccupiedSpectrumWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid);
        return resp.getData();
    }

    /**
     * Retrieve occupied-spectrum
     * Retrieve operation of resource: occupied-spectrum
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return ApiResponse&lt;SpectrumBand&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SpectrumBand> retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumOccupiedSpectrumWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumOccupiedSpectrumValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, null, null);
        Type localVarReturnType = new TypeToken<SpectrumBand>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve occupied-spectrum (asynchronously)
     * Retrieve operation of resource: occupied-spectrum
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumOccupiedSpectrumAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, final ApiCallback<SpectrumBand> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointArofConnectionEndPointSpecMediaChannelOccupiedSpectrumOccupiedSpectrumValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpectrumBand>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointClientNodeEdgePointClientNodeEdgePoint
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointClientNodeEdgePointClientNodeEdgePointCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/cep-list/connection-end-point/{connection_end_point_uuid}/client-node-edge-point/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointClientNodeEdgePointClientNodeEdgePointValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointClientNodeEdgePointClientNodeEdgePoint(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointClientNodeEdgePointClientNodeEdgePoint(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointClientNodeEdgePointClientNodeEdgePoint(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointClientNodeEdgePointClientNodeEdgePoint(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointClientNodeEdgePointClientNodeEdgePointCall(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve client-node-edge-point
     * Retrieve operation of resource: client-node-edge-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointClientNodeEdgePointClientNodeEdgePoint(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointClientNodeEdgePointClientNodeEdgePointWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid);
        return resp.getData();
    }

    /**
     * Retrieve client-node-edge-point
     * Retrieve operation of resource: client-node-edge-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointClientNodeEdgePointClientNodeEdgePointWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointClientNodeEdgePointClientNodeEdgePointValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve client-node-edge-point (asynchronously)
     * Retrieve operation of resource: client-node-edge-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointClientNodeEdgePointClientNodeEdgePointAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointClientNodeEdgePointClientNodeEdgePointValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointClientNodeEdgePointClientNodeEdgePointById
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param topologyUuidNodeUuidNodeEdgePointUuid ID of topology_uuid_node_uuid_node_edge_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointClientNodeEdgePointClientNodeEdgePointByIdCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, String topologyUuidNodeUuidNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/cep-list/connection-end-point/{connection_end_point_uuid}/client-node-edge-point/{topology_uuid_node_uuid_node_edge_point_uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()))
            .replaceAll("\\{" + "topology_uuid_node_uuid_node_edge_point_uuid" + "\\}", apiClient.escapeString(topologyUuidNodeUuidNodeEdgePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointClientNodeEdgePointClientNodeEdgePointByIdValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, String topologyUuidNodeUuidNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointClientNodeEdgePointClientNodeEdgePointById(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointClientNodeEdgePointClientNodeEdgePointById(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointClientNodeEdgePointClientNodeEdgePointById(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointClientNodeEdgePointClientNodeEdgePointById(Async)");
        }
        
        // verify the required parameter 'topologyUuidNodeUuidNodeEdgePointUuid' is set
        if (topologyUuidNodeUuidNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'topologyUuidNodeUuidNodeEdgePointUuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointClientNodeEdgePointClientNodeEdgePointById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointClientNodeEdgePointClientNodeEdgePointByIdCall(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, topologyUuidNodeUuidNodeEdgePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve client-node-edge-point by ID
     * Retrieve operation of resource: client-node-edge-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param topologyUuidNodeUuidNodeEdgePointUuid ID of topology_uuid_node_uuid_node_edge_point_uuid (required)
     * @return NodeEdgePointRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeEdgePointRef retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointClientNodeEdgePointClientNodeEdgePointById(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, String topologyUuidNodeUuidNodeEdgePointUuid) throws ApiException {
        ApiResponse<NodeEdgePointRef> resp = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointClientNodeEdgePointClientNodeEdgePointByIdWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, topologyUuidNodeUuidNodeEdgePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve client-node-edge-point by ID
     * Retrieve operation of resource: client-node-edge-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param topologyUuidNodeUuidNodeEdgePointUuid ID of topology_uuid_node_uuid_node_edge_point_uuid (required)
     * @return ApiResponse&lt;NodeEdgePointRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeEdgePointRef> retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointClientNodeEdgePointClientNodeEdgePointByIdWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, String topologyUuidNodeUuidNodeEdgePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointClientNodeEdgePointClientNodeEdgePointByIdValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, topologyUuidNodeUuidNodeEdgePointUuid, null, null);
        Type localVarReturnType = new TypeToken<NodeEdgePointRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve client-node-edge-point by ID (asynchronously)
     * Retrieve operation of resource: client-node-edge-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param topologyUuidNodeUuidNodeEdgePointUuid ID of topology_uuid_node_uuid_node_edge_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointClientNodeEdgePointClientNodeEdgePointByIdAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, String topologyUuidNodeUuidNodeEdgePointUuid, final ApiCallback<NodeEdgePointRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointClientNodeEdgePointClientNodeEdgePointByIdValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, topologyUuidNodeUuidNodeEdgePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeEdgePointRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointConnectionEndPoint
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointConnectionEndPointCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/cep-list/connection-end-point/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointConnectionEndPointValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointConnectionEndPoint(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointConnectionEndPoint(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointConnectionEndPoint(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointConnectionEndPointCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve connection-end-point
     * Retrieve operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointConnectionEndPoint(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointConnectionEndPointWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve connection-end-point
     * Retrieve operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointConnectionEndPointWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointConnectionEndPointValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve connection-end-point (asynchronously)
     * Retrieve operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointConnectionEndPointAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointConnectionEndPointValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointConnectionEndPointById
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointConnectionEndPointByIdCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/cep-list/connection-end-point/{connection_end_point_uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointConnectionEndPointByIdValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointConnectionEndPointById(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointConnectionEndPointById(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointConnectionEndPointById(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointConnectionEndPointById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointConnectionEndPointByIdCall(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve connection-end-point by ID
     * Retrieve operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return ConnectionEndPointSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConnectionEndPointSchema retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointConnectionEndPointById(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid) throws ApiException {
        ApiResponse<ConnectionEndPointSchema> resp = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointConnectionEndPointByIdWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid);
        return resp.getData();
    }

    /**
     * Retrieve connection-end-point by ID
     * Retrieve operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return ApiResponse&lt;ConnectionEndPointSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConnectionEndPointSchema> retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointConnectionEndPointByIdWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointConnectionEndPointByIdValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, null, null);
        Type localVarReturnType = new TypeToken<ConnectionEndPointSchema>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve connection-end-point by ID (asynchronously)
     * Retrieve operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointConnectionEndPointByIdAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, final ApiCallback<ConnectionEndPointSchema> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointConnectionEndPointByIdValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConnectionEndPointSchema>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointNameName
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointNameNameCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/cep-list/connection-end-point/{connection_end_point_uuid}/name/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointNameNameValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointNameName(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointNameName(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointNameName(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointNameName(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointNameNameCall(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointNameName(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointNameNameWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid);
        return resp.getData();
    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointNameNameWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointNameNameValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointNameNameAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointNameNameValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointNameNameById
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointNameNameByIdCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/cep-list/connection-end-point/{connection_end_point_uuid}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointNameNameByIdValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointNameNameByIdCall(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, valueName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @return NameAndValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NameAndValue retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointNameNameById(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, String valueName) throws ApiException {
        ApiResponse<NameAndValue> resp = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointNameNameByIdWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, valueName);
        return resp.getData();
    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @return ApiResponse&lt;NameAndValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NameAndValue> retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointNameNameByIdWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, String valueName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointNameNameByIdValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, valueName, null, null);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name by ID (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointNameNameByIdAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, String valueName, final ApiCallback<NameAndValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointNameNameByIdValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, valueName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointParentNodeEdgePointParentNodeEdgePoint
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointParentNodeEdgePointParentNodeEdgePointCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/cep-list/connection-end-point/{connection_end_point_uuid}/parent-node-edge-point/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointParentNodeEdgePointParentNodeEdgePointValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointParentNodeEdgePointParentNodeEdgePoint(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointParentNodeEdgePointParentNodeEdgePoint(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointParentNodeEdgePointParentNodeEdgePoint(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointParentNodeEdgePointParentNodeEdgePoint(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointParentNodeEdgePointParentNodeEdgePointCall(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve parent-node-edge-point
     * Retrieve operation of resource: parent-node-edge-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return NodeEdgePointRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeEdgePointRef retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointParentNodeEdgePointParentNodeEdgePoint(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid) throws ApiException {
        ApiResponse<NodeEdgePointRef> resp = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointParentNodeEdgePointParentNodeEdgePointWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid);
        return resp.getData();
    }

    /**
     * Retrieve parent-node-edge-point
     * Retrieve operation of resource: parent-node-edge-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @return ApiResponse&lt;NodeEdgePointRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeEdgePointRef> retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointParentNodeEdgePointParentNodeEdgePointWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointParentNodeEdgePointParentNodeEdgePointValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, null, null);
        Type localVarReturnType = new TypeToken<NodeEdgePointRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve parent-node-edge-point (asynchronously)
     * Retrieve operation of resource: parent-node-edge-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointParentNodeEdgePointParentNodeEdgePointAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, final ApiCallback<NodeEdgePointRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointParentNodeEdgePointParentNodeEdgePointValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeEdgePointRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointMappedServiceInterfacePointMappedServiceInterfacePoint
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointMappedServiceInterfacePointMappedServiceInterfacePointCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/mapped-service-interface-point/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointMappedServiceInterfacePointMappedServiceInterfacePointValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointMappedServiceInterfacePointMappedServiceInterfacePoint(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointMappedServiceInterfacePointMappedServiceInterfacePoint(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointMappedServiceInterfacePointMappedServiceInterfacePoint(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointMappedServiceInterfacePointMappedServiceInterfacePointCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve mapped-service-interface-point
     * Retrieve operation of resource: mapped-service-interface-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointMappedServiceInterfacePointMappedServiceInterfacePoint(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointMappedServiceInterfacePointMappedServiceInterfacePointWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve mapped-service-interface-point
     * Retrieve operation of resource: mapped-service-interface-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointMappedServiceInterfacePointMappedServiceInterfacePointWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointMappedServiceInterfacePointMappedServiceInterfacePointValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve mapped-service-interface-point (asynchronously)
     * Retrieve operation of resource: mapped-service-interface-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointMappedServiceInterfacePointMappedServiceInterfacePointAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointMappedServiceInterfacePointMappedServiceInterfacePointValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointMappedServiceInterfacePointMappedServiceInterfacePointById
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointMappedServiceInterfacePointMappedServiceInterfacePointByIdCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String serviceInterfacePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/mapped-service-interface-point/{service_interface_point_uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()))
            .replaceAll("\\{" + "service_interface_point_uuid" + "\\}", apiClient.escapeString(serviceInterfacePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointMappedServiceInterfacePointMappedServiceInterfacePointByIdValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String serviceInterfacePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointMappedServiceInterfacePointMappedServiceInterfacePointById(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointMappedServiceInterfacePointMappedServiceInterfacePointById(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointMappedServiceInterfacePointMappedServiceInterfacePointById(Async)");
        }
        
        // verify the required parameter 'serviceInterfacePointUuid' is set
        if (serviceInterfacePointUuid == null) {
            throw new ApiException("Missing the required parameter 'serviceInterfacePointUuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointMappedServiceInterfacePointMappedServiceInterfacePointById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointMappedServiceInterfacePointMappedServiceInterfacePointByIdCall(uuid, nodeUuid, ownedNodeEdgePointUuid, serviceInterfacePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve mapped-service-interface-point by ID
     * Retrieve operation of resource: mapped-service-interface-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @return ServiceInterfacePointRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ServiceInterfacePointRef retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointMappedServiceInterfacePointMappedServiceInterfacePointById(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String serviceInterfacePointUuid) throws ApiException {
        ApiResponse<ServiceInterfacePointRef> resp = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointMappedServiceInterfacePointMappedServiceInterfacePointByIdWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid, serviceInterfacePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve mapped-service-interface-point by ID
     * Retrieve operation of resource: mapped-service-interface-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @return ApiResponse&lt;ServiceInterfacePointRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ServiceInterfacePointRef> retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointMappedServiceInterfacePointMappedServiceInterfacePointByIdWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String serviceInterfacePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointMappedServiceInterfacePointMappedServiceInterfacePointByIdValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, serviceInterfacePointUuid, null, null);
        Type localVarReturnType = new TypeToken<ServiceInterfacePointRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve mapped-service-interface-point by ID (asynchronously)
     * Retrieve operation of resource: mapped-service-interface-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param serviceInterfacePointUuid ID of service_interface_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointMappedServiceInterfacePointMappedServiceInterfacePointByIdAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String serviceInterfacePointUuid, final ApiCallback<ServiceInterfacePointRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointMappedServiceInterfacePointMappedServiceInterfacePointByIdValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, serviceInterfacePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ServiceInterfacePointRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointNameName
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointNameNameCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/name/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointNameNameValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointNameName(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointNameName(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointNameName(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointNameNameCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointNameName(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointNameNameWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointNameNameWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointNameNameValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointNameNameAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointNameNameValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointNameNameById
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointNameNameByIdCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointNameNameByIdValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointNameNameById(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointNameNameById(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointNameNameByIdCall(uuid, nodeUuid, ownedNodeEdgePointUuid, valueName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @return NameAndValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NameAndValue retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointNameNameById(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String valueName) throws ApiException {
        ApiResponse<NameAndValue> resp = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointNameNameByIdWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid, valueName);
        return resp.getData();
    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @return ApiResponse&lt;NameAndValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NameAndValue> retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointNameNameByIdWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String valueName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointNameNameByIdValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, valueName, null, null);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name by ID (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointNameNameByIdAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String valueName, final ApiCallback<NameAndValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointNameNameByIdValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, valueName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointOwnedNodeEdgePoint
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointOwnedNodeEdgePointCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointOwnedNodeEdgePointValidateBeforeCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointOwnedNodeEdgePoint(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointOwnedNodeEdgePoint(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointOwnedNodeEdgePointCall(uuid, nodeUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve owned-node-edge-point
     * Retrieve operation of resource: owned-node-edge-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointOwnedNodeEdgePoint(String uuid, String nodeUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointOwnedNodeEdgePointWithHttpInfo(uuid, nodeUuid);
        return resp.getData();
    }

    /**
     * Retrieve owned-node-edge-point
     * Retrieve operation of resource: owned-node-edge-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointOwnedNodeEdgePointWithHttpInfo(String uuid, String nodeUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointOwnedNodeEdgePointValidateBeforeCall(uuid, nodeUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve owned-node-edge-point (asynchronously)
     * Retrieve operation of resource: owned-node-edge-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointOwnedNodeEdgePointAsync(String uuid, String nodeUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointOwnedNodeEdgePointValidateBeforeCall(uuid, nodeUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointOwnedNodeEdgePointById
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointOwnedNodeEdgePointByIdCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointOwnedNodeEdgePointByIdValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointOwnedNodeEdgePointById(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointOwnedNodeEdgePointById(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointOwnedNodeEdgePointById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointOwnedNodeEdgePointByIdCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve owned-node-edge-point by ID
     * Retrieve operation of resource: owned-node-edge-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return OwnedNodeEdgePointSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OwnedNodeEdgePointSchema retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointOwnedNodeEdgePointById(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        ApiResponse<OwnedNodeEdgePointSchema> resp = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointOwnedNodeEdgePointByIdWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve owned-node-edge-point by ID
     * Retrieve operation of resource: owned-node-edge-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return ApiResponse&lt;OwnedNodeEdgePointSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OwnedNodeEdgePointSchema> retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointOwnedNodeEdgePointByIdWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointOwnedNodeEdgePointByIdValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, null, null);
        Type localVarReturnType = new TypeToken<OwnedNodeEdgePointSchema>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve owned-node-edge-point by ID (asynchronously)
     * Retrieve operation of resource: owned-node-edge-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointOwnedNodeEdgePointByIdAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ApiCallback<OwnedNodeEdgePointSchema> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointOwnedNodeEdgePointByIdValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OwnedNodeEdgePointSchema>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileBandwidthProfile
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileBandwidthProfileCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/total-potential-capacity/bandwidth-profile/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileBandwidthProfileCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve bandwidth-profile
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return BandwidthProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BandwidthProfile retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileBandwidthProfile(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        ApiResponse<BandwidthProfile> resp = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileBandwidthProfileWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve bandwidth-profile
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return ApiResponse&lt;BandwidthProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BandwidthProfile> retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileBandwidthProfileWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, null, null);
        Type localVarReturnType = new TypeToken<BandwidthProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve bandwidth-profile (asynchronously)
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileBandwidthProfileAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ApiCallback<BandwidthProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BandwidthProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/total-potential-capacity/bandwidth-profile/committed-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve committed-burst-size
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve committed-burst-size
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve committed-burst-size (asynchronously)
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/total-potential-capacity/bandwidth-profile/committed-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve committed-information-rate
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve committed-information-rate
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve committed-information-rate (asynchronously)
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/total-potential-capacity/bandwidth-profile/peak-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve peak-burst-size
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve peak-burst-size
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve peak-burst-size (asynchronously)
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/total-potential-capacity/bandwidth-profile/peak-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve peak-information-rate
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve peak-information-rate
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve peak-information-rate (asynchronously)
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityTotalPotentialCapacity
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityTotalPotentialCapacityCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/total-potential-capacity/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityTotalPotentialCapacityValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityTotalPotentialCapacity(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityTotalPotentialCapacity(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityTotalPotentialCapacity(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityTotalPotentialCapacityCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve total-potential-capacity
     * Retrieve operation of resource: total-potential-capacity
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return Capacity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Capacity retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityTotalPotentialCapacity(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        ApiResponse<Capacity> resp = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityTotalPotentialCapacityWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve total-potential-capacity
     * Retrieve operation of resource: total-potential-capacity
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return ApiResponse&lt;Capacity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Capacity> retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityTotalPotentialCapacityWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityTotalPotentialCapacityValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, null, null);
        Type localVarReturnType = new TypeToken<Capacity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve total-potential-capacity (asynchronously)
     * Retrieve operation of resource: total-potential-capacity
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityTotalPotentialCapacityAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ApiCallback<Capacity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityTotalPotentialCapacityValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Capacity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityTotalSizeTotalSize
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityTotalSizeTotalSizeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/total-potential-capacity/total-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityTotalSizeTotalSizeValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityTotalSizeTotalSize(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityTotalSizeTotalSize(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityTotalSizeTotalSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityTotalSizeTotalSizeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve total-size
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityTotalSizeTotalSize(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityTotalSizeTotalSizeWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid);
        return resp.getData();
    }

    /**
     * Retrieve total-size
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityTotalSizeTotalSizeWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityTotalSizeTotalSizeValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve total-size (asynchronously)
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityTotalSizeTotalSizeAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityTotalSizeTotalSizeValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityBandwidthProfileBandwidthProfile
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityBandwidthProfileBandwidthProfileCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/total-potential-capacity/bandwidth-profile/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityBandwidthProfileBandwidthProfileCall(uuid, nodeUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve bandwidth-profile
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return BandwidthProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BandwidthProfile retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityBandwidthProfileBandwidthProfile(String uuid, String nodeUuid) throws ApiException {
        ApiResponse<BandwidthProfile> resp = retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityBandwidthProfileBandwidthProfileWithHttpInfo(uuid, nodeUuid);
        return resp.getData();
    }

    /**
     * Retrieve bandwidth-profile
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return ApiResponse&lt;BandwidthProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BandwidthProfile> retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityBandwidthProfileBandwidthProfileWithHttpInfo(String uuid, String nodeUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(uuid, nodeUuid, null, null);
        Type localVarReturnType = new TypeToken<BandwidthProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve bandwidth-profile (asynchronously)
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityBandwidthProfileBandwidthProfileAsync(String uuid, String nodeUuid, final ApiCallback<BandwidthProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityBandwidthProfileBandwidthProfileValidateBeforeCall(uuid, nodeUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BandwidthProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/total-potential-capacity/bandwidth-profile/committed-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeCall(uuid, nodeUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve committed-burst-size
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(String uuid, String nodeUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeWithHttpInfo(uuid, nodeUuid);
        return resp.getData();
    }

    /**
     * Retrieve committed-burst-size
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeWithHttpInfo(String uuid, String nodeUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(uuid, nodeUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve committed-burst-size (asynchronously)
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeAsync(String uuid, String nodeUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeValidateBeforeCall(uuid, nodeUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/total-potential-capacity/bandwidth-profile/committed-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateCall(uuid, nodeUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve committed-information-rate
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(String uuid, String nodeUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateWithHttpInfo(uuid, nodeUuid);
        return resp.getData();
    }

    /**
     * Retrieve committed-information-rate
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateWithHttpInfo(String uuid, String nodeUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(uuid, nodeUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve committed-information-rate (asynchronously)
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateAsync(String uuid, String nodeUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateValidateBeforeCall(uuid, nodeUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/total-potential-capacity/bandwidth-profile/peak-burst-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeCall(uuid, nodeUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve peak-burst-size
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize(String uuid, String nodeUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeWithHttpInfo(uuid, nodeUuid);
        return resp.getData();
    }

    /**
     * Retrieve peak-burst-size
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeWithHttpInfo(String uuid, String nodeUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(uuid, nodeUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve peak-burst-size (asynchronously)
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeAsync(String uuid, String nodeUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeValidateBeforeCall(uuid, nodeUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/total-potential-capacity/bandwidth-profile/peak-information-rate/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateCall(uuid, nodeUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve peak-information-rate
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate(String uuid, String nodeUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateWithHttpInfo(uuid, nodeUuid);
        return resp.getData();
    }

    /**
     * Retrieve peak-information-rate
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateWithHttpInfo(String uuid, String nodeUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(uuid, nodeUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve peak-information-rate (asynchronously)
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateAsync(String uuid, String nodeUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateValidateBeforeCall(uuid, nodeUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityTotalPotentialCapacity
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityTotalPotentialCapacityCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/total-potential-capacity/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityTotalPotentialCapacityValidateBeforeCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityTotalPotentialCapacity(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityTotalPotentialCapacity(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityTotalPotentialCapacityCall(uuid, nodeUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve total-potential-capacity
     * Retrieve operation of resource: total-potential-capacity
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return Capacity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Capacity retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityTotalPotentialCapacity(String uuid, String nodeUuid) throws ApiException {
        ApiResponse<Capacity> resp = retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityTotalPotentialCapacityWithHttpInfo(uuid, nodeUuid);
        return resp.getData();
    }

    /**
     * Retrieve total-potential-capacity
     * Retrieve operation of resource: total-potential-capacity
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return ApiResponse&lt;Capacity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Capacity> retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityTotalPotentialCapacityWithHttpInfo(String uuid, String nodeUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityTotalPotentialCapacityValidateBeforeCall(uuid, nodeUuid, null, null);
        Type localVarReturnType = new TypeToken<Capacity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve total-potential-capacity (asynchronously)
     * Retrieve operation of resource: total-potential-capacity
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityTotalPotentialCapacityAsync(String uuid, String nodeUuid, final ApiCallback<Capacity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityTotalPotentialCapacityValidateBeforeCall(uuid, nodeUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Capacity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityTotalSizeTotalSize
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityTotalSizeTotalSizeCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/total-potential-capacity/total-size/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityTotalSizeTotalSizeValidateBeforeCall(String uuid, String nodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityTotalSizeTotalSize(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityTotalSizeTotalSize(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityTotalSizeTotalSizeCall(uuid, nodeUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve total-size
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityTotalSizeTotalSize(String uuid, String nodeUuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityTotalSizeTotalSizeWithHttpInfo(uuid, nodeUuid);
        return resp.getData();
    }

    /**
     * Retrieve total-size
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityTotalSizeTotalSizeWithHttpInfo(String uuid, String nodeUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityTotalSizeTotalSizeValidateBeforeCall(uuid, nodeUuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve total-size (asynchronously)
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityTotalSizeTotalSizeAsync(String uuid, String nodeUuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityTotalSizeTotalSizeValidateBeforeCall(uuid, nodeUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyTopology
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyTopologyCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyTopologyValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyTopologyCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve topology
     * Retrieve operation of resource: topology
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextTopologyContextTopologyTopology() throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextTopologyContextTopologyTopologyWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieve topology
     * Retrieve operation of resource: topology
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextTopologyContextTopologyTopologyWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyTopologyValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve topology (asynchronously)
     * Retrieve operation of resource: topology
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyTopologyAsync(final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyTopologyValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveContextTopologyContextTopologyTopologyById
     * @param uuid ID of uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyTopologyByIdCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveContextTopologyContextTopologyTopologyByIdValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextTopologyContextTopologyTopologyById(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyTopologyByIdCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve topology by ID
     * Retrieve operation of resource: topology
     * @param uuid ID of uuid (required)
     * @return Topology
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Topology retrieveContextTopologyContextTopologyTopologyById(String uuid) throws ApiException {
        ApiResponse<Topology> resp = retrieveContextTopologyContextTopologyTopologyByIdWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve topology by ID
     * Retrieve operation of resource: topology
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;Topology&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Topology> retrieveContextTopologyContextTopologyTopologyByIdWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyTopologyByIdValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<Topology>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve topology by ID (asynchronously)
     * Retrieve operation of resource: topology
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextTopologyContextTopologyTopologyByIdAsync(String uuid, final ApiCallback<Topology> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextTopologyContextTopologyTopologyByIdValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Topology>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateContextTopologyContextTopologyContextById
     * @param topologyContext topology-contextbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextTopologyContextTopologyContextByIdCall(TopologyContext topologyContext, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = topologyContext;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextTopologyContextTopologyContextByIdValidateBeforeCall(TopologyContext topologyContext, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'topologyContext' is set
        if (topologyContext == null) {
            throw new ApiException("Missing the required parameter 'topologyContext' when calling updateContextTopologyContextTopologyContextById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextTopologyContextTopologyContextByIdCall(topologyContext, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update topology-context by ID
     * Update operation of resource: topology-context
     * @param topologyContext topology-contextbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextTopologyContextTopologyContextById(TopologyContext topologyContext) throws ApiException {
        updateContextTopologyContextTopologyContextByIdWithHttpInfo(topologyContext);
    }

    /**
     * Update topology-context by ID
     * Update operation of resource: topology-context
     * @param topologyContext topology-contextbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextTopologyContextTopologyContextByIdWithHttpInfo(TopologyContext topologyContext) throws ApiException {
        com.squareup.okhttp.Call call = updateContextTopologyContextTopologyContextByIdValidateBeforeCall(topologyContext, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update topology-context by ID (asynchronously)
     * Update operation of resource: topology-context
     * @param topologyContext topology-contextbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextTopologyContextTopologyContextByIdAsync(TopologyContext topologyContext, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextTopologyContextTopologyContextByIdValidateBeforeCall(topologyContext, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecById
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param arofConnectionEndPointSpec arof-connection-end-point-specbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, ArofConnectionEndPointSpec arofConnectionEndPointSpec, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = arofConnectionEndPointSpec;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/cep-list/connection-end-point/{connection_end_point_uuid}/arof-connection-end-point-spec/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, ArofConnectionEndPointSpec arofConnectionEndPointSpec, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecById(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling updateContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecById(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling updateContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecById(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling updateContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecById(Async)");
        }
        
        // verify the required parameter 'arofConnectionEndPointSpec' is set
        if (arofConnectionEndPointSpec == null) {
            throw new ApiException("Missing the required parameter 'arofConnectionEndPointSpec' when calling updateContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdCall(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, arofConnectionEndPointSpec, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update arof-connection-end-point-spec by ID
     * Update operation of resource: arof-connection-end-point-spec
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param arofConnectionEndPointSpec arof-connection-end-point-specbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecById(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, ArofConnectionEndPointSpec arofConnectionEndPointSpec) throws ApiException {
        updateContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, arofConnectionEndPointSpec);
    }

    /**
     * Update arof-connection-end-point-spec by ID
     * Update operation of resource: arof-connection-end-point-spec
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param arofConnectionEndPointSpec arof-connection-end-point-specbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, ArofConnectionEndPointSpec arofConnectionEndPointSpec) throws ApiException {
        com.squareup.okhttp.Call call = updateContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, arofConnectionEndPointSpec, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update arof-connection-end-point-spec by ID (asynchronously)
     * Update operation of resource: arof-connection-end-point-spec
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param arofConnectionEndPointSpec arof-connection-end-point-specbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, ArofConnectionEndPointSpec arofConnectionEndPointSpec, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointArofConnectionEndPointSpecArofConnectionEndPointSpecByIdValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, arofConnectionEndPointSpec, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointConnectionEndPointById
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param connectionEndPoint connection-end-pointbody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointConnectionEndPointByIdCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, ConnectionEndPointSchema connectionEndPoint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = connectionEndPoint;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/cep-list/connection-end-point/{connection_end_point_uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointConnectionEndPointByIdValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, ConnectionEndPointSchema connectionEndPoint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointConnectionEndPointById(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling updateContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointConnectionEndPointById(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling updateContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointConnectionEndPointById(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling updateContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointConnectionEndPointById(Async)");
        }
        
        // verify the required parameter 'connectionEndPoint' is set
        if (connectionEndPoint == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPoint' when calling updateContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointConnectionEndPointById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointConnectionEndPointByIdCall(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, connectionEndPoint, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update connection-end-point by ID
     * Update operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param connectionEndPoint connection-end-pointbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointConnectionEndPointById(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, ConnectionEndPointSchema connectionEndPoint) throws ApiException {
        updateContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointConnectionEndPointByIdWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, connectionEndPoint);
    }

    /**
     * Update connection-end-point by ID
     * Update operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param connectionEndPoint connection-end-pointbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointConnectionEndPointByIdWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, ConnectionEndPointSchema connectionEndPoint) throws ApiException {
        com.squareup.okhttp.Call call = updateContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointConnectionEndPointByIdValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, connectionEndPoint, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update connection-end-point by ID (asynchronously)
     * Update operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param connectionEndPoint connection-end-pointbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointConnectionEndPointByIdAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, ConnectionEndPointSchema connectionEndPoint, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointConnectionEndPointByIdValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, connectionEndPoint, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointNameNameById
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointNameNameByIdCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = name;

        // create path and map variables
        String localVarPath = "/config/context/topology-context/topology/{uuid}/node/{node_uuid}/owned-node-edge-point/{owned_node_edge_point_uuid}/cep-list/connection-end-point/{connection_end_point_uuid}/name/{value_name}/"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "node_uuid" + "\\}", apiClient.escapeString(nodeUuid.toString()))
            .replaceAll("\\{" + "owned_node_edge_point_uuid" + "\\}", apiClient.escapeString(ownedNodeEdgePointUuid.toString()))
            .replaceAll("\\{" + "connection_end_point_uuid" + "\\}", apiClient.escapeString(connectionEndPointUuid.toString()))
            .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointNameNameByIdValidateBeforeCall(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'nodeUuid' is set
        if (nodeUuid == null) {
            throw new ApiException("Missing the required parameter 'nodeUuid' when calling updateContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'ownedNodeEdgePointUuid' is set
        if (ownedNodeEdgePointUuid == null) {
            throw new ApiException("Missing the required parameter 'ownedNodeEdgePointUuid' when calling updateContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'connectionEndPointUuid' is set
        if (connectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionEndPointUuid' when calling updateContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling updateContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling updateContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointNameNameById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointNameNameByIdCall(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, valueName, name, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update name by ID
     * Update operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointNameNameById(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, String valueName, NameAndValue name) throws ApiException {
        updateContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointNameNameByIdWithHttpInfo(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, valueName, name);
    }

    /**
     * Update name by ID
     * Update operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointNameNameByIdWithHttpInfo(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, String valueName, NameAndValue name) throws ApiException {
        com.squareup.okhttp.Call call = updateContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointNameNameByIdValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, valueName, name, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update name by ID (asynchronously)
     * Update operation of resource: name
     * @param uuid ID of uuid (required)
     * @param nodeUuid ID of node_uuid (required)
     * @param ownedNodeEdgePointUuid ID of owned_node_edge_point_uuid (required)
     * @param connectionEndPointUuid ID of connection_end_point_uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointNameNameByIdAsync(String uuid, String nodeUuid, String ownedNodeEdgePointUuid, String connectionEndPointUuid, String valueName, NameAndValue name, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointNameNameByIdValidateBeforeCall(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, valueName, name, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
