/*
 * tapi-arof API
 * tapi-arof API generated from tapi-arof.yang
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.AdminStatePac;
import io.swagger.client.model.Capacity;
import io.swagger.client.model.ConnectionRef;
import io.swagger.client.model.ConnectivityConstraint;
import io.swagger.client.model.ConnectivityServiceEndPoint;
import io.swagger.client.model.ConnectivityServiceRef;
import io.swagger.client.model.NameAndValue;
import io.swagger.client.model.ResilienceConstraint;
import io.swagger.client.model.ResilienceType;
import io.swagger.client.model.RoutingConstraint;
import io.swagger.client.model.ServiceSpec;
import io.swagger.client.model.TimeRange;
import io.swagger.client.model.TopologyConstraint;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * The ForwardingConstruct (FC) object class models enabled potential for forwarding between two or more LTPs and like the LTP supports any transport protocol including all circuit and packet forms. At the lowest level of recursion, a FC represents a cross-connection within an NE.
 */
@ApiModel(description = "The ForwardingConstruct (FC) object class models enabled potential for forwarding between two or more LTPs and like the LTP supports any transport protocol including all circuit and packet forms. At the lowest level of recursion, a FC represents a cross-connection within an NE.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-07-09T14:13:03.153+02:00")
public class ConnectivityService {
	@SerializedName("uuid")
	private String uuid = null;

	//TODO: Added
	@SerializedName("connectivity-constraint")
	private ConnectivityConstraint connectivityConstraint = null;

	//TODO: Added
	@SerializedName("routing-constraint")
	private RoutingConstraint routingConstraint = null;

	//TODO: Added
	@SerializedName("topology-constraint")
	private TopologyConstraint topologyConstraint = null;


	@SerializedName("name")
	private List<NameAndValue> name = null;

	/**
	 * @return the connectivityConstraint
	 */
	public ConnectivityConstraint getConnectivityConstraint() {
		return connectivityConstraint;
	}

	/**
	 * @param connectivityConstraint the connectivityConstraint to set
	 */
	public void setConnectivityConstraint(ConnectivityConstraint connectivityConstraint) {
		this.connectivityConstraint = connectivityConstraint;
	}

	/**
	 * @return the routingConstraint
	 */
	public RoutingConstraint getRoutingConstraint() {
		return routingConstraint;
	}

	/**
	 * @param routingConstraint the routingConstraint to set
	 */
	public void setRoutingConstraint(RoutingConstraint routingConstraint) {
		this.routingConstraint = routingConstraint;
	}

	/**
	 * @return the topologyConstraint
	 */
	public TopologyConstraint getTopologyConstraint() {
		return topologyConstraint;
	}

	/**
	 * @param topologyConstraint the topologyConstraint to set
	 */
	public void setTopologyConstraint(TopologyConstraint topologyConstraint) {
		this.topologyConstraint = topologyConstraint;
	}

	/**
	 * Gets or Sets serviceType
	 */
	@JsonAdapter(ServiceTypeEnum.Adapter.class)
	public enum ServiceTypeEnum {
		POINT_TO_POINT_CONNECTIVITY("POINT_TO_POINT_CONNECTIVITY"),

		POINT_TO_MULTIPOINT_CONNECTIVITY("POINT_TO_MULTIPOINT_CONNECTIVITY"),

		MULTIPOINT_CONNECTIVITY("MULTIPOINT_CONNECTIVITY"),

		ROOTED_MULTIPOINT_CONNECTIVITY("ROOTED_MULTIPOINT_CONNECTIVITY");

		private String value;

		ServiceTypeEnum(String value) {
			this.value = value;
		}

		public String getValue() {
			return value;
		}

		@Override
		public String toString() {
			return String.valueOf(value);
		}

		public static ServiceTypeEnum fromValue(String text) {
			for (ServiceTypeEnum b : ServiceTypeEnum.values()) {
				if (String.valueOf(b.value).equals(text)) {
					return b;
				}
			}
			return null;
		}

		public static class Adapter extends TypeAdapter<ServiceTypeEnum> {
			@Override
			public void write(final JsonWriter jsonWriter, final ServiceTypeEnum enumeration) throws IOException {
				jsonWriter.value(enumeration.getValue());
			}

			@Override
			public ServiceTypeEnum read(final JsonReader jsonReader) throws IOException {
				String value = jsonReader.nextString();
				return ServiceTypeEnum.fromValue(String.valueOf(value));
			}
		}
	}

	@SerializedName("service-type")
	private ServiceTypeEnum serviceType = null;

	@SerializedName("schedule")
	private TimeRange schedule = null;

	@SerializedName("requested-capacity")
	private Capacity requestedCapacity = null;

	/**
	 * Gets or Sets serviceLayer
	 */
	@JsonAdapter(ServiceLayerEnum.Adapter.class)
	public enum ServiceLayerEnum {
		ODU("ODU"),

		ETH("ETH"),

		DSR("DSR"),

		PHOTONIC_MEDIA("PHOTONIC_MEDIA");

		private String value;

		ServiceLayerEnum(String value) {
			this.value = value;
		}

		public String getValue() {
			return value;
		}

		@Override
		public String toString() {
			return String.valueOf(value);
		}

		public static ServiceLayerEnum fromValue(String text) {
			for (ServiceLayerEnum b : ServiceLayerEnum.values()) {
				if (String.valueOf(b.value).equals(text)) {
					return b;
				}
			}
			return null;
		}

		public static class Adapter extends TypeAdapter<ServiceLayerEnum> {
			@Override
			public void write(final JsonWriter jsonWriter, final ServiceLayerEnum enumeration) throws IOException {
				jsonWriter.value(enumeration.getValue());
			}

			@Override
			public ServiceLayerEnum read(final JsonReader jsonReader) throws IOException {
				String value = jsonReader.nextString();
				return ServiceLayerEnum.fromValue(String.valueOf(value));
			}
		}
	}

	@SerializedName("service-layer")
	private ServiceLayerEnum serviceLayer = null;

	@SerializedName("service-level")
	private String serviceLevel = null;

	@SerializedName("diversity-exclusion")
	private List<ConnectivityServiceRef> diversityExclusion = null;

	/**
	 * Gets or Sets connectivityDirection
	 */
	@JsonAdapter(ConnectivityDirectionEnum.Adapter.class)
	public enum ConnectivityDirectionEnum {
		BIDIRECTIONAL("BIDIRECTIONAL"),

		UNIDIRECTIONAL("UNIDIRECTIONAL"),

		UNDEFINED_OR_UNKNOWN("UNDEFINED_OR_UNKNOWN");

		private String value;

		ConnectivityDirectionEnum(String value) {
			this.value = value;
		}

		public String getValue() {
			return value;
		}

		@Override
		public String toString() {
			return String.valueOf(value);
		}

		public static ConnectivityDirectionEnum fromValue(String text) {
			for (ConnectivityDirectionEnum b : ConnectivityDirectionEnum.values()) {
				if (String.valueOf(b.value).equals(text)) {
					return b;
				}
			}
			return null;
		}

		public static class Adapter extends TypeAdapter<ConnectivityDirectionEnum> {
			@Override
			public void write(final JsonWriter jsonWriter, final ConnectivityDirectionEnum enumeration) throws IOException {
				jsonWriter.value(enumeration.getValue());
			}

			@Override
			public ConnectivityDirectionEnum read(final JsonReader jsonReader) throws IOException {
				String value = jsonReader.nextString();
				return ConnectivityDirectionEnum.fromValue(String.valueOf(value));
			}
		}
	}

	@SerializedName("connectivity-direction")
	private ConnectivityDirectionEnum connectivityDirection = null;

	@SerializedName("coroute-inclusion")
	private ConnectivityServiceRef corouteInclusion = null;

	@SerializedName("max-switch-times")
	private String maxSwitchTimes = null;

	@SerializedName("wait-to-revert-time")
	private String waitToRevertTime = null;

	@SerializedName("restore-priority")
	private String restorePriority = null;

	@SerializedName("is-lock-out")
	private Boolean isLockOut = null;

	@SerializedName("is-coordinated-switching-both-ends")
	private Boolean isCoordinatedSwitchingBothEnds = null;

	@SerializedName("is-frozen")
	private Boolean isFrozen = null;

	/**
	 * Indicate which layer this resilience parameters package configured for.
	 */
	@JsonAdapter(PreferredRestorationLayerEnum.Adapter.class)
	public enum PreferredRestorationLayerEnum {
		ODU("ODU"),

		ETH("ETH"),

		DSR("DSR"),

		PHOTONIC_MEDIA("PHOTONIC_MEDIA");

		private String value;

		PreferredRestorationLayerEnum(String value) {
			this.value = value;
		}

		public String getValue() {
			return value;
		}

		@Override
		public String toString() {
			return String.valueOf(value);
		}

		public static PreferredRestorationLayerEnum fromValue(String text) {
			for (PreferredRestorationLayerEnum b : PreferredRestorationLayerEnum.values()) {
				if (String.valueOf(b.value).equals(text)) {
					return b;
				}
			}
			return null;
		}

		public static class Adapter extends TypeAdapter<PreferredRestorationLayerEnum> {
			@Override
			public void write(final JsonWriter jsonWriter, final PreferredRestorationLayerEnum enumeration) throws IOException {
				jsonWriter.value(enumeration.getValue());
			}

			@Override
			public PreferredRestorationLayerEnum read(final JsonReader jsonReader) throws IOException {
				String value = jsonReader.nextString();
				return PreferredRestorationLayerEnum.fromValue(String.valueOf(value));
			}
		}
	}

	@SerializedName("preferred-restoration-layer")
	private List<PreferredRestorationLayerEnum> preferredRestorationLayer = null;

	/**
	 * Indcates whether the protection scheme is revertive or non-revertive.
	 */
	@JsonAdapter(ReversionModeEnum.Adapter.class)
	public enum ReversionModeEnum {
		REVERTIVE("REVERTIVE"),

		NON_REVERTIVE("NON-REVERTIVE");

		private String value;

		ReversionModeEnum(String value) {
			this.value = value;
		}

		public String getValue() {
			return value;
		}

		@Override
		public String toString() {
			return String.valueOf(value);
		}

		public static ReversionModeEnum fromValue(String text) {
			for (ReversionModeEnum b : ReversionModeEnum.values()) {
				if (String.valueOf(b.value).equals(text)) {
					return b;
				}
			}
			return null;
		}

		public static class Adapter extends TypeAdapter<ReversionModeEnum> {
			@Override
			public void write(final JsonWriter jsonWriter, final ReversionModeEnum enumeration) throws IOException {
				jsonWriter.value(enumeration.getValue());
			}

			@Override
			public ReversionModeEnum read(final JsonReader jsonReader) throws IOException {
				String value = jsonReader.nextString();
				return ReversionModeEnum.fromValue(String.valueOf(value));
			}
		}
	}

	@SerializedName("reversion-mode")
	private ReversionModeEnum reversionMode = null;

	@SerializedName("hold-off-time")
	private String holdOffTime = null;

	@SerializedName("resilience-type")
	private ResilienceType resilienceType = null;

	/**
	 *  The coordination mechanism between multi-layers.
	 */
	@JsonAdapter(RestorationCoordinateTypeEnum.Adapter.class)
	public enum RestorationCoordinateTypeEnum {
		NO_COORDINATE("NO_COORDINATE"),

		HOLD_OFF_TIME("HOLD_OFF_TIME"),

		WAIT_FOR_NOTIFICATION("WAIT_FOR_NOTIFICATION");

		private String value;

		RestorationCoordinateTypeEnum(String value) {
			this.value = value;
		}

		public String getValue() {
			return value;
		}

		@Override
		public String toString() {
			return String.valueOf(value);
		}

		public static RestorationCoordinateTypeEnum fromValue(String text) {
			for (RestorationCoordinateTypeEnum b : RestorationCoordinateTypeEnum.values()) {
				if (String.valueOf(b.value).equals(text)) {
					return b;
				}
			}
			return null;
		}

		public static class Adapter extends TypeAdapter<RestorationCoordinateTypeEnum> {
			@Override
			public void write(final JsonWriter jsonWriter, final RestorationCoordinateTypeEnum enumeration) throws IOException {
				jsonWriter.value(enumeration.getValue());
			}

			@Override
			public RestorationCoordinateTypeEnum read(final JsonReader jsonReader) throws IOException {
				String value = jsonReader.nextString();
				return RestorationCoordinateTypeEnum.fromValue(String.valueOf(value));
			}
		}
	}

	@SerializedName("restoration-coordinate-type")
	private RestorationCoordinateTypeEnum restorationCoordinateType = null;

	/**
	 * Gets or Sets administrativeState
	 */
	@JsonAdapter(AdministrativeStateEnum.Adapter.class)
	public enum AdministrativeStateEnum {
		LOCKED("LOCKED"),

		UNLOCKED("UNLOCKED");

		private String value;

		AdministrativeStateEnum(String value) {
			this.value = value;
		}

		public String getValue() {
			return value;
		}

		@Override
		public String toString() {
			return String.valueOf(value);
		}

		public static AdministrativeStateEnum fromValue(String text) {
			for (AdministrativeStateEnum b : AdministrativeStateEnum.values()) {
				if (String.valueOf(b.value).equals(text)) {
					return b;
				}
			}
			return null;
		}

		public static class Adapter extends TypeAdapter<AdministrativeStateEnum> {
			@Override
			public void write(final JsonWriter jsonWriter, final AdministrativeStateEnum enumeration) throws IOException {
				jsonWriter.value(enumeration.getValue());
			}

			@Override
			public AdministrativeStateEnum read(final JsonReader jsonReader) throws IOException {
				String value = jsonReader.nextString();
				return AdministrativeStateEnum.fromValue(String.valueOf(value));
			}
		}
	}

	@SerializedName("administrative-state")
	private AdministrativeStateEnum administrativeState = null;

	/**
	 * Gets or Sets lifecycleState
	 */
	@JsonAdapter(LifecycleStateEnum.Adapter.class)
	public enum LifecycleStateEnum {
		PLANNED("PLANNED"),

		POTENTIAL_AVAILABLE("POTENTIAL_AVAILABLE"),

		POTENTIAL_BUSY("POTENTIAL_BUSY"),

		INSTALLED("INSTALLED"),

		PENDING_REMOVAL("PENDING_REMOVAL");

		private String value;

		LifecycleStateEnum(String value) {
			this.value = value;
		}

		public String getValue() {
			return value;
		}

		@Override
		public String toString() {
			return String.valueOf(value);
		}

		public static LifecycleStateEnum fromValue(String text) {
			for (LifecycleStateEnum b : LifecycleStateEnum.values()) {
				if (String.valueOf(b.value).equals(text)) {
					return b;
				}
			}
			return null;
		}

		public static class Adapter extends TypeAdapter<LifecycleStateEnum> {
			@Override
			public void write(final JsonWriter jsonWriter, final LifecycleStateEnum enumeration) throws IOException {
				jsonWriter.value(enumeration.getValue());
			}

			@Override
			public LifecycleStateEnum read(final JsonReader jsonReader) throws IOException {
				String value = jsonReader.nextString();
				return LifecycleStateEnum.fromValue(String.valueOf(value));
			}
		}
	}

	@SerializedName("lifecycle-state")
	private LifecycleStateEnum lifecycleState = null;

	/**
	 * Gets or Sets operationalState
	 */
	@JsonAdapter(OperationalStateEnum.Adapter.class)
	public enum OperationalStateEnum {
		DISABLED("DISABLED"),

		ENABLED("ENABLED");

		private String value;

		OperationalStateEnum(String value) {
			this.value = value;
		}

		public String getValue() {
			return value;
		}

		@Override
		public String toString() {
			return String.valueOf(value);
		}

		public static OperationalStateEnum fromValue(String text) {
			for (OperationalStateEnum b : OperationalStateEnum.values()) {
				if (String.valueOf(b.value).equals(text)) {
					return b;
				}
			}
			return null;
		}

		public static class Adapter extends TypeAdapter<OperationalStateEnum> {
			@Override
			public void write(final JsonWriter jsonWriter, final OperationalStateEnum enumeration) throws IOException {
				jsonWriter.value(enumeration.getValue());
			}

			@Override
			public OperationalStateEnum read(final JsonReader jsonReader) throws IOException {
				String value = jsonReader.nextString();
				return OperationalStateEnum.fromValue(String.valueOf(value));
			}
		}
	}

	@SerializedName("operational-state")
	private OperationalStateEnum operationalState = null;

	@SerializedName("connection")
	private List<ConnectionRef> connection = null;

	@SerializedName("end-point")
	private List<ConnectivityServiceEndPoint> endPoint = null;

	public ConnectivityService uuid(String uuid) {
		this.uuid = uuid;
		return this;
	}

	/**
	 * UUID: An identifier that is universally unique within an identifier space, where the identifier space is itself globally unique, and immutable. An UUID carries no semantics with respect to the purpose or state of the entity. UUID here uses string representation as defined in RFC 4122.  The canonical representation uses lowercase characters. Pattern: [0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-&#39; + &#39;[0-9a-fA-F]{4}-[0-9a-fA-F]{12} Example of a UUID in string representation: f81d4fae-7dec-11d0-a765-00a0c91e6bf6
	 * @return uuid
	 **/
	@ApiModelProperty(value = "UUID: An identifier that is universally unique within an identifier space, where the identifier space is itself globally unique, and immutable. An UUID carries no semantics with respect to the purpose or state of the entity. UUID here uses string representation as defined in RFC 4122.  The canonical representation uses lowercase characters. Pattern: [0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-' + '[0-9a-fA-F]{4}-[0-9a-fA-F]{12} Example of a UUID in string representation: f81d4fae-7dec-11d0-a765-00a0c91e6bf6")
	public String getUuid() {
		return uuid;
	}

	public void setUuid(String uuid) {
		this.uuid = uuid;
	}

	public ConnectivityService name(List<NameAndValue> name) {
		this.name = name;
		return this;
	}

	public ConnectivityService addNameItem(NameAndValue nameItem) {
		if (this.name == null) {
			this.name = new ArrayList<NameAndValue>();
		}
		this.name.add(nameItem);
		return this;
	}

	/**
	 * List of names. A property of an entity with a value that is unique in some namespace but may change during the life of the entity. A name carries no semantics with respect to the purpose of the entity.
	 * @return name
	 **/
	@ApiModelProperty(value = "List of names. A property of an entity with a value that is unique in some namespace but may change during the life of the entity. A name carries no semantics with respect to the purpose of the entity.")
	public List<NameAndValue> getName() {
		return name;
	}

	public void setName(List<NameAndValue> name) {
		this.name = name;
	}

	public ConnectivityService serviceType(ServiceTypeEnum serviceType) {
		this.serviceType = serviceType;
		return this;
	}

	/**
	 * Get serviceType
	 * @return serviceType
	 **/
	@ApiModelProperty(value = "")
	public ServiceTypeEnum getServiceType() {
		return serviceType;
	}

	public void setServiceType(ServiceTypeEnum serviceType) {
		this.serviceType = serviceType;
	}

	public ConnectivityService schedule(TimeRange schedule) {
		this.schedule = schedule;
		return this;
	}

	/**
	 * Get schedule
	 * @return schedule
	 **/
	@ApiModelProperty(value = "")
	public TimeRange getSchedule() {
		return schedule;
	}

	public void setSchedule(TimeRange schedule) {
		this.schedule = schedule;
	}

	public ConnectivityService requestedCapacity(Capacity requestedCapacity) {
		this.requestedCapacity = requestedCapacity;
		return this;
	}

	/**
	 * Get requestedCapacity
	 * @return requestedCapacity
	 **/
	@ApiModelProperty(value = "")
	public Capacity getRequestedCapacity() {
		return requestedCapacity;
	}

	public void setRequestedCapacity(Capacity requestedCapacity) {
		this.requestedCapacity = requestedCapacity;
	}

	public ConnectivityService serviceLayer(ServiceLayerEnum serviceLayer) {
		this.serviceLayer = serviceLayer;
		return this;
	}

	/**
	 * Get serviceLayer
	 * @return serviceLayer
	 **/
	@ApiModelProperty(value = "")
	public ServiceLayerEnum getServiceLayer() {
		return serviceLayer;
	}

	public void setServiceLayer(ServiceLayerEnum serviceLayer) {
		this.serviceLayer = serviceLayer;
	}

	public ConnectivityService serviceLevel(String serviceLevel) {
		this.serviceLevel = serviceLevel;
		return this;
	}

	/**
	 * An abstract value the meaning of which is mutually agreed – typically represents metrics such as - Class of service, priority, resiliency, availability
	 * @return serviceLevel
	 **/
	@ApiModelProperty(value = "An abstract value the meaning of which is mutually agreed – typically represents metrics such as - Class of service, priority, resiliency, availability")
	public String getServiceLevel() {
		return serviceLevel;
	}

	public void setServiceLevel(String serviceLevel) {
		this.serviceLevel = serviceLevel;
	}

	public ConnectivityService diversityExclusion(List<ConnectivityServiceRef> diversityExclusion) {
		this.diversityExclusion = diversityExclusion;
		return this;
	}

	public ConnectivityService addDiversityExclusionItem(ConnectivityServiceRef diversityExclusionItem) {
		if (this.diversityExclusion == null) {
			this.diversityExclusion = new ArrayList<ConnectivityServiceRef>();
		}
		this.diversityExclusion.add(diversityExclusionItem);
		return this;
	}

	/**
	 * Get diversityExclusion
	 * @return diversityExclusion
	 **/
	@ApiModelProperty(value = "")
	public List<ConnectivityServiceRef> getDiversityExclusion() {
		return diversityExclusion;
	}

	public void setDiversityExclusion(List<ConnectivityServiceRef> diversityExclusion) {
		this.diversityExclusion = diversityExclusion;
	}

	public ConnectivityService connectivityDirection(ConnectivityDirectionEnum connectivityDirection) {
		this.connectivityDirection = connectivityDirection;
		return this;
	}

	/**
	 * Get connectivityDirection
	 * @return connectivityDirection
	 **/
	@ApiModelProperty(value = "")
	public ConnectivityDirectionEnum getConnectivityDirection() {
		return connectivityDirection;
	}

	public void setConnectivityDirection(ConnectivityDirectionEnum connectivityDirection) {
		this.connectivityDirection = connectivityDirection;
	}

	public ConnectivityService corouteInclusion(ConnectivityServiceRef corouteInclusion) {
		this.corouteInclusion = corouteInclusion;
		return this;
	}

	/**
	 * Get corouteInclusion
	 * @return corouteInclusion
	 **/
	@ApiModelProperty(value = "")
	public ConnectivityServiceRef getCorouteInclusion() {
		return corouteInclusion;
	}

	public void setCorouteInclusion(ConnectivityServiceRef corouteInclusion) {
		this.corouteInclusion = corouteInclusion;
	}

	public ConnectivityService maxSwitchTimes(String maxSwitchTimes) {
		this.maxSwitchTimes = maxSwitchTimes;
		return this;
	}

	/**
	 * Used to limit the maximum swtich times. When work fault disappears , and traffic return to the original work path, switch counter reset.
	 * @return maxSwitchTimes
	 **/
	@ApiModelProperty(value = "Used to limit the maximum swtich times. When work fault disappears , and traffic return to the original work path, switch counter reset.")
	public String getMaxSwitchTimes() {
		return maxSwitchTimes;
	}

	public void setMaxSwitchTimes(String maxSwitchTimes) {
		this.maxSwitchTimes = maxSwitchTimes;
	}

	public ConnectivityService waitToRevertTime(String waitToRevertTime) {
		this.waitToRevertTime = waitToRevertTime;
		return this;
	}

	/**
	 * If the protection system is revertive, this attribute specifies the time, in minutes, to wait after a fault clears on a higher priority (preferred) resource before reverting to the preferred resource.
	 * @return waitToRevertTime
	 **/
	@ApiModelProperty(value = "If the protection system is revertive, this attribute specifies the time, in minutes, to wait after a fault clears on a higher priority (preferred) resource before reverting to the preferred resource.")
	public String getWaitToRevertTime() {
		return waitToRevertTime;
	}

	public void setWaitToRevertTime(String waitToRevertTime) {
		this.waitToRevertTime = waitToRevertTime;
	}

	public ConnectivityService restorePriority(String restorePriority) {
		this.restorePriority = restorePriority;
		return this;
	}

	/**
	 * Get restorePriority
	 * @return restorePriority
	 **/
	@ApiModelProperty(value = "")
	public String getRestorePriority() {
		return restorePriority;
	}

	public void setRestorePriority(String restorePriority) {
		this.restorePriority = restorePriority;
	}

	public ConnectivityService isLockOut(Boolean isLockOut) {
		this.isLockOut = isLockOut;
		return this;
	}

	/**
	 * The resource is configured to temporarily not be available for use in the protection scheme(s) it is part of. This overrides all other protection control states including forced. If the item is locked out then it cannot be used under any circumstances. Note: Only relevant when part of a protection scheme.
	 * @return isLockOut
	 **/
	@ApiModelProperty(value = "The resource is configured to temporarily not be available for use in the protection scheme(s) it is part of. This overrides all other protection control states including forced. If the item is locked out then it cannot be used under any circumstances. Note: Only relevant when part of a protection scheme.")
	public Boolean isIsLockOut() {
		return isLockOut;
	}

	public void setIsLockOut(Boolean isLockOut) {
		this.isLockOut = isLockOut;
	}

	public ConnectivityService isCoordinatedSwitchingBothEnds(Boolean isCoordinatedSwitchingBothEnds) {
		this.isCoordinatedSwitchingBothEnds = isCoordinatedSwitchingBothEnds;
		return this;
	}

	/**
	 * Is operating such that switching at both ends of each flow acorss the FC is coordinated at both ingress and egress ends.
	 * @return isCoordinatedSwitchingBothEnds
	 **/
	@ApiModelProperty(value = "Is operating such that switching at both ends of each flow acorss the FC is coordinated at both ingress and egress ends.")
	public Boolean isIsCoordinatedSwitchingBothEnds() {
		return isCoordinatedSwitchingBothEnds;
	}

	public void setIsCoordinatedSwitchingBothEnds(Boolean isCoordinatedSwitchingBothEnds) {
		this.isCoordinatedSwitchingBothEnds = isCoordinatedSwitchingBothEnds;
	}

	public ConnectivityService isFrozen(Boolean isFrozen) {
		this.isFrozen = isFrozen;
		return this;
	}

	/**
	 * Temporarily prevents any switch action to be taken and, as such, freezes the current state. Until the freeze is cleared, additional near-end external commands are rejected and fault condition changes and received APS messages are ignored. All administrative controls of any aspect of protection are rejected.
	 * @return isFrozen
	 **/
	@ApiModelProperty(value = "Temporarily prevents any switch action to be taken and, as such, freezes the current state. Until the freeze is cleared, additional near-end external commands are rejected and fault condition changes and received APS messages are ignored. All administrative controls of any aspect of protection are rejected.")
	public Boolean isIsFrozen() {
		return isFrozen;
	}

	public void setIsFrozen(Boolean isFrozen) {
		this.isFrozen = isFrozen;
	}

	public ConnectivityService preferredRestorationLayer(List<PreferredRestorationLayerEnum> preferredRestorationLayer) {
		this.preferredRestorationLayer = preferredRestorationLayer;
		return this;
	}

	public ConnectivityService addPreferredRestorationLayerItem(PreferredRestorationLayerEnum preferredRestorationLayerItem) {
		if (this.preferredRestorationLayer == null) {
			this.preferredRestorationLayer = new ArrayList<PreferredRestorationLayerEnum>();
		}
		this.preferredRestorationLayer.add(preferredRestorationLayerItem);
		return this;
	}

	/**
	 * Get preferredRestorationLayer
	 * @return preferredRestorationLayer
	 **/
	@ApiModelProperty(value = "")
	public List<PreferredRestorationLayerEnum> getPreferredRestorationLayer() {
		return preferredRestorationLayer;
	}

	public void setPreferredRestorationLayer(List<PreferredRestorationLayerEnum> preferredRestorationLayer) {
		this.preferredRestorationLayer = preferredRestorationLayer;
	}

	public ConnectivityService reversionMode(ReversionModeEnum reversionMode) {
		this.reversionMode = reversionMode;
		return this;
	}

	/**
	 * Indcates whether the protection scheme is revertive or non-revertive.
	 * @return reversionMode
	 **/
	@ApiModelProperty(value = "Indcates whether the protection scheme is revertive or non-revertive.")
	public ReversionModeEnum getReversionMode() {
		return reversionMode;
	}

	public void setReversionMode(ReversionModeEnum reversionMode) {
		this.reversionMode = reversionMode;
	}

	public ConnectivityService holdOffTime(String holdOffTime) {
		this.holdOffTime = holdOffTime;
		return this;
	}

	/**
	 * This attribute indicates the time, in milliseconds, between declaration of signal degrade or signal fail, and the initialization of the protection switching algorithm.
	 * @return holdOffTime
	 **/
	@ApiModelProperty(value = "This attribute indicates the time, in milliseconds, between declaration of signal degrade or signal fail, and the initialization of the protection switching algorithm.")
	public String getHoldOffTime() {
		return holdOffTime;
	}

	public void setHoldOffTime(String holdOffTime) {
		this.holdOffTime = holdOffTime;
	}

	public ConnectivityService resilienceType(ResilienceType resilienceType) {
		this.resilienceType = resilienceType;
		return this;
	}

	/**
	 * Get resilienceType
	 * @return resilienceType
	 **/
	@ApiModelProperty(value = "")
	public ResilienceType getResilienceType() {
		return resilienceType;
	}

	public void setResilienceType(ResilienceType resilienceType) {
		this.resilienceType = resilienceType;
	}

	public ConnectivityService restorationCoordinateType(RestorationCoordinateTypeEnum restorationCoordinateType) {
		this.restorationCoordinateType = restorationCoordinateType;
		return this;
	}

	/**
	 *  The coordination mechanism between multi-layers.
	 * @return restorationCoordinateType
	 **/
	@ApiModelProperty(value = " The coordination mechanism between multi-layers.")
	public RestorationCoordinateTypeEnum getRestorationCoordinateType() {
		return restorationCoordinateType;
	}

	public void setRestorationCoordinateType(RestorationCoordinateTypeEnum restorationCoordinateType) {
		this.restorationCoordinateType = restorationCoordinateType;
	}

	public ConnectivityService administrativeState(AdministrativeStateEnum administrativeState) {
		this.administrativeState = administrativeState;
		return this;
	}

	/**
	 * Get administrativeState
	 * @return administrativeState
	 **/
	@ApiModelProperty(value = "")
	public AdministrativeStateEnum getAdministrativeState() {
		return administrativeState;
	}

	public void setAdministrativeState(AdministrativeStateEnum administrativeState) {
		this.administrativeState = administrativeState;
	}

	public ConnectivityService lifecycleState(LifecycleStateEnum lifecycleState) {
		this.lifecycleState = lifecycleState;
		return this;
	}

	/**
	 * Get lifecycleState
	 * @return lifecycleState
	 **/
	@ApiModelProperty(value = "")
	public LifecycleStateEnum getLifecycleState() {
		return lifecycleState;
	}

	public void setLifecycleState(LifecycleStateEnum lifecycleState) {
		this.lifecycleState = lifecycleState;
	}

	public ConnectivityService operationalState(OperationalStateEnum operationalState) {
		this.operationalState = operationalState;
		return this;
	}

	/**
	 * Get operationalState
	 * @return operationalState
	 **/
	@ApiModelProperty(value = "")
	public OperationalStateEnum getOperationalState() {
		return operationalState;
	}

	public void setOperationalState(OperationalStateEnum operationalState) {
		this.operationalState = operationalState;
	}

	public ConnectivityService connection(List<ConnectionRef> connection) {
		this.connection = connection;
		return this;
	}

	public ConnectivityService addConnectionItem(ConnectionRef connectionItem) {
		if (this.connection == null) {
			this.connection = new ArrayList<ConnectionRef>();
		}
		this.connection.add(connectionItem);
		return this;
	}

	/**
	 * Get connection
	 * @return connection
	 **/
	@ApiModelProperty(value = "")
	public List<ConnectionRef> getConnection() {
		return connection;
	}

	public void setConnection(List<ConnectionRef> connection) {
		this.connection = connection;
	}

	public ConnectivityService endPoint(List<ConnectivityServiceEndPoint> endPoint) {
		this.endPoint = endPoint;
		return this;
	}

	public ConnectivityService addEndPointItem(ConnectivityServiceEndPoint endPointItem) {
		if (this.endPoint == null) {
			this.endPoint = new ArrayList<ConnectivityServiceEndPoint>();
		}
		this.endPoint.add(endPointItem);
		return this;
	}

	/**
	 * Get endPoint
	 * @return endPoint
	 **/
	@ApiModelProperty(value = "")
	public List<ConnectivityServiceEndPoint> getEndPoint() {
		return endPoint;
	}

	public void setEndPoint(List<ConnectivityServiceEndPoint> endPoint) {
		this.endPoint = endPoint;
	}


	@Override
	public boolean equals(java.lang.Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		ConnectivityService connectivityService = (ConnectivityService) o;
		return Objects.equals(this.uuid, connectivityService.uuid) &&
				Objects.equals(this.name, connectivityService.name) &&
				Objects.equals(this.serviceType, connectivityService.serviceType) &&
				Objects.equals(this.schedule, connectivityService.schedule) &&
				Objects.equals(this.requestedCapacity, connectivityService.requestedCapacity) &&
				Objects.equals(this.serviceLayer, connectivityService.serviceLayer) &&
				Objects.equals(this.serviceLevel, connectivityService.serviceLevel) &&
				Objects.equals(this.diversityExclusion, connectivityService.diversityExclusion) &&
				Objects.equals(this.connectivityDirection, connectivityService.connectivityDirection) &&
				Objects.equals(this.corouteInclusion, connectivityService.corouteInclusion) &&
				Objects.equals(this.maxSwitchTimes, connectivityService.maxSwitchTimes) &&
				Objects.equals(this.waitToRevertTime, connectivityService.waitToRevertTime) &&
				Objects.equals(this.restorePriority, connectivityService.restorePriority) &&
				Objects.equals(this.isLockOut, connectivityService.isLockOut) &&
				Objects.equals(this.isCoordinatedSwitchingBothEnds, connectivityService.isCoordinatedSwitchingBothEnds) &&
				Objects.equals(this.isFrozen, connectivityService.isFrozen) &&
				Objects.equals(this.preferredRestorationLayer, connectivityService.preferredRestorationLayer) &&
				Objects.equals(this.reversionMode, connectivityService.reversionMode) &&
				Objects.equals(this.holdOffTime, connectivityService.holdOffTime) &&
				Objects.equals(this.resilienceType, connectivityService.resilienceType) &&
				Objects.equals(this.restorationCoordinateType, connectivityService.restorationCoordinateType) &&
				Objects.equals(this.administrativeState, connectivityService.administrativeState) &&
				Objects.equals(this.lifecycleState, connectivityService.lifecycleState) &&
				Objects.equals(this.operationalState, connectivityService.operationalState) &&
				Objects.equals(this.connection, connectivityService.connection) &&
				Objects.equals(this.endPoint, connectivityService.endPoint);
	}

	@Override
	public int hashCode() {
		return Objects.hash(uuid, name, serviceType, schedule, requestedCapacity, serviceLayer, serviceLevel, diversityExclusion, connectivityDirection, corouteInclusion, maxSwitchTimes, waitToRevertTime, restorePriority, isLockOut, isCoordinatedSwitchingBothEnds, isFrozen, preferredRestorationLayer, reversionMode, holdOffTime, resilienceType, restorationCoordinateType, administrativeState, lifecycleState, operationalState, connection, endPoint);
	}


	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class ConnectivityService {\n");

		sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
		sb.append("    name: ").append(toIndentedString(name)).append("\n");
		sb.append("    serviceType: ").append(toIndentedString(serviceType)).append("\n");
		sb.append("    schedule: ").append(toIndentedString(schedule)).append("\n");
		sb.append("    requestedCapacity: ").append(toIndentedString(requestedCapacity)).append("\n");
		sb.append("    serviceLayer: ").append(toIndentedString(serviceLayer)).append("\n");
		sb.append("    serviceLevel: ").append(toIndentedString(serviceLevel)).append("\n");
		sb.append("    diversityExclusion: ").append(toIndentedString(diversityExclusion)).append("\n");
		sb.append("    connectivityDirection: ").append(toIndentedString(connectivityDirection)).append("\n");
		sb.append("    corouteInclusion: ").append(toIndentedString(corouteInclusion)).append("\n");
		sb.append("    maxSwitchTimes: ").append(toIndentedString(maxSwitchTimes)).append("\n");
		sb.append("    waitToRevertTime: ").append(toIndentedString(waitToRevertTime)).append("\n");
		sb.append("    restorePriority: ").append(toIndentedString(restorePriority)).append("\n");
		sb.append("    isLockOut: ").append(toIndentedString(isLockOut)).append("\n");
		sb.append("    isCoordinatedSwitchingBothEnds: ").append(toIndentedString(isCoordinatedSwitchingBothEnds)).append("\n");
		sb.append("    isFrozen: ").append(toIndentedString(isFrozen)).append("\n");
		sb.append("    preferredRestorationLayer: ").append(toIndentedString(preferredRestorationLayer)).append("\n");
		sb.append("    reversionMode: ").append(toIndentedString(reversionMode)).append("\n");
		sb.append("    holdOffTime: ").append(toIndentedString(holdOffTime)).append("\n");
		sb.append("    resilienceType: ").append(toIndentedString(resilienceType)).append("\n");
		sb.append("    restorationCoordinateType: ").append(toIndentedString(restorationCoordinateType)).append("\n");
		sb.append("    administrativeState: ").append(toIndentedString(administrativeState)).append("\n");
		sb.append("    lifecycleState: ").append(toIndentedString(lifecycleState)).append("\n");
		sb.append("    operationalState: ").append(toIndentedString(operationalState)).append("\n");
		sb.append("    connection: ").append(toIndentedString(connection)).append("\n");
		sb.append("    endPoint: ").append(toIndentedString(endPoint)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces
	 * (except the first line).
	 */
	private String toIndentedString(java.lang.Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

}

