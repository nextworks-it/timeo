/**
 * tapi-connectivity API
 * tapi-connectivity API generated from tapi-connectivity@2018-12-10.yang
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.LinkRef;
import io.swagger.client.model.NodeRef;
import io.swagger.client.model.PathRef;
import io.swagger.client.model.TopologyRef;
import java.util.ArrayList;
import java.util.List;


/**
 * TopologyConstraint
 */
@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2019-07-09T12:42:21.668+02:00")
public class TopologyConstraint   {
  @SerializedName("exclude-node")
  private List<NodeRef> excludeNode = new ArrayList<NodeRef>();

  @SerializedName("include-node")
  private List<NodeRef> includeNode = new ArrayList<NodeRef>();

  @SerializedName("include-path")
  private List<PathRef> includePath = new ArrayList<PathRef>();

  @SerializedName("include-link")
  private List<LinkRef> includeLink = new ArrayList<LinkRef>();

  @SerializedName("exclude-path")
  private List<PathRef> excludePath = new ArrayList<PathRef>();

  @SerializedName("exclude-link")
  private List<LinkRef> excludeLink = new ArrayList<LinkRef>();

  /**
   * soft constraint requested by client to indicate the layer(s) of transport connection that it prefers to carry the service. This could be same as the service layer or one of the supported server layers
   */
  public enum PreferredTransportLayerEnum {
    @SerializedName("ODU")
    ODU("ODU"),
    
    @SerializedName("ETH")
    ETH("ETH"),
    
    @SerializedName("DSR")
    DSR("DSR"),
    
    @SerializedName("PHOTONIC_MEDIA")
    PHOTONIC_MEDIA("PHOTONIC_MEDIA");

    private String value;

    PreferredTransportLayerEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("preferred-transport-layer")
  private List<PreferredTransportLayerEnum> preferredTransportLayer = new ArrayList<PreferredTransportLayerEnum>();

  @SerializedName("avoid-topology")
  private List<TopologyRef> avoidTopology = new ArrayList<TopologyRef>();

  @SerializedName("include-topology")
  private List<TopologyRef> includeTopology = new ArrayList<TopologyRef>();

  public TopologyConstraint excludeNode(List<NodeRef> excludeNode) {
    this.excludeNode = excludeNode;
    return this;
  }

  public TopologyConstraint addExcludeNodeItem(NodeRef excludeNodeItem) {
    this.excludeNode.add(excludeNodeItem);
    return this;
  }

   /**
   * Get excludeNode
   * @return excludeNode
  **/
  @ApiModelProperty(example = "null", value = "")
  public List<NodeRef> getExcludeNode() {
    return excludeNode;
  }

  public void setExcludeNode(List<NodeRef> excludeNode) {
    this.excludeNode = excludeNode;
  }

  public TopologyConstraint includeNode(List<NodeRef> includeNode) {
    this.includeNode = includeNode;
    return this;
  }

  public TopologyConstraint addIncludeNodeItem(NodeRef includeNodeItem) {
    this.includeNode.add(includeNodeItem);
    return this;
  }

   /**
   * This is a loose constraint - that is it is unordered and could be a partial list
   * @return includeNode
  **/
  @ApiModelProperty(example = "null", value = "This is a loose constraint - that is it is unordered and could be a partial list")
  public List<NodeRef> getIncludeNode() {
    return includeNode;
  }

  public void setIncludeNode(List<NodeRef> includeNode) {
    this.includeNode = includeNode;
  }

  public TopologyConstraint includePath(List<PathRef> includePath) {
    this.includePath = includePath;
    return this;
  }

  public TopologyConstraint addIncludePathItem(PathRef includePathItem) {
    this.includePath.add(includePathItem);
    return this;
  }

   /**
   * Get includePath
   * @return includePath
  **/
  @ApiModelProperty(example = "null", value = "")
  public List<PathRef> getIncludePath() {
    return includePath;
  }

  public void setIncludePath(List<PathRef> includePath) {
    this.includePath = includePath;
  }

  public TopologyConstraint includeLink(List<LinkRef> includeLink) {
    this.includeLink = includeLink;
    return this;
  }

  public TopologyConstraint addIncludeLinkItem(LinkRef includeLinkItem) {
    this.includeLink.add(includeLinkItem);
    return this;
  }

   /**
   * This is a loose constraint - that is it is unordered and could be a partial list 
   * @return includeLink
  **/
  @ApiModelProperty(example = "null", value = "This is a loose constraint - that is it is unordered and could be a partial list ")
  public List<LinkRef> getIncludeLink() {
    return includeLink;
  }

  public void setIncludeLink(List<LinkRef> includeLink) {
    this.includeLink = includeLink;
  }

  public TopologyConstraint excludePath(List<PathRef> excludePath) {
    this.excludePath = excludePath;
    return this;
  }

  public TopologyConstraint addExcludePathItem(PathRef excludePathItem) {
    this.excludePath.add(excludePathItem);
    return this;
  }

   /**
   * Get excludePath
   * @return excludePath
  **/
  @ApiModelProperty(example = "null", value = "")
  public List<PathRef> getExcludePath() {
    return excludePath;
  }

  public void setExcludePath(List<PathRef> excludePath) {
    this.excludePath = excludePath;
  }

  public TopologyConstraint excludeLink(List<LinkRef> excludeLink) {
    this.excludeLink = excludeLink;
    return this;
  }

  public TopologyConstraint addExcludeLinkItem(LinkRef excludeLinkItem) {
    this.excludeLink.add(excludeLinkItem);
    return this;
  }

   /**
   * Get excludeLink
   * @return excludeLink
  **/
  @ApiModelProperty(example = "null", value = "")
  public List<LinkRef> getExcludeLink() {
    return excludeLink;
  }

  public void setExcludeLink(List<LinkRef> excludeLink) {
    this.excludeLink = excludeLink;
  }

  public TopologyConstraint preferredTransportLayer(List<PreferredTransportLayerEnum> preferredTransportLayer) {
    this.preferredTransportLayer = preferredTransportLayer;
    return this;
  }

  public TopologyConstraint addPreferredTransportLayerItem(PreferredTransportLayerEnum preferredTransportLayerItem) {
    this.preferredTransportLayer.add(preferredTransportLayerItem);
    return this;
  }

   /**
   * Get preferredTransportLayer
   * @return preferredTransportLayer
  **/
  @ApiModelProperty(example = "null", value = "")
  public List<PreferredTransportLayerEnum> getPreferredTransportLayer() {
    return preferredTransportLayer;
  }

  public void setPreferredTransportLayer(List<PreferredTransportLayerEnum> preferredTransportLayer) {
    this.preferredTransportLayer = preferredTransportLayer;
  }

  public TopologyConstraint avoidTopology(List<TopologyRef> avoidTopology) {
    this.avoidTopology = avoidTopology;
    return this;
  }

  public TopologyConstraint addAvoidTopologyItem(TopologyRef avoidTopologyItem) {
    this.avoidTopology.add(avoidTopologyItem);
    return this;
  }

   /**
   * Get avoidTopology
   * @return avoidTopology
  **/
  @ApiModelProperty(example = "null", value = "")
  public List<TopologyRef> getAvoidTopology() {
    return avoidTopology;
  }

  public void setAvoidTopology(List<TopologyRef> avoidTopology) {
    this.avoidTopology = avoidTopology;
  }

  public TopologyConstraint includeTopology(List<TopologyRef> includeTopology) {
    this.includeTopology = includeTopology;
    return this;
  }

  public TopologyConstraint addIncludeTopologyItem(TopologyRef includeTopologyItem) {
    this.includeTopology.add(includeTopologyItem);
    return this;
  }

   /**
   * Get includeTopology
   * @return includeTopology
  **/
  @ApiModelProperty(example = "null", value = "")
  public List<TopologyRef> getIncludeTopology() {
    return includeTopology;
  }

  public void setIncludeTopology(List<TopologyRef> includeTopology) {
    this.includeTopology = includeTopology;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TopologyConstraint topologyConstraint = (TopologyConstraint) o;
    return Objects.equals(this.excludeNode, topologyConstraint.excludeNode) &&
        Objects.equals(this.includeNode, topologyConstraint.includeNode) &&
        Objects.equals(this.includePath, topologyConstraint.includePath) &&
        Objects.equals(this.includeLink, topologyConstraint.includeLink) &&
        Objects.equals(this.excludePath, topologyConstraint.excludePath) &&
        Objects.equals(this.excludeLink, topologyConstraint.excludeLink) &&
        Objects.equals(this.preferredTransportLayer, topologyConstraint.preferredTransportLayer) &&
        Objects.equals(this.avoidTopology, topologyConstraint.avoidTopology) &&
        Objects.equals(this.includeTopology, topologyConstraint.includeTopology);
  }

  @Override
  public int hashCode() {
    return Objects.hash(excludeNode, includeNode, includePath, includeLink, excludePath, excludeLink, preferredTransportLayer, avoidTopology, includeTopology);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TopologyConstraint {\n");
    
    sb.append("    excludeNode: ").append(toIndentedString(excludeNode)).append("\n");
    sb.append("    includeNode: ").append(toIndentedString(includeNode)).append("\n");
    sb.append("    includePath: ").append(toIndentedString(includePath)).append("\n");
    sb.append("    includeLink: ").append(toIndentedString(includeLink)).append("\n");
    sb.append("    excludePath: ").append(toIndentedString(excludePath)).append("\n");
    sb.append("    excludeLink: ").append(toIndentedString(excludeLink)).append("\n");
    sb.append("    preferredTransportLayer: ").append(toIndentedString(preferredTransportLayer)).append("\n");
    sb.append("    avoidTopology: ").append(toIndentedString(avoidTopology)).append("\n");
    sb.append("    includeTopology: ").append(toIndentedString(includeTopology)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

