/**
 * tapi-connectivity API
 * tapi-connectivity API generated from tapi-connectivity@2018-12-10.yang
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import io.swagger.client.model.ConnectivityContext;
import io.swagger.client.model.ConnectivityService;
import io.swagger.client.model.ConnectivityServiceRef;
import io.swagger.client.model.CostCharacteristic;
import io.swagger.client.model.BandwidthProfile;
import io.swagger.client.model.CapacityValue;
import io.swagger.client.model.Capacity;
import io.swagger.client.model.ConnectivityServiceEndPoint;
import io.swagger.client.model.NameAndValue;
import io.swagger.client.model.ServiceInterfacePointRef;
import io.swagger.client.model.LatencyCharacteristic;
import io.swagger.client.model.ResilienceType;
import io.swagger.client.model.RiskCharacteristic;
import io.swagger.client.model.TimeRange;
import io.swagger.client.model.Connection;
import io.swagger.client.model.ConnectionEndPointRef;
import io.swagger.client.model.ConnectionRef;
import io.swagger.client.model.Route;
import io.swagger.client.model.LinkRef;
import io.swagger.client.model.SwitchControlRef;
import io.swagger.client.model.SwitchControl;
import io.swagger.client.model.RouteRef;
import io.swagger.client.model.ModelSwitch;
import io.swagger.client.model.TopologyRef;
import io.swagger.client.model.NodeRef;
import io.swagger.client.model.PathRef;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ConnectivitycontextApi {
    private ApiClient apiClient;

    public ConnectivitycontextApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ConnectivitycontextApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for createContextConnectivityContextConnectivityContextById */
    private com.squareup.okhttp.Call createContextConnectivityContextConnectivityContextByIdCall(ConnectivityContext connectivityContext, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = connectivityContext;
        
        // verify the required parameter 'connectivityContext' is set
        if (connectivityContext == null) {
            throw new ApiException("Missing the required parameter 'connectivityContext' when calling createContextConnectivityContextConnectivityContextById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Create connectivity-context by ID
     * Create operation of resource: connectivity-context
     * @param connectivityContext connectivity-contextbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextConnectivityContextConnectivityContextById(ConnectivityContext connectivityContext) throws ApiException {
        createContextConnectivityContextConnectivityContextByIdWithHttpInfo(connectivityContext);
    }

    /**
     * Create connectivity-context by ID
     * Create operation of resource: connectivity-context
     * @param connectivityContext connectivity-contextbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextConnectivityContextConnectivityContextByIdWithHttpInfo(ConnectivityContext connectivityContext) throws ApiException {
        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityContextByIdCall(connectivityContext, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create connectivity-context by ID (asynchronously)
     * Create operation of resource: connectivity-context
     * @param connectivityContext connectivity-contextbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectivityContextByIdAsync(ConnectivityContext connectivityContext, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityContextByIdCall(connectivityContext, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for createContextConnectivityContextConnectivityServiceConnectivityServiceById */
    private com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceConnectivityServiceByIdCall(String uuid, ConnectivityService connectivityService, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = connectivityService;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextConnectivityContextConnectivityServiceConnectivityServiceById(Async)");
        }
        
        // verify the required parameter 'connectivityService' is set
        if (connectivityService == null) {
            throw new ApiException("Missing the required parameter 'connectivityService' when calling createContextConnectivityContextConnectivityServiceConnectivityServiceById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Create connectivity-service by ID
     * Create operation of resource: connectivity-service
     * @param uuid ID of uuid (required)
     * @param connectivityService connectivity-servicebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextConnectivityContextConnectivityServiceConnectivityServiceById(String uuid, ConnectivityService connectivityService) throws ApiException {
        createContextConnectivityContextConnectivityServiceConnectivityServiceByIdWithHttpInfo(uuid, connectivityService);
    }

    /**
     * Create connectivity-service by ID
     * Create operation of resource: connectivity-service
     * @param uuid ID of uuid (required)
     * @param connectivityService connectivity-servicebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextConnectivityContextConnectivityServiceConnectivityServiceByIdWithHttpInfo(String uuid, ConnectivityService connectivityService) throws ApiException {
        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceConnectivityServiceByIdCall(uuid, connectivityService, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create connectivity-service by ID (asynchronously)
     * Create operation of resource: connectivity-service
     * @param uuid ID of uuid (required)
     * @param connectivityService connectivity-servicebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceConnectivityServiceByIdAsync(String uuid, ConnectivityService connectivityService, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceConnectivityServiceByIdCall(uuid, connectivityService, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for createContextConnectivityContextConnectivityServiceCorouteInclusionCorouteInclusionById */
    private com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceCorouteInclusionCorouteInclusionByIdCall(String uuid, ConnectivityServiceRef corouteInclusion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = corouteInclusion;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextConnectivityContextConnectivityServiceCorouteInclusionCorouteInclusionById(Async)");
        }
        
        // verify the required parameter 'corouteInclusion' is set
        if (corouteInclusion == null) {
            throw new ApiException("Missing the required parameter 'corouteInclusion' when calling createContextConnectivityContextConnectivityServiceCorouteInclusionCorouteInclusionById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/coroute-inclusion/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Create coroute-inclusion by ID
     * Create operation of resource: coroute-inclusion
     * @param uuid ID of uuid (required)
     * @param corouteInclusion coroute-inclusionbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextConnectivityContextConnectivityServiceCorouteInclusionCorouteInclusionById(String uuid, ConnectivityServiceRef corouteInclusion) throws ApiException {
        createContextConnectivityContextConnectivityServiceCorouteInclusionCorouteInclusionByIdWithHttpInfo(uuid, corouteInclusion);
    }

    /**
     * Create coroute-inclusion by ID
     * Create operation of resource: coroute-inclusion
     * @param uuid ID of uuid (required)
     * @param corouteInclusion coroute-inclusionbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextConnectivityContextConnectivityServiceCorouteInclusionCorouteInclusionByIdWithHttpInfo(String uuid, ConnectivityServiceRef corouteInclusion) throws ApiException {
        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceCorouteInclusionCorouteInclusionByIdCall(uuid, corouteInclusion, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create coroute-inclusion by ID (asynchronously)
     * Create operation of resource: coroute-inclusion
     * @param uuid ID of uuid (required)
     * @param corouteInclusion coroute-inclusionbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceCorouteInclusionCorouteInclusionByIdAsync(String uuid, ConnectivityServiceRef corouteInclusion, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceCorouteInclusionCorouteInclusionByIdCall(uuid, corouteInclusion, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for createContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicById */
    private com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicByIdCall(String uuid, String costName, CostCharacteristic costCharacteristic, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = costCharacteristic;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicById(Async)");
        }
        
        // verify the required parameter 'costName' is set
        if (costName == null) {
            throw new ApiException("Missing the required parameter 'costName' when calling createContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicById(Async)");
        }
        
        // verify the required parameter 'costCharacteristic' is set
        if (costCharacteristic == null) {
            throw new ApiException("Missing the required parameter 'costCharacteristic' when calling createContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/cost-characteristic/{cost_name}/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
        .replaceAll("\\{" + "cost_name" + "\\}", apiClient.escapeString(costName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Create cost-characteristic by ID
     * Create operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param costName ID of cost_name (required)
     * @param costCharacteristic cost-characteristicbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicById(String uuid, String costName, CostCharacteristic costCharacteristic) throws ApiException {
        createContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicByIdWithHttpInfo(uuid, costName, costCharacteristic);
    }

    /**
     * Create cost-characteristic by ID
     * Create operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param costName ID of cost_name (required)
     * @param costCharacteristic cost-characteristicbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicByIdWithHttpInfo(String uuid, String costName, CostCharacteristic costCharacteristic) throws ApiException {
        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicByIdCall(uuid, costName, costCharacteristic, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create cost-characteristic by ID (asynchronously)
     * Create operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param costName ID of cost_name (required)
     * @param costCharacteristic cost-characteristicbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicByIdAsync(String uuid, String costName, CostCharacteristic costCharacteristic, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicByIdCall(uuid, costName, costCharacteristic, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for createContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionById */
    private com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionByIdCall(String uuid, String connectivityServiceUuid, ConnectivityServiceRef diversityExclusion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = diversityExclusion;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionById(Async)");
        }
        
        // verify the required parameter 'connectivityServiceUuid' is set
        if (connectivityServiceUuid == null) {
            throw new ApiException("Missing the required parameter 'connectivityServiceUuid' when calling createContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionById(Async)");
        }
        
        // verify the required parameter 'diversityExclusion' is set
        if (diversityExclusion == null) {
            throw new ApiException("Missing the required parameter 'diversityExclusion' when calling createContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/diversity-exclusion/{connectivity_service_uuid}/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
        .replaceAll("\\{" + "connectivity_service_uuid" + "\\}", apiClient.escapeString(connectivityServiceUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Create diversity-exclusion by ID
     * Create operation of resource: diversity-exclusion
     * @param uuid ID of uuid (required)
     * @param connectivityServiceUuid ID of connectivity_service_uuid (required)
     * @param diversityExclusion diversity-exclusionbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionById(String uuid, String connectivityServiceUuid, ConnectivityServiceRef diversityExclusion) throws ApiException {
        createContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionByIdWithHttpInfo(uuid, connectivityServiceUuid, diversityExclusion);
    }

    /**
     * Create diversity-exclusion by ID
     * Create operation of resource: diversity-exclusion
     * @param uuid ID of uuid (required)
     * @param connectivityServiceUuid ID of connectivity_service_uuid (required)
     * @param diversityExclusion diversity-exclusionbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionByIdWithHttpInfo(String uuid, String connectivityServiceUuid, ConnectivityServiceRef diversityExclusion) throws ApiException {
        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionByIdCall(uuid, connectivityServiceUuid, diversityExclusion, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create diversity-exclusion by ID (asynchronously)
     * Create operation of resource: diversity-exclusion
     * @param uuid ID of uuid (required)
     * @param connectivityServiceUuid ID of connectivity_service_uuid (required)
     * @param diversityExclusion diversity-exclusionbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionByIdAsync(String uuid, String connectivityServiceUuid, ConnectivityServiceRef diversityExclusion, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionByIdCall(uuid, connectivityServiceUuid, diversityExclusion, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileById */
    private com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdCall(String uuid, String localId, BandwidthProfile bandwidthProfile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = bandwidthProfile;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileById(Async)");
        }
        
        // verify the required parameter 'bandwidthProfile' is set
        if (bandwidthProfile == null) {
            throw new ApiException("Missing the required parameter 'bandwidthProfile' when calling createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/capacity/bandwidth-profile/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
        .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Create bandwidth-profile by ID
     * Create operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param bandwidthProfile bandwidth-profilebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileById(String uuid, String localId, BandwidthProfile bandwidthProfile) throws ApiException {
        createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdWithHttpInfo(uuid, localId, bandwidthProfile);
    }

    /**
     * Create bandwidth-profile by ID
     * Create operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param bandwidthProfile bandwidth-profilebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdWithHttpInfo(String uuid, String localId, BandwidthProfile bandwidthProfile) throws ApiException {
        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdCall(uuid, localId, bandwidthProfile, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create bandwidth-profile by ID (asynchronously)
     * Create operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param bandwidthProfile bandwidth-profilebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdAsync(String uuid, String localId, BandwidthProfile bandwidthProfile, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdCall(uuid, localId, bandwidthProfile, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById */
    private com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdCall(String uuid, String localId, CapacityValue committedBurstSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = committedBurstSize;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById(Async)");
        }
        
        // verify the required parameter 'committedBurstSize' is set
        if (committedBurstSize == null) {
            throw new ApiException("Missing the required parameter 'committedBurstSize' when calling createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/capacity/bandwidth-profile/committed-burst-size/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
        .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Create committed-burst-size by ID
     * Create operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param committedBurstSize committed-burst-sizebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById(String uuid, String localId, CapacityValue committedBurstSize) throws ApiException {
        createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdWithHttpInfo(uuid, localId, committedBurstSize);
    }

    /**
     * Create committed-burst-size by ID
     * Create operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param committedBurstSize committed-burst-sizebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdWithHttpInfo(String uuid, String localId, CapacityValue committedBurstSize) throws ApiException {
        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdCall(uuid, localId, committedBurstSize, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create committed-burst-size by ID (asynchronously)
     * Create operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param committedBurstSize committed-burst-sizebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdAsync(String uuid, String localId, CapacityValue committedBurstSize, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdCall(uuid, localId, committedBurstSize, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById */
    private com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdCall(String uuid, String localId, CapacityValue committedInformationRate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = committedInformationRate;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById(Async)");
        }
        
        // verify the required parameter 'committedInformationRate' is set
        if (committedInformationRate == null) {
            throw new ApiException("Missing the required parameter 'committedInformationRate' when calling createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/capacity/bandwidth-profile/committed-information-rate/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
        .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Create committed-information-rate by ID
     * Create operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param committedInformationRate committed-information-ratebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById(String uuid, String localId, CapacityValue committedInformationRate) throws ApiException {
        createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdWithHttpInfo(uuid, localId, committedInformationRate);
    }

    /**
     * Create committed-information-rate by ID
     * Create operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param committedInformationRate committed-information-ratebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdWithHttpInfo(String uuid, String localId, CapacityValue committedInformationRate) throws ApiException {
        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdCall(uuid, localId, committedInformationRate, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create committed-information-rate by ID (asynchronously)
     * Create operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param committedInformationRate committed-information-ratebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdAsync(String uuid, String localId, CapacityValue committedInformationRate, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdCall(uuid, localId, committedInformationRate, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById */
    private com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdCall(String uuid, String localId, CapacityValue peakBurstSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = peakBurstSize;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById(Async)");
        }
        
        // verify the required parameter 'peakBurstSize' is set
        if (peakBurstSize == null) {
            throw new ApiException("Missing the required parameter 'peakBurstSize' when calling createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/capacity/bandwidth-profile/peak-burst-size/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
        .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Create peak-burst-size by ID
     * Create operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param peakBurstSize peak-burst-sizebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById(String uuid, String localId, CapacityValue peakBurstSize) throws ApiException {
        createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdWithHttpInfo(uuid, localId, peakBurstSize);
    }

    /**
     * Create peak-burst-size by ID
     * Create operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param peakBurstSize peak-burst-sizebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdWithHttpInfo(String uuid, String localId, CapacityValue peakBurstSize) throws ApiException {
        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdCall(uuid, localId, peakBurstSize, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create peak-burst-size by ID (asynchronously)
     * Create operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param peakBurstSize peak-burst-sizebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdAsync(String uuid, String localId, CapacityValue peakBurstSize, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdCall(uuid, localId, peakBurstSize, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateById */
    private com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdCall(String uuid, String localId, CapacityValue peakInformationRate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = peakInformationRate;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateById(Async)");
        }
        
        // verify the required parameter 'peakInformationRate' is set
        if (peakInformationRate == null) {
            throw new ApiException("Missing the required parameter 'peakInformationRate' when calling createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/capacity/bandwidth-profile/peak-information-rate/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
        .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Create peak-information-rate by ID
     * Create operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param peakInformationRate peak-information-ratebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateById(String uuid, String localId, CapacityValue peakInformationRate) throws ApiException {
        createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdWithHttpInfo(uuid, localId, peakInformationRate);
    }

    /**
     * Create peak-information-rate by ID
     * Create operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param peakInformationRate peak-information-ratebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdWithHttpInfo(String uuid, String localId, CapacityValue peakInformationRate) throws ApiException {
        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdCall(uuid, localId, peakInformationRate, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create peak-information-rate by ID (asynchronously)
     * Create operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param peakInformationRate peak-information-ratebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdAsync(String uuid, String localId, CapacityValue peakInformationRate, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdCall(uuid, localId, peakInformationRate, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for createContextConnectivityContextConnectivityServiceEndPointCapacityCapacityById */
    private com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceEndPointCapacityCapacityByIdCall(String uuid, String localId, Capacity capacity, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = capacity;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextConnectivityContextConnectivityServiceEndPointCapacityCapacityById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling createContextConnectivityContextConnectivityServiceEndPointCapacityCapacityById(Async)");
        }
        
        // verify the required parameter 'capacity' is set
        if (capacity == null) {
            throw new ApiException("Missing the required parameter 'capacity' when calling createContextConnectivityContextConnectivityServiceEndPointCapacityCapacityById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/capacity/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
        .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Create capacity by ID
     * Create operation of resource: capacity
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param capacity capacitybody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextConnectivityContextConnectivityServiceEndPointCapacityCapacityById(String uuid, String localId, Capacity capacity) throws ApiException {
        createContextConnectivityContextConnectivityServiceEndPointCapacityCapacityByIdWithHttpInfo(uuid, localId, capacity);
    }

    /**
     * Create capacity by ID
     * Create operation of resource: capacity
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param capacity capacitybody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextConnectivityContextConnectivityServiceEndPointCapacityCapacityByIdWithHttpInfo(String uuid, String localId, Capacity capacity) throws ApiException {
        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceEndPointCapacityCapacityByIdCall(uuid, localId, capacity, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create capacity by ID (asynchronously)
     * Create operation of resource: capacity
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param capacity capacitybody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceEndPointCapacityCapacityByIdAsync(String uuid, String localId, Capacity capacity, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceEndPointCapacityCapacityByIdCall(uuid, localId, capacity, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for createContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeById */
    private com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeByIdCall(String uuid, String localId, CapacityValue totalSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = totalSize;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling createContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeById(Async)");
        }
        
        // verify the required parameter 'totalSize' is set
        if (totalSize == null) {
            throw new ApiException("Missing the required parameter 'totalSize' when calling createContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/capacity/total-size/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
        .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Create total-size by ID
     * Create operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param totalSize total-sizebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeById(String uuid, String localId, CapacityValue totalSize) throws ApiException {
        createContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeByIdWithHttpInfo(uuid, localId, totalSize);
    }

    /**
     * Create total-size by ID
     * Create operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param totalSize total-sizebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeByIdWithHttpInfo(String uuid, String localId, CapacityValue totalSize) throws ApiException {
        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeByIdCall(uuid, localId, totalSize, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create total-size by ID (asynchronously)
     * Create operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param totalSize total-sizebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeByIdAsync(String uuid, String localId, CapacityValue totalSize, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeByIdCall(uuid, localId, totalSize, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for createContextConnectivityContextConnectivityServiceEndPointEndPointById */
    private com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceEndPointEndPointByIdCall(String uuid, String localId, ConnectivityServiceEndPoint endPoint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = endPoint;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextConnectivityContextConnectivityServiceEndPointEndPointById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling createContextConnectivityContextConnectivityServiceEndPointEndPointById(Async)");
        }
        
        // verify the required parameter 'endPoint' is set
        if (endPoint == null) {
            throw new ApiException("Missing the required parameter 'endPoint' when calling createContextConnectivityContextConnectivityServiceEndPointEndPointById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
        .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Create end-point by ID
     * Create operation of resource: end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param endPoint end-pointbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextConnectivityContextConnectivityServiceEndPointEndPointById(String uuid, String localId, ConnectivityServiceEndPoint endPoint) throws ApiException {
        createContextConnectivityContextConnectivityServiceEndPointEndPointByIdWithHttpInfo(uuid, localId, endPoint);
    }

    /**
     * Create end-point by ID
     * Create operation of resource: end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param endPoint end-pointbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextConnectivityContextConnectivityServiceEndPointEndPointByIdWithHttpInfo(String uuid, String localId, ConnectivityServiceEndPoint endPoint) throws ApiException {
        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceEndPointEndPointByIdCall(uuid, localId, endPoint, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create end-point by ID (asynchronously)
     * Create operation of resource: end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param endPoint end-pointbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceEndPointEndPointByIdAsync(String uuid, String localId, ConnectivityServiceEndPoint endPoint, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceEndPointEndPointByIdCall(uuid, localId, endPoint, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for createContextConnectivityContextConnectivityServiceEndPointNameNameById */
    private com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceEndPointNameNameByIdCall(String uuid, String localId, String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = name;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextConnectivityContextConnectivityServiceEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling createContextConnectivityContextConnectivityServiceEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling createContextConnectivityContextConnectivityServiceEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling createContextConnectivityContextConnectivityServiceEndPointNameNameById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/name/{value_name}/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
        .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
        .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Create name by ID
     * Create operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextConnectivityContextConnectivityServiceEndPointNameNameById(String uuid, String localId, String valueName, NameAndValue name) throws ApiException {
        createContextConnectivityContextConnectivityServiceEndPointNameNameByIdWithHttpInfo(uuid, localId, valueName, name);
    }

    /**
     * Create name by ID
     * Create operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextConnectivityContextConnectivityServiceEndPointNameNameByIdWithHttpInfo(String uuid, String localId, String valueName, NameAndValue name) throws ApiException {
        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceEndPointNameNameByIdCall(uuid, localId, valueName, name, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create name by ID (asynchronously)
     * Create operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceEndPointNameNameByIdAsync(String uuid, String localId, String valueName, NameAndValue name, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceEndPointNameNameByIdCall(uuid, localId, valueName, name, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for createContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById */
    private com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointByIdCall(String uuid, String localId, ServiceInterfacePointRef serviceInterfacePoint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = serviceInterfacePoint;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling createContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById(Async)");
        }
        
        // verify the required parameter 'serviceInterfacePoint' is set
        if (serviceInterfacePoint == null) {
            throw new ApiException("Missing the required parameter 'serviceInterfacePoint' when calling createContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/service-interface-point/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
        .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Create service-interface-point by ID
     * Create operation of resource: service-interface-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePoint service-interface-pointbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById(String uuid, String localId, ServiceInterfacePointRef serviceInterfacePoint) throws ApiException {
        createContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointByIdWithHttpInfo(uuid, localId, serviceInterfacePoint);
    }

    /**
     * Create service-interface-point by ID
     * Create operation of resource: service-interface-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePoint service-interface-pointbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointByIdWithHttpInfo(String uuid, String localId, ServiceInterfacePointRef serviceInterfacePoint) throws ApiException {
        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointByIdCall(uuid, localId, serviceInterfacePoint, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create service-interface-point by ID (asynchronously)
     * Create operation of resource: service-interface-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePoint service-interface-pointbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointByIdAsync(String uuid, String localId, ServiceInterfacePointRef serviceInterfacePoint, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointByIdCall(uuid, localId, serviceInterfacePoint, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for createContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicById */
    private com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicByIdCall(String uuid, String trafficPropertyName, LatencyCharacteristic latencyCharacteristic, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = latencyCharacteristic;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicById(Async)");
        }
        
        // verify the required parameter 'trafficPropertyName' is set
        if (trafficPropertyName == null) {
            throw new ApiException("Missing the required parameter 'trafficPropertyName' when calling createContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicById(Async)");
        }
        
        // verify the required parameter 'latencyCharacteristic' is set
        if (latencyCharacteristic == null) {
            throw new ApiException("Missing the required parameter 'latencyCharacteristic' when calling createContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/latency-characteristic/{traffic_property_name}/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
        .replaceAll("\\{" + "traffic_property_name" + "\\}", apiClient.escapeString(trafficPropertyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Create latency-characteristic by ID
     * Create operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @param latencyCharacteristic latency-characteristicbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicById(String uuid, String trafficPropertyName, LatencyCharacteristic latencyCharacteristic) throws ApiException {
        createContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicByIdWithHttpInfo(uuid, trafficPropertyName, latencyCharacteristic);
    }

    /**
     * Create latency-characteristic by ID
     * Create operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @param latencyCharacteristic latency-characteristicbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicByIdWithHttpInfo(String uuid, String trafficPropertyName, LatencyCharacteristic latencyCharacteristic) throws ApiException {
        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicByIdCall(uuid, trafficPropertyName, latencyCharacteristic, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create latency-characteristic by ID (asynchronously)
     * Create operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @param latencyCharacteristic latency-characteristicbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicByIdAsync(String uuid, String trafficPropertyName, LatencyCharacteristic latencyCharacteristic, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicByIdCall(uuid, trafficPropertyName, latencyCharacteristic, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for createContextConnectivityContextConnectivityServiceNameNameById */
    private com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceNameNameByIdCall(String uuid, String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = name;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextConnectivityContextConnectivityServiceNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling createContextConnectivityContextConnectivityServiceNameNameById(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling createContextConnectivityContextConnectivityServiceNameNameById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/name/{value_name}/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
        .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Create name by ID
     * Create operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextConnectivityContextConnectivityServiceNameNameById(String uuid, String valueName, NameAndValue name) throws ApiException {
        createContextConnectivityContextConnectivityServiceNameNameByIdWithHttpInfo(uuid, valueName, name);
    }

    /**
     * Create name by ID
     * Create operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextConnectivityContextConnectivityServiceNameNameByIdWithHttpInfo(String uuid, String valueName, NameAndValue name) throws ApiException {
        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceNameNameByIdCall(uuid, valueName, name, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create name by ID (asynchronously)
     * Create operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceNameNameByIdAsync(String uuid, String valueName, NameAndValue name, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceNameNameByIdCall(uuid, valueName, name, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileById */
    private com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileByIdCall(String uuid, BandwidthProfile bandwidthProfile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = bandwidthProfile;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileById(Async)");
        }
        
        // verify the required parameter 'bandwidthProfile' is set
        if (bandwidthProfile == null) {
            throw new ApiException("Missing the required parameter 'bandwidthProfile' when calling createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/requested-capacity/bandwidth-profile/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Create bandwidth-profile by ID
     * Create operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param bandwidthProfile bandwidth-profilebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileById(String uuid, BandwidthProfile bandwidthProfile) throws ApiException {
        createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileByIdWithHttpInfo(uuid, bandwidthProfile);
    }

    /**
     * Create bandwidth-profile by ID
     * Create operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param bandwidthProfile bandwidth-profilebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileByIdWithHttpInfo(String uuid, BandwidthProfile bandwidthProfile) throws ApiException {
        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileByIdCall(uuid, bandwidthProfile, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create bandwidth-profile by ID (asynchronously)
     * Create operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param bandwidthProfile bandwidth-profilebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileByIdAsync(String uuid, BandwidthProfile bandwidthProfile, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileByIdCall(uuid, bandwidthProfile, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById */
    private com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdCall(String uuid, CapacityValue committedBurstSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = committedBurstSize;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById(Async)");
        }
        
        // verify the required parameter 'committedBurstSize' is set
        if (committedBurstSize == null) {
            throw new ApiException("Missing the required parameter 'committedBurstSize' when calling createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/requested-capacity/bandwidth-profile/committed-burst-size/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Create committed-burst-size by ID
     * Create operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param committedBurstSize committed-burst-sizebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById(String uuid, CapacityValue committedBurstSize) throws ApiException {
        createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdWithHttpInfo(uuid, committedBurstSize);
    }

    /**
     * Create committed-burst-size by ID
     * Create operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param committedBurstSize committed-burst-sizebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdWithHttpInfo(String uuid, CapacityValue committedBurstSize) throws ApiException {
        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdCall(uuid, committedBurstSize, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create committed-burst-size by ID (asynchronously)
     * Create operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param committedBurstSize committed-burst-sizebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdAsync(String uuid, CapacityValue committedBurstSize, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdCall(uuid, committedBurstSize, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById */
    private com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdCall(String uuid, CapacityValue committedInformationRate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = committedInformationRate;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById(Async)");
        }
        
        // verify the required parameter 'committedInformationRate' is set
        if (committedInformationRate == null) {
            throw new ApiException("Missing the required parameter 'committedInformationRate' when calling createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/requested-capacity/bandwidth-profile/committed-information-rate/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Create committed-information-rate by ID
     * Create operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param committedInformationRate committed-information-ratebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById(String uuid, CapacityValue committedInformationRate) throws ApiException {
        createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdWithHttpInfo(uuid, committedInformationRate);
    }

    /**
     * Create committed-information-rate by ID
     * Create operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param committedInformationRate committed-information-ratebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdWithHttpInfo(String uuid, CapacityValue committedInformationRate) throws ApiException {
        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdCall(uuid, committedInformationRate, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create committed-information-rate by ID (asynchronously)
     * Create operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param committedInformationRate committed-information-ratebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdAsync(String uuid, CapacityValue committedInformationRate, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdCall(uuid, committedInformationRate, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById */
    private com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdCall(String uuid, CapacityValue peakBurstSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = peakBurstSize;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById(Async)");
        }
        
        // verify the required parameter 'peakBurstSize' is set
        if (peakBurstSize == null) {
            throw new ApiException("Missing the required parameter 'peakBurstSize' when calling createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/requested-capacity/bandwidth-profile/peak-burst-size/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Create peak-burst-size by ID
     * Create operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param peakBurstSize peak-burst-sizebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById(String uuid, CapacityValue peakBurstSize) throws ApiException {
        createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdWithHttpInfo(uuid, peakBurstSize);
    }

    /**
     * Create peak-burst-size by ID
     * Create operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param peakBurstSize peak-burst-sizebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdWithHttpInfo(String uuid, CapacityValue peakBurstSize) throws ApiException {
        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdCall(uuid, peakBurstSize, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create peak-burst-size by ID (asynchronously)
     * Create operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param peakBurstSize peak-burst-sizebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdAsync(String uuid, CapacityValue peakBurstSize, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdCall(uuid, peakBurstSize, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateById */
    private com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdCall(String uuid, CapacityValue peakInformationRate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = peakInformationRate;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateById(Async)");
        }
        
        // verify the required parameter 'peakInformationRate' is set
        if (peakInformationRate == null) {
            throw new ApiException("Missing the required parameter 'peakInformationRate' when calling createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/requested-capacity/bandwidth-profile/peak-information-rate/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Create peak-information-rate by ID
     * Create operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param peakInformationRate peak-information-ratebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateById(String uuid, CapacityValue peakInformationRate) throws ApiException {
        createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdWithHttpInfo(uuid, peakInformationRate);
    }

    /**
     * Create peak-information-rate by ID
     * Create operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param peakInformationRate peak-information-ratebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdWithHttpInfo(String uuid, CapacityValue peakInformationRate) throws ApiException {
        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdCall(uuid, peakInformationRate, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create peak-information-rate by ID (asynchronously)
     * Create operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param peakInformationRate peak-information-ratebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdAsync(String uuid, CapacityValue peakInformationRate, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdCall(uuid, peakInformationRate, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for createContextConnectivityContextConnectivityServiceRequestedCapacityRequestedCapacityById */
    private com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceRequestedCapacityRequestedCapacityByIdCall(String uuid, Capacity requestedCapacity, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = requestedCapacity;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextConnectivityContextConnectivityServiceRequestedCapacityRequestedCapacityById(Async)");
        }
        
        // verify the required parameter 'requestedCapacity' is set
        if (requestedCapacity == null) {
            throw new ApiException("Missing the required parameter 'requestedCapacity' when calling createContextConnectivityContextConnectivityServiceRequestedCapacityRequestedCapacityById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/requested-capacity/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Create requested-capacity by ID
     * Create operation of resource: requested-capacity
     * @param uuid ID of uuid (required)
     * @param requestedCapacity requested-capacitybody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextConnectivityContextConnectivityServiceRequestedCapacityRequestedCapacityById(String uuid, Capacity requestedCapacity) throws ApiException {
        createContextConnectivityContextConnectivityServiceRequestedCapacityRequestedCapacityByIdWithHttpInfo(uuid, requestedCapacity);
    }

    /**
     * Create requested-capacity by ID
     * Create operation of resource: requested-capacity
     * @param uuid ID of uuid (required)
     * @param requestedCapacity requested-capacitybody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextConnectivityContextConnectivityServiceRequestedCapacityRequestedCapacityByIdWithHttpInfo(String uuid, Capacity requestedCapacity) throws ApiException {
        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceRequestedCapacityRequestedCapacityByIdCall(uuid, requestedCapacity, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create requested-capacity by ID (asynchronously)
     * Create operation of resource: requested-capacity
     * @param uuid ID of uuid (required)
     * @param requestedCapacity requested-capacitybody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceRequestedCapacityRequestedCapacityByIdAsync(String uuid, Capacity requestedCapacity, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceRequestedCapacityRequestedCapacityByIdCall(uuid, requestedCapacity, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for createContextConnectivityContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeById */
    private com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeByIdCall(String uuid, CapacityValue totalSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = totalSize;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextConnectivityContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeById(Async)");
        }
        
        // verify the required parameter 'totalSize' is set
        if (totalSize == null) {
            throw new ApiException("Missing the required parameter 'totalSize' when calling createContextConnectivityContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/requested-capacity/total-size/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Create total-size by ID
     * Create operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param totalSize total-sizebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextConnectivityContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeById(String uuid, CapacityValue totalSize) throws ApiException {
        createContextConnectivityContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeByIdWithHttpInfo(uuid, totalSize);
    }

    /**
     * Create total-size by ID
     * Create operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param totalSize total-sizebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextConnectivityContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeByIdWithHttpInfo(String uuid, CapacityValue totalSize) throws ApiException {
        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeByIdCall(uuid, totalSize, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create total-size by ID (asynchronously)
     * Create operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param totalSize total-sizebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeByIdAsync(String uuid, CapacityValue totalSize, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeByIdCall(uuid, totalSize, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for createContextConnectivityContextConnectivityServiceResilienceTypeResilienceTypeById */
    private com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceResilienceTypeResilienceTypeByIdCall(String uuid, ResilienceType resilienceType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = resilienceType;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextConnectivityContextConnectivityServiceResilienceTypeResilienceTypeById(Async)");
        }
        
        // verify the required parameter 'resilienceType' is set
        if (resilienceType == null) {
            throw new ApiException("Missing the required parameter 'resilienceType' when calling createContextConnectivityContextConnectivityServiceResilienceTypeResilienceTypeById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/resilience-type/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Create resilience-type by ID
     * Create operation of resource: resilience-type
     * @param uuid ID of uuid (required)
     * @param resilienceType resilience-typebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextConnectivityContextConnectivityServiceResilienceTypeResilienceTypeById(String uuid, ResilienceType resilienceType) throws ApiException {
        createContextConnectivityContextConnectivityServiceResilienceTypeResilienceTypeByIdWithHttpInfo(uuid, resilienceType);
    }

    /**
     * Create resilience-type by ID
     * Create operation of resource: resilience-type
     * @param uuid ID of uuid (required)
     * @param resilienceType resilience-typebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextConnectivityContextConnectivityServiceResilienceTypeResilienceTypeByIdWithHttpInfo(String uuid, ResilienceType resilienceType) throws ApiException {
        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceResilienceTypeResilienceTypeByIdCall(uuid, resilienceType, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create resilience-type by ID (asynchronously)
     * Create operation of resource: resilience-type
     * @param uuid ID of uuid (required)
     * @param resilienceType resilience-typebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceResilienceTypeResilienceTypeByIdAsync(String uuid, ResilienceType resilienceType, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceResilienceTypeResilienceTypeByIdCall(uuid, resilienceType, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for createContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicById */
    private com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicByIdCall(String uuid, String riskCharacteristicName, RiskCharacteristic riskDiversityCharacteristic, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = riskDiversityCharacteristic;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicById(Async)");
        }
        
        // verify the required parameter 'riskCharacteristicName' is set
        if (riskCharacteristicName == null) {
            throw new ApiException("Missing the required parameter 'riskCharacteristicName' when calling createContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicById(Async)");
        }
        
        // verify the required parameter 'riskDiversityCharacteristic' is set
        if (riskDiversityCharacteristic == null) {
            throw new ApiException("Missing the required parameter 'riskDiversityCharacteristic' when calling createContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/risk-diversity-characteristic/{risk_characteristic_name}/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
        .replaceAll("\\{" + "risk_characteristic_name" + "\\}", apiClient.escapeString(riskCharacteristicName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Create risk-diversity-characteristic by ID
     * Create operation of resource: risk-diversity-characteristic
     * @param uuid ID of uuid (required)
     * @param riskCharacteristicName ID of risk_characteristic_name (required)
     * @param riskDiversityCharacteristic risk-diversity-characteristicbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicById(String uuid, String riskCharacteristicName, RiskCharacteristic riskDiversityCharacteristic) throws ApiException {
        createContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicByIdWithHttpInfo(uuid, riskCharacteristicName, riskDiversityCharacteristic);
    }

    /**
     * Create risk-diversity-characteristic by ID
     * Create operation of resource: risk-diversity-characteristic
     * @param uuid ID of uuid (required)
     * @param riskCharacteristicName ID of risk_characteristic_name (required)
     * @param riskDiversityCharacteristic risk-diversity-characteristicbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicByIdWithHttpInfo(String uuid, String riskCharacteristicName, RiskCharacteristic riskDiversityCharacteristic) throws ApiException {
        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicByIdCall(uuid, riskCharacteristicName, riskDiversityCharacteristic, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create risk-diversity-characteristic by ID (asynchronously)
     * Create operation of resource: risk-diversity-characteristic
     * @param uuid ID of uuid (required)
     * @param riskCharacteristicName ID of risk_characteristic_name (required)
     * @param riskDiversityCharacteristic risk-diversity-characteristicbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicByIdAsync(String uuid, String riskCharacteristicName, RiskCharacteristic riskDiversityCharacteristic, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicByIdCall(uuid, riskCharacteristicName, riskDiversityCharacteristic, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for createContextConnectivityContextConnectivityServiceScheduleScheduleById */
    private com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceScheduleScheduleByIdCall(String uuid, TimeRange schedule, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = schedule;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextConnectivityContextConnectivityServiceScheduleScheduleById(Async)");
        }
        
        // verify the required parameter 'schedule' is set
        if (schedule == null) {
            throw new ApiException("Missing the required parameter 'schedule' when calling createContextConnectivityContextConnectivityServiceScheduleScheduleById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/schedule/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Create schedule by ID
     * Create operation of resource: schedule
     * @param uuid ID of uuid (required)
     * @param schedule schedulebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextConnectivityContextConnectivityServiceScheduleScheduleById(String uuid, TimeRange schedule) throws ApiException {
        createContextConnectivityContextConnectivityServiceScheduleScheduleByIdWithHttpInfo(uuid, schedule);
    }

    /**
     * Create schedule by ID
     * Create operation of resource: schedule
     * @param uuid ID of uuid (required)
     * @param schedule schedulebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextConnectivityContextConnectivityServiceScheduleScheduleByIdWithHttpInfo(String uuid, TimeRange schedule) throws ApiException {
        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceScheduleScheduleByIdCall(uuid, schedule, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create schedule by ID (asynchronously)
     * Create operation of resource: schedule
     * @param uuid ID of uuid (required)
     * @param schedule schedulebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextConnectivityContextConnectivityServiceScheduleScheduleByIdAsync(String uuid, TimeRange schedule, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextConnectivityContextConnectivityServiceScheduleScheduleByIdCall(uuid, schedule, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for deleteContextConnectivityContextConnectivityContextById */
    private com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityContextByIdCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Delete connectivity-context by ID
     * Delete operation of resource: connectivity-context
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextConnectivityContextConnectivityContextById() throws ApiException {
        deleteContextConnectivityContextConnectivityContextByIdWithHttpInfo();
    }

    /**
     * Delete connectivity-context by ID
     * Delete operation of resource: connectivity-context
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextConnectivityContextConnectivityContextByIdWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityContextByIdCall(null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete connectivity-context by ID (asynchronously)
     * Delete operation of resource: connectivity-context
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityContextByIdAsync(final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityContextByIdCall(progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for deleteContextConnectivityContextConnectivityServiceConnectivityServiceById */
    private com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceConnectivityServiceByIdCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextConnectivityContextConnectivityServiceConnectivityServiceById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Delete connectivity-service by ID
     * Delete operation of resource: connectivity-service
     * @param uuid ID of uuid (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextConnectivityContextConnectivityServiceConnectivityServiceById(String uuid) throws ApiException {
        deleteContextConnectivityContextConnectivityServiceConnectivityServiceByIdWithHttpInfo(uuid);
    }

    /**
     * Delete connectivity-service by ID
     * Delete operation of resource: connectivity-service
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextConnectivityContextConnectivityServiceConnectivityServiceByIdWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceConnectivityServiceByIdCall(uuid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete connectivity-service by ID (asynchronously)
     * Delete operation of resource: connectivity-service
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceConnectivityServiceByIdAsync(String uuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceConnectivityServiceByIdCall(uuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for deleteContextConnectivityContextConnectivityServiceCorouteInclusionCorouteInclusionById */
    private com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceCorouteInclusionCorouteInclusionByIdCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextConnectivityContextConnectivityServiceCorouteInclusionCorouteInclusionById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/coroute-inclusion/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Delete coroute-inclusion by ID
     * Delete operation of resource: coroute-inclusion
     * @param uuid ID of uuid (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextConnectivityContextConnectivityServiceCorouteInclusionCorouteInclusionById(String uuid) throws ApiException {
        deleteContextConnectivityContextConnectivityServiceCorouteInclusionCorouteInclusionByIdWithHttpInfo(uuid);
    }

    /**
     * Delete coroute-inclusion by ID
     * Delete operation of resource: coroute-inclusion
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextConnectivityContextConnectivityServiceCorouteInclusionCorouteInclusionByIdWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceCorouteInclusionCorouteInclusionByIdCall(uuid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete coroute-inclusion by ID (asynchronously)
     * Delete operation of resource: coroute-inclusion
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceCorouteInclusionCorouteInclusionByIdAsync(String uuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceCorouteInclusionCorouteInclusionByIdCall(uuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for deleteContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicById */
    private com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicByIdCall(String uuid, String costName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicById(Async)");
        }
        
        // verify the required parameter 'costName' is set
        if (costName == null) {
            throw new ApiException("Missing the required parameter 'costName' when calling deleteContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/cost-characteristic/{cost_name}/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
        .replaceAll("\\{" + "cost_name" + "\\}", apiClient.escapeString(costName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Delete cost-characteristic by ID
     * Delete operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param costName ID of cost_name (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicById(String uuid, String costName) throws ApiException {
        deleteContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicByIdWithHttpInfo(uuid, costName);
    }

    /**
     * Delete cost-characteristic by ID
     * Delete operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param costName ID of cost_name (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicByIdWithHttpInfo(String uuid, String costName) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicByIdCall(uuid, costName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete cost-characteristic by ID (asynchronously)
     * Delete operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param costName ID of cost_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicByIdAsync(String uuid, String costName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicByIdCall(uuid, costName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for deleteContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionById */
    private com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionByIdCall(String uuid, String connectivityServiceUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionById(Async)");
        }
        
        // verify the required parameter 'connectivityServiceUuid' is set
        if (connectivityServiceUuid == null) {
            throw new ApiException("Missing the required parameter 'connectivityServiceUuid' when calling deleteContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/diversity-exclusion/{connectivity_service_uuid}/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
        .replaceAll("\\{" + "connectivity_service_uuid" + "\\}", apiClient.escapeString(connectivityServiceUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Delete diversity-exclusion by ID
     * Delete operation of resource: diversity-exclusion
     * @param uuid ID of uuid (required)
     * @param connectivityServiceUuid ID of connectivity_service_uuid (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionById(String uuid, String connectivityServiceUuid) throws ApiException {
        deleteContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionByIdWithHttpInfo(uuid, connectivityServiceUuid);
    }

    /**
     * Delete diversity-exclusion by ID
     * Delete operation of resource: diversity-exclusion
     * @param uuid ID of uuid (required)
     * @param connectivityServiceUuid ID of connectivity_service_uuid (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionByIdWithHttpInfo(String uuid, String connectivityServiceUuid) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionByIdCall(uuid, connectivityServiceUuid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete diversity-exclusion by ID (asynchronously)
     * Delete operation of resource: diversity-exclusion
     * @param uuid ID of uuid (required)
     * @param connectivityServiceUuid ID of connectivity_service_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionByIdAsync(String uuid, String connectivityServiceUuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionByIdCall(uuid, connectivityServiceUuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileById */
    private com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/capacity/bandwidth-profile/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
        .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Delete bandwidth-profile by ID
     * Delete operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileById(String uuid, String localId) throws ApiException {
        deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdWithHttpInfo(uuid, localId);
    }

    /**
     * Delete bandwidth-profile by ID
     * Delete operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdWithHttpInfo(String uuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdCall(uuid, localId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete bandwidth-profile by ID (asynchronously)
     * Delete operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdAsync(String uuid, String localId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdCall(uuid, localId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById */
    private com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/capacity/bandwidth-profile/committed-burst-size/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
        .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Delete committed-burst-size by ID
     * Delete operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById(String uuid, String localId) throws ApiException {
        deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdWithHttpInfo(uuid, localId);
    }

    /**
     * Delete committed-burst-size by ID
     * Delete operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdWithHttpInfo(String uuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdCall(uuid, localId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete committed-burst-size by ID (asynchronously)
     * Delete operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdAsync(String uuid, String localId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdCall(uuid, localId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById */
    private com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/capacity/bandwidth-profile/committed-information-rate/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
        .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Delete committed-information-rate by ID
     * Delete operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById(String uuid, String localId) throws ApiException {
        deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdWithHttpInfo(uuid, localId);
    }

    /**
     * Delete committed-information-rate by ID
     * Delete operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdWithHttpInfo(String uuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdCall(uuid, localId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete committed-information-rate by ID (asynchronously)
     * Delete operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdAsync(String uuid, String localId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdCall(uuid, localId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById */
    private com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/capacity/bandwidth-profile/peak-burst-size/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
        .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Delete peak-burst-size by ID
     * Delete operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById(String uuid, String localId) throws ApiException {
        deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdWithHttpInfo(uuid, localId);
    }

    /**
     * Delete peak-burst-size by ID
     * Delete operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdWithHttpInfo(String uuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdCall(uuid, localId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete peak-burst-size by ID (asynchronously)
     * Delete operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdAsync(String uuid, String localId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdCall(uuid, localId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateById */
    private com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/capacity/bandwidth-profile/peak-information-rate/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
        .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Delete peak-information-rate by ID
     * Delete operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateById(String uuid, String localId) throws ApiException {
        deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdWithHttpInfo(uuid, localId);
    }

    /**
     * Delete peak-information-rate by ID
     * Delete operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdWithHttpInfo(String uuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdCall(uuid, localId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete peak-information-rate by ID (asynchronously)
     * Delete operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdAsync(String uuid, String localId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdCall(uuid, localId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for deleteContextConnectivityContextConnectivityServiceEndPointCapacityCapacityById */
    private com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceEndPointCapacityCapacityByIdCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextConnectivityContextConnectivityServiceEndPointCapacityCapacityById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling deleteContextConnectivityContextConnectivityServiceEndPointCapacityCapacityById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/capacity/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
        .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Delete capacity by ID
     * Delete operation of resource: capacity
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextConnectivityContextConnectivityServiceEndPointCapacityCapacityById(String uuid, String localId) throws ApiException {
        deleteContextConnectivityContextConnectivityServiceEndPointCapacityCapacityByIdWithHttpInfo(uuid, localId);
    }

    /**
     * Delete capacity by ID
     * Delete operation of resource: capacity
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextConnectivityContextConnectivityServiceEndPointCapacityCapacityByIdWithHttpInfo(String uuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceEndPointCapacityCapacityByIdCall(uuid, localId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete capacity by ID (asynchronously)
     * Delete operation of resource: capacity
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceEndPointCapacityCapacityByIdAsync(String uuid, String localId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceEndPointCapacityCapacityByIdCall(uuid, localId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for deleteContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeById */
    private com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeByIdCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling deleteContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/capacity/total-size/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
        .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Delete total-size by ID
     * Delete operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeById(String uuid, String localId) throws ApiException {
        deleteContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeByIdWithHttpInfo(uuid, localId);
    }

    /**
     * Delete total-size by ID
     * Delete operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeByIdWithHttpInfo(String uuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeByIdCall(uuid, localId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete total-size by ID (asynchronously)
     * Delete operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeByIdAsync(String uuid, String localId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeByIdCall(uuid, localId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for deleteContextConnectivityContextConnectivityServiceEndPointEndPointById */
    private com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceEndPointEndPointByIdCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextConnectivityContextConnectivityServiceEndPointEndPointById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling deleteContextConnectivityContextConnectivityServiceEndPointEndPointById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
        .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Delete end-point by ID
     * Delete operation of resource: end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextConnectivityContextConnectivityServiceEndPointEndPointById(String uuid, String localId) throws ApiException {
        deleteContextConnectivityContextConnectivityServiceEndPointEndPointByIdWithHttpInfo(uuid, localId);
    }

    /**
     * Delete end-point by ID
     * Delete operation of resource: end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextConnectivityContextConnectivityServiceEndPointEndPointByIdWithHttpInfo(String uuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceEndPointEndPointByIdCall(uuid, localId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete end-point by ID (asynchronously)
     * Delete operation of resource: end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceEndPointEndPointByIdAsync(String uuid, String localId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceEndPointEndPointByIdCall(uuid, localId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for deleteContextConnectivityContextConnectivityServiceEndPointNameNameById */
    private com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceEndPointNameNameByIdCall(String uuid, String localId, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextConnectivityContextConnectivityServiceEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling deleteContextConnectivityContextConnectivityServiceEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling deleteContextConnectivityContextConnectivityServiceEndPointNameNameById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/name/{value_name}/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
        .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
        .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Delete name by ID
     * Delete operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextConnectivityContextConnectivityServiceEndPointNameNameById(String uuid, String localId, String valueName) throws ApiException {
        deleteContextConnectivityContextConnectivityServiceEndPointNameNameByIdWithHttpInfo(uuid, localId, valueName);
    }

    /**
     * Delete name by ID
     * Delete operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextConnectivityContextConnectivityServiceEndPointNameNameByIdWithHttpInfo(String uuid, String localId, String valueName) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceEndPointNameNameByIdCall(uuid, localId, valueName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete name by ID (asynchronously)
     * Delete operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceEndPointNameNameByIdAsync(String uuid, String localId, String valueName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceEndPointNameNameByIdCall(uuid, localId, valueName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for deleteContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById */
    private com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointByIdCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling deleteContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/service-interface-point/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
        .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Delete service-interface-point by ID
     * Delete operation of resource: service-interface-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById(String uuid, String localId) throws ApiException {
        deleteContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointByIdWithHttpInfo(uuid, localId);
    }

    /**
     * Delete service-interface-point by ID
     * Delete operation of resource: service-interface-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointByIdWithHttpInfo(String uuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointByIdCall(uuid, localId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete service-interface-point by ID (asynchronously)
     * Delete operation of resource: service-interface-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointByIdAsync(String uuid, String localId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointByIdCall(uuid, localId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for deleteContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicById */
    private com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicByIdCall(String uuid, String trafficPropertyName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicById(Async)");
        }
        
        // verify the required parameter 'trafficPropertyName' is set
        if (trafficPropertyName == null) {
            throw new ApiException("Missing the required parameter 'trafficPropertyName' when calling deleteContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/latency-characteristic/{traffic_property_name}/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
        .replaceAll("\\{" + "traffic_property_name" + "\\}", apiClient.escapeString(trafficPropertyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Delete latency-characteristic by ID
     * Delete operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicById(String uuid, String trafficPropertyName) throws ApiException {
        deleteContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicByIdWithHttpInfo(uuid, trafficPropertyName);
    }

    /**
     * Delete latency-characteristic by ID
     * Delete operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicByIdWithHttpInfo(String uuid, String trafficPropertyName) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicByIdCall(uuid, trafficPropertyName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete latency-characteristic by ID (asynchronously)
     * Delete operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicByIdAsync(String uuid, String trafficPropertyName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicByIdCall(uuid, trafficPropertyName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for deleteContextConnectivityContextConnectivityServiceNameNameById */
    private com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceNameNameByIdCall(String uuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextConnectivityContextConnectivityServiceNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling deleteContextConnectivityContextConnectivityServiceNameNameById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/name/{value_name}/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
        .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Delete name by ID
     * Delete operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextConnectivityContextConnectivityServiceNameNameById(String uuid, String valueName) throws ApiException {
        deleteContextConnectivityContextConnectivityServiceNameNameByIdWithHttpInfo(uuid, valueName);
    }

    /**
     * Delete name by ID
     * Delete operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextConnectivityContextConnectivityServiceNameNameByIdWithHttpInfo(String uuid, String valueName) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceNameNameByIdCall(uuid, valueName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete name by ID (asynchronously)
     * Delete operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceNameNameByIdAsync(String uuid, String valueName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceNameNameByIdCall(uuid, valueName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileById */
    private com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileByIdCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/requested-capacity/bandwidth-profile/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Delete bandwidth-profile by ID
     * Delete operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileById(String uuid) throws ApiException {
        deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileByIdWithHttpInfo(uuid);
    }

    /**
     * Delete bandwidth-profile by ID
     * Delete operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileByIdWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileByIdCall(uuid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete bandwidth-profile by ID (asynchronously)
     * Delete operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileByIdAsync(String uuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileByIdCall(uuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById */
    private com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/requested-capacity/bandwidth-profile/committed-burst-size/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Delete committed-burst-size by ID
     * Delete operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById(String uuid) throws ApiException {
        deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdWithHttpInfo(uuid);
    }

    /**
     * Delete committed-burst-size by ID
     * Delete operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdCall(uuid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete committed-burst-size by ID (asynchronously)
     * Delete operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdAsync(String uuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdCall(uuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById */
    private com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/requested-capacity/bandwidth-profile/committed-information-rate/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Delete committed-information-rate by ID
     * Delete operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById(String uuid) throws ApiException {
        deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdWithHttpInfo(uuid);
    }

    /**
     * Delete committed-information-rate by ID
     * Delete operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdCall(uuid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete committed-information-rate by ID (asynchronously)
     * Delete operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdAsync(String uuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdCall(uuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById */
    private com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/requested-capacity/bandwidth-profile/peak-burst-size/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Delete peak-burst-size by ID
     * Delete operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById(String uuid) throws ApiException {
        deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdWithHttpInfo(uuid);
    }

    /**
     * Delete peak-burst-size by ID
     * Delete operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdCall(uuid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete peak-burst-size by ID (asynchronously)
     * Delete operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdAsync(String uuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdCall(uuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateById */
    private com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/requested-capacity/bandwidth-profile/peak-information-rate/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Delete peak-information-rate by ID
     * Delete operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateById(String uuid) throws ApiException {
        deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdWithHttpInfo(uuid);
    }

    /**
     * Delete peak-information-rate by ID
     * Delete operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdCall(uuid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete peak-information-rate by ID (asynchronously)
     * Delete operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdAsync(String uuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdCall(uuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for deleteContextConnectivityContextConnectivityServiceRequestedCapacityRequestedCapacityById */
    private com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceRequestedCapacityRequestedCapacityByIdCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextConnectivityContextConnectivityServiceRequestedCapacityRequestedCapacityById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/requested-capacity/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Delete requested-capacity by ID
     * Delete operation of resource: requested-capacity
     * @param uuid ID of uuid (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextConnectivityContextConnectivityServiceRequestedCapacityRequestedCapacityById(String uuid) throws ApiException {
        deleteContextConnectivityContextConnectivityServiceRequestedCapacityRequestedCapacityByIdWithHttpInfo(uuid);
    }

    /**
     * Delete requested-capacity by ID
     * Delete operation of resource: requested-capacity
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextConnectivityContextConnectivityServiceRequestedCapacityRequestedCapacityByIdWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceRequestedCapacityRequestedCapacityByIdCall(uuid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete requested-capacity by ID (asynchronously)
     * Delete operation of resource: requested-capacity
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceRequestedCapacityRequestedCapacityByIdAsync(String uuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceRequestedCapacityRequestedCapacityByIdCall(uuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for deleteContextConnectivityContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeById */
    private com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeByIdCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextConnectivityContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/requested-capacity/total-size/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Delete total-size by ID
     * Delete operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextConnectivityContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeById(String uuid) throws ApiException {
        deleteContextConnectivityContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeByIdWithHttpInfo(uuid);
    }

    /**
     * Delete total-size by ID
     * Delete operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextConnectivityContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeByIdWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeByIdCall(uuid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete total-size by ID (asynchronously)
     * Delete operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeByIdAsync(String uuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeByIdCall(uuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for deleteContextConnectivityContextConnectivityServiceResilienceTypeResilienceTypeById */
    private com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceResilienceTypeResilienceTypeByIdCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextConnectivityContextConnectivityServiceResilienceTypeResilienceTypeById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/resilience-type/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Delete resilience-type by ID
     * Delete operation of resource: resilience-type
     * @param uuid ID of uuid (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextConnectivityContextConnectivityServiceResilienceTypeResilienceTypeById(String uuid) throws ApiException {
        deleteContextConnectivityContextConnectivityServiceResilienceTypeResilienceTypeByIdWithHttpInfo(uuid);
    }

    /**
     * Delete resilience-type by ID
     * Delete operation of resource: resilience-type
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextConnectivityContextConnectivityServiceResilienceTypeResilienceTypeByIdWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceResilienceTypeResilienceTypeByIdCall(uuid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete resilience-type by ID (asynchronously)
     * Delete operation of resource: resilience-type
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceResilienceTypeResilienceTypeByIdAsync(String uuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceResilienceTypeResilienceTypeByIdCall(uuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for deleteContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicById */
    private com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicByIdCall(String uuid, String riskCharacteristicName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicById(Async)");
        }
        
        // verify the required parameter 'riskCharacteristicName' is set
        if (riskCharacteristicName == null) {
            throw new ApiException("Missing the required parameter 'riskCharacteristicName' when calling deleteContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/risk-diversity-characteristic/{risk_characteristic_name}/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
        .replaceAll("\\{" + "risk_characteristic_name" + "\\}", apiClient.escapeString(riskCharacteristicName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Delete risk-diversity-characteristic by ID
     * Delete operation of resource: risk-diversity-characteristic
     * @param uuid ID of uuid (required)
     * @param riskCharacteristicName ID of risk_characteristic_name (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicById(String uuid, String riskCharacteristicName) throws ApiException {
        deleteContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicByIdWithHttpInfo(uuid, riskCharacteristicName);
    }

    /**
     * Delete risk-diversity-characteristic by ID
     * Delete operation of resource: risk-diversity-characteristic
     * @param uuid ID of uuid (required)
     * @param riskCharacteristicName ID of risk_characteristic_name (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicByIdWithHttpInfo(String uuid, String riskCharacteristicName) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicByIdCall(uuid, riskCharacteristicName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete risk-diversity-characteristic by ID (asynchronously)
     * Delete operation of resource: risk-diversity-characteristic
     * @param uuid ID of uuid (required)
     * @param riskCharacteristicName ID of risk_characteristic_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicByIdAsync(String uuid, String riskCharacteristicName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicByIdCall(uuid, riskCharacteristicName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for deleteContextConnectivityContextConnectivityServiceScheduleScheduleById */
    private com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceScheduleScheduleByIdCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextConnectivityContextConnectivityServiceScheduleScheduleById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/schedule/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Delete schedule by ID
     * Delete operation of resource: schedule
     * @param uuid ID of uuid (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextConnectivityContextConnectivityServiceScheduleScheduleById(String uuid) throws ApiException {
        deleteContextConnectivityContextConnectivityServiceScheduleScheduleByIdWithHttpInfo(uuid);
    }

    /**
     * Delete schedule by ID
     * Delete operation of resource: schedule
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextConnectivityContextConnectivityServiceScheduleScheduleByIdWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceScheduleScheduleByIdCall(uuid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete schedule by ID (asynchronously)
     * Delete operation of resource: schedule
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextConnectivityContextConnectivityServiceScheduleScheduleByIdAsync(String uuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextConnectivityContextConnectivityServiceScheduleScheduleByIdCall(uuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for retrieveContextConnectivityContextConnectionConnection */
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionConnectionCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve connection
     * Retrieve operation of resource: connection
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectivityContextConnectionConnection() throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectivityContextConnectionConnectionWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieve connection
     * Retrieve operation of resource: connection
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectivityContextConnectionConnectionWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionConnectionCall(null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve connection (asynchronously)
     * Retrieve operation of resource: connection
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionConnectionAsync(final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionConnectionCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveContextConnectivityContextConnectionConnectionById */
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionConnectionByIdCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectionConnectionById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/{uuid}/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve connection by ID
     * Retrieve operation of resource: connection
     * @param uuid ID of uuid (required)
     * @return Connection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Connection retrieveContextConnectivityContextConnectionConnectionById(String uuid) throws ApiException {
        ApiResponse<Connection> resp = retrieveContextConnectivityContextConnectionConnectionByIdWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve connection by ID
     * Retrieve operation of resource: connection
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;Connection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Connection> retrieveContextConnectivityContextConnectionConnectionByIdWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionConnectionByIdCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<Connection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve connection by ID (asynchronously)
     * Retrieve operation of resource: connection
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionConnectionByIdAsync(String uuid, final ApiCallback<Connection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionConnectionByIdCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Connection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveContextConnectivityContextConnectionConnectionEndPointConnectionEndPoint */
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionConnectionEndPointConnectionEndPointCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectionConnectionEndPointConnectionEndPoint(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/{uuid}/connection-end-point/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve connection-end-point
     * Retrieve operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectivityContextConnectionConnectionEndPointConnectionEndPoint(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectivityContextConnectionConnectionEndPointConnectionEndPointWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve connection-end-point
     * Retrieve operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectivityContextConnectionConnectionEndPointConnectionEndPointWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionConnectionEndPointConnectionEndPointCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve connection-end-point (asynchronously)
     * Retrieve operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionConnectionEndPointConnectionEndPointAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionConnectionEndPointConnectionEndPointCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveContextConnectivityContextConnectionConnectionEndPointConnectionEndPointById */
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionConnectionEndPointConnectionEndPointByIdCall(String uuid, String topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectionConnectionEndPointConnectionEndPointById(Async)");
        }
        
        // verify the required parameter 'topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid' is set
        if (topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid' when calling retrieveContextConnectivityContextConnectionConnectionEndPointConnectionEndPointById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/{uuid}/connection-end-point/{topology_uuid_node_uuid_node_edge_point_uuid_connection_end_point_uuid}/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
        .replaceAll("\\{" + "topology_uuid_node_uuid_node_edge_point_uuid_connection_end_point_uuid" + "\\}", apiClient.escapeString(topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve connection-end-point by ID
     * Retrieve operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid ID of topology_uuid_node_uuid_node_edge_point_uuid_connection_end_point_uuid (required)
     * @return ConnectionEndPointRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConnectionEndPointRef retrieveContextConnectivityContextConnectionConnectionEndPointConnectionEndPointById(String uuid, String topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid) throws ApiException {
        ApiResponse<ConnectionEndPointRef> resp = retrieveContextConnectivityContextConnectionConnectionEndPointConnectionEndPointByIdWithHttpInfo(uuid, topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid);
        return resp.getData();
    }

    /**
     * Retrieve connection-end-point by ID
     * Retrieve operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid ID of topology_uuid_node_uuid_node_edge_point_uuid_connection_end_point_uuid (required)
     * @return ApiResponse&lt;ConnectionEndPointRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConnectionEndPointRef> retrieveContextConnectivityContextConnectionConnectionEndPointConnectionEndPointByIdWithHttpInfo(String uuid, String topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionConnectionEndPointConnectionEndPointByIdCall(uuid, topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid, null, null);
        Type localVarReturnType = new TypeToken<ConnectionEndPointRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve connection-end-point by ID (asynchronously)
     * Retrieve operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid ID of topology_uuid_node_uuid_node_edge_point_uuid_connection_end_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionConnectionEndPointConnectionEndPointByIdAsync(String uuid, String topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid, final ApiCallback<ConnectionEndPointRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionConnectionEndPointConnectionEndPointByIdCall(uuid, topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConnectionEndPointRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveContextConnectivityContextConnectionLowerConnectionLowerConnection */
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionLowerConnectionLowerConnectionCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectionLowerConnectionLowerConnection(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/{uuid}/lower-connection/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve lower-connection
     * Retrieve operation of resource: lower-connection
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectivityContextConnectionLowerConnectionLowerConnection(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectivityContextConnectionLowerConnectionLowerConnectionWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve lower-connection
     * Retrieve operation of resource: lower-connection
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectivityContextConnectionLowerConnectionLowerConnectionWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionLowerConnectionLowerConnectionCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve lower-connection (asynchronously)
     * Retrieve operation of resource: lower-connection
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionLowerConnectionLowerConnectionAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionLowerConnectionLowerConnectionCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveContextConnectivityContextConnectionLowerConnectionLowerConnectionById */
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionLowerConnectionLowerConnectionByIdCall(String uuid, String connectionUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectionLowerConnectionLowerConnectionById(Async)");
        }
        
        // verify the required parameter 'connectionUuid' is set
        if (connectionUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionUuid' when calling retrieveContextConnectivityContextConnectionLowerConnectionLowerConnectionById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/{uuid}/lower-connection/{connection_uuid}/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
        .replaceAll("\\{" + "connection_uuid" + "\\}", apiClient.escapeString(connectionUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve lower-connection by ID
     * Retrieve operation of resource: lower-connection
     * @param uuid ID of uuid (required)
     * @param connectionUuid ID of connection_uuid (required)
     * @return ConnectionRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConnectionRef retrieveContextConnectivityContextConnectionLowerConnectionLowerConnectionById(String uuid, String connectionUuid) throws ApiException {
        ApiResponse<ConnectionRef> resp = retrieveContextConnectivityContextConnectionLowerConnectionLowerConnectionByIdWithHttpInfo(uuid, connectionUuid);
        return resp.getData();
    }

    /**
     * Retrieve lower-connection by ID
     * Retrieve operation of resource: lower-connection
     * @param uuid ID of uuid (required)
     * @param connectionUuid ID of connection_uuid (required)
     * @return ApiResponse&lt;ConnectionRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConnectionRef> retrieveContextConnectivityContextConnectionLowerConnectionLowerConnectionByIdWithHttpInfo(String uuid, String connectionUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionLowerConnectionLowerConnectionByIdCall(uuid, connectionUuid, null, null);
        Type localVarReturnType = new TypeToken<ConnectionRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve lower-connection by ID (asynchronously)
     * Retrieve operation of resource: lower-connection
     * @param uuid ID of uuid (required)
     * @param connectionUuid ID of connection_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionLowerConnectionLowerConnectionByIdAsync(String uuid, String connectionUuid, final ApiCallback<ConnectionRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionLowerConnectionLowerConnectionByIdCall(uuid, connectionUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConnectionRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveContextConnectivityContextConnectionNameName */
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionNameNameCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectionNameName(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/{uuid}/name/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectivityContextConnectionNameName(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectivityContextConnectionNameNameWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectivityContextConnectionNameNameWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionNameNameCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionNameNameAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionNameNameCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveContextConnectivityContextConnectionNameNameById */
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionNameNameByIdCall(String uuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectionNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling retrieveContextConnectivityContextConnectionNameNameById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/{uuid}/name/{value_name}/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
        .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @return NameAndValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NameAndValue retrieveContextConnectivityContextConnectionNameNameById(String uuid, String valueName) throws ApiException {
        ApiResponse<NameAndValue> resp = retrieveContextConnectivityContextConnectionNameNameByIdWithHttpInfo(uuid, valueName);
        return resp.getData();
    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @return ApiResponse&lt;NameAndValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NameAndValue> retrieveContextConnectivityContextConnectionNameNameByIdWithHttpInfo(String uuid, String valueName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionNameNameByIdCall(uuid, valueName, null, null);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name by ID (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionNameNameByIdAsync(String uuid, String valueName, final ApiCallback<NameAndValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionNameNameByIdCall(uuid, valueName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPoint */
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPoint(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPoint(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/{uuid}/route/{local_id}/connection-end-point/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
        .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve connection-end-point
     * Retrieve operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPoint(String uuid, String localId) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointWithHttpInfo(uuid, localId);
        return resp.getData();
    }

    /**
     * Retrieve connection-end-point
     * Retrieve operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointWithHttpInfo(String uuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointCall(uuid, localId, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve connection-end-point (asynchronously)
     * Retrieve operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointAsync(String uuid, String localId, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointCall(uuid, localId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointById */
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointByIdCall(String uuid, String localId, String topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointById(Async)");
        }
        
        // verify the required parameter 'topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid' is set
        if (topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid' when calling retrieveContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/{uuid}/route/{local_id}/connection-end-point/{topology_uuid_node_uuid_node_edge_point_uuid_connection_end_point_uuid}/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
        .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
        .replaceAll("\\{" + "topology_uuid_node_uuid_node_edge_point_uuid_connection_end_point_uuid" + "\\}", apiClient.escapeString(topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve connection-end-point by ID
     * Retrieve operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid ID of topology_uuid_node_uuid_node_edge_point_uuid_connection_end_point_uuid (required)
     * @return ConnectionEndPointRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConnectionEndPointRef retrieveContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointById(String uuid, String localId, String topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid) throws ApiException {
        ApiResponse<ConnectionEndPointRef> resp = retrieveContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointByIdWithHttpInfo(uuid, localId, topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid);
        return resp.getData();
    }

    /**
     * Retrieve connection-end-point by ID
     * Retrieve operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid ID of topology_uuid_node_uuid_node_edge_point_uuid_connection_end_point_uuid (required)
     * @return ApiResponse&lt;ConnectionEndPointRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConnectionEndPointRef> retrieveContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointByIdWithHttpInfo(String uuid, String localId, String topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointByIdCall(uuid, localId, topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid, null, null);
        Type localVarReturnType = new TypeToken<ConnectionEndPointRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve connection-end-point by ID (asynchronously)
     * Retrieve operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid ID of topology_uuid_node_uuid_node_edge_point_uuid_connection_end_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointByIdAsync(String uuid, String localId, String topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid, final ApiCallback<ConnectionEndPointRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointByIdCall(uuid, localId, topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConnectionEndPointRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveContextConnectivityContextConnectionRouteNameName */
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionRouteNameNameCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectionRouteNameName(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityContextConnectionRouteNameName(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/{uuid}/route/{local_id}/name/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
        .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectivityContextConnectionRouteNameName(String uuid, String localId) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectivityContextConnectionRouteNameNameWithHttpInfo(uuid, localId);
        return resp.getData();
    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectivityContextConnectionRouteNameNameWithHttpInfo(String uuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionRouteNameNameCall(uuid, localId, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionRouteNameNameAsync(String uuid, String localId, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionRouteNameNameCall(uuid, localId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveContextConnectivityContextConnectionRouteNameNameById */
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionRouteNameNameByIdCall(String uuid, String localId, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectionRouteNameNameById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityContextConnectionRouteNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling retrieveContextConnectivityContextConnectionRouteNameNameById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/{uuid}/route/{local_id}/name/{value_name}/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
        .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
        .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @return NameAndValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NameAndValue retrieveContextConnectivityContextConnectionRouteNameNameById(String uuid, String localId, String valueName) throws ApiException {
        ApiResponse<NameAndValue> resp = retrieveContextConnectivityContextConnectionRouteNameNameByIdWithHttpInfo(uuid, localId, valueName);
        return resp.getData();
    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @return ApiResponse&lt;NameAndValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NameAndValue> retrieveContextConnectivityContextConnectionRouteNameNameByIdWithHttpInfo(String uuid, String localId, String valueName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionRouteNameNameByIdCall(uuid, localId, valueName, null, null);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name by ID (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionRouteNameNameByIdAsync(String uuid, String localId, String valueName, final ApiCallback<NameAndValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionRouteNameNameByIdCall(uuid, localId, valueName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveContextConnectivityContextConnectionRouteRoute */
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionRouteRouteCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectionRouteRoute(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/{uuid}/route/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve route
     * Retrieve operation of resource: route
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectivityContextConnectionRouteRoute(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectivityContextConnectionRouteRouteWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve route
     * Retrieve operation of resource: route
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectivityContextConnectionRouteRouteWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionRouteRouteCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve route (asynchronously)
     * Retrieve operation of resource: route
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionRouteRouteAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionRouteRouteCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveContextConnectivityContextConnectionRouteRouteById */
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionRouteRouteByIdCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectionRouteRouteById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityContextConnectionRouteRouteById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/{uuid}/route/{local_id}/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
        .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve route by ID
     * Retrieve operation of resource: route
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return Route
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Route retrieveContextConnectivityContextConnectionRouteRouteById(String uuid, String localId) throws ApiException {
        ApiResponse<Route> resp = retrieveContextConnectivityContextConnectionRouteRouteByIdWithHttpInfo(uuid, localId);
        return resp.getData();
    }

    /**
     * Retrieve route by ID
     * Retrieve operation of resource: route
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;Route&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Route> retrieveContextConnectivityContextConnectionRouteRouteByIdWithHttpInfo(String uuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionRouteRouteByIdCall(uuid, localId, null, null);
        Type localVarReturnType = new TypeToken<Route>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve route by ID (asynchronously)
     * Retrieve operation of resource: route
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionRouteRouteByIdAsync(String uuid, String localId, final ApiCallback<Route> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionRouteRouteByIdCall(uuid, localId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Route>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveContextConnectivityContextConnectionSupportedClientLinkSupportedClientLink */
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionSupportedClientLinkSupportedClientLinkCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectionSupportedClientLinkSupportedClientLink(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/{uuid}/supported-client-link/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve supported-client-link
     * Retrieve operation of resource: supported-client-link
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectivityContextConnectionSupportedClientLinkSupportedClientLink(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectivityContextConnectionSupportedClientLinkSupportedClientLinkWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve supported-client-link
     * Retrieve operation of resource: supported-client-link
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectivityContextConnectionSupportedClientLinkSupportedClientLinkWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionSupportedClientLinkSupportedClientLinkCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve supported-client-link (asynchronously)
     * Retrieve operation of resource: supported-client-link
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionSupportedClientLinkSupportedClientLinkAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionSupportedClientLinkSupportedClientLinkCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveContextConnectivityContextConnectionSupportedClientLinkSupportedClientLinkById */
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionSupportedClientLinkSupportedClientLinkByIdCall(String uuid, String topologyUuidLinkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectionSupportedClientLinkSupportedClientLinkById(Async)");
        }
        
        // verify the required parameter 'topologyUuidLinkUuid' is set
        if (topologyUuidLinkUuid == null) {
            throw new ApiException("Missing the required parameter 'topologyUuidLinkUuid' when calling retrieveContextConnectivityContextConnectionSupportedClientLinkSupportedClientLinkById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/{uuid}/supported-client-link/{topology_uuid_link_uuid}/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
        .replaceAll("\\{" + "topology_uuid_link_uuid" + "\\}", apiClient.escapeString(topologyUuidLinkUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve supported-client-link by ID
     * Retrieve operation of resource: supported-client-link
     * @param uuid ID of uuid (required)
     * @param topologyUuidLinkUuid ID of topology_uuid_link_uuid (required)
     * @return LinkRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LinkRef retrieveContextConnectivityContextConnectionSupportedClientLinkSupportedClientLinkById(String uuid, String topologyUuidLinkUuid) throws ApiException {
        ApiResponse<LinkRef> resp = retrieveContextConnectivityContextConnectionSupportedClientLinkSupportedClientLinkByIdWithHttpInfo(uuid, topologyUuidLinkUuid);
        return resp.getData();
    }

    /**
     * Retrieve supported-client-link by ID
     * Retrieve operation of resource: supported-client-link
     * @param uuid ID of uuid (required)
     * @param topologyUuidLinkUuid ID of topology_uuid_link_uuid (required)
     * @return ApiResponse&lt;LinkRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LinkRef> retrieveContextConnectivityContextConnectionSupportedClientLinkSupportedClientLinkByIdWithHttpInfo(String uuid, String topologyUuidLinkUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionSupportedClientLinkSupportedClientLinkByIdCall(uuid, topologyUuidLinkUuid, null, null);
        Type localVarReturnType = new TypeToken<LinkRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve supported-client-link by ID (asynchronously)
     * Retrieve operation of resource: supported-client-link
     * @param uuid ID of uuid (required)
     * @param topologyUuidLinkUuid ID of topology_uuid_link_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionSupportedClientLinkSupportedClientLinkByIdAsync(String uuid, String topologyUuidLinkUuid, final ApiCallback<LinkRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionSupportedClientLinkSupportedClientLinkByIdCall(uuid, topologyUuidLinkUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LinkRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveContextConnectivityContextConnectionSwitchControlNameName */
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionSwitchControlNameNameCall(String uuid, String switchControlUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectionSwitchControlNameName(Async)");
        }
        
        // verify the required parameter 'switchControlUuid' is set
        if (switchControlUuid == null) {
            throw new ApiException("Missing the required parameter 'switchControlUuid' when calling retrieveContextConnectivityContextConnectionSwitchControlNameName(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/{uuid}/switch-control/{switch_control_uuid}/name/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
        .replaceAll("\\{" + "switch_control_uuid" + "\\}", apiClient.escapeString(switchControlUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectivityContextConnectionSwitchControlNameName(String uuid, String switchControlUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectivityContextConnectionSwitchControlNameNameWithHttpInfo(uuid, switchControlUuid);
        return resp.getData();
    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectivityContextConnectionSwitchControlNameNameWithHttpInfo(String uuid, String switchControlUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionSwitchControlNameNameCall(uuid, switchControlUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionSwitchControlNameNameAsync(String uuid, String switchControlUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionSwitchControlNameNameCall(uuid, switchControlUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveContextConnectivityContextConnectionSwitchControlNameNameById */
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionSwitchControlNameNameByIdCall(String uuid, String switchControlUuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectionSwitchControlNameNameById(Async)");
        }
        
        // verify the required parameter 'switchControlUuid' is set
        if (switchControlUuid == null) {
            throw new ApiException("Missing the required parameter 'switchControlUuid' when calling retrieveContextConnectivityContextConnectionSwitchControlNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling retrieveContextConnectivityContextConnectionSwitchControlNameNameById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/{uuid}/switch-control/{switch_control_uuid}/name/{value_name}/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
        .replaceAll("\\{" + "switch_control_uuid" + "\\}", apiClient.escapeString(switchControlUuid.toString()))
        .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param valueName ID of value_name (required)
     * @return NameAndValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NameAndValue retrieveContextConnectivityContextConnectionSwitchControlNameNameById(String uuid, String switchControlUuid, String valueName) throws ApiException {
        ApiResponse<NameAndValue> resp = retrieveContextConnectivityContextConnectionSwitchControlNameNameByIdWithHttpInfo(uuid, switchControlUuid, valueName);
        return resp.getData();
    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param valueName ID of value_name (required)
     * @return ApiResponse&lt;NameAndValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NameAndValue> retrieveContextConnectivityContextConnectionSwitchControlNameNameByIdWithHttpInfo(String uuid, String switchControlUuid, String valueName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionSwitchControlNameNameByIdCall(uuid, switchControlUuid, valueName, null, null);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name by ID (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param valueName ID of value_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionSwitchControlNameNameByIdAsync(String uuid, String switchControlUuid, String valueName, final ApiCallback<NameAndValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionSwitchControlNameNameByIdCall(uuid, switchControlUuid, valueName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveContextConnectivityContextConnectionSwitchControlResilienceTypeResilienceType */
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionSwitchControlResilienceTypeResilienceTypeCall(String uuid, String switchControlUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectionSwitchControlResilienceTypeResilienceType(Async)");
        }
        
        // verify the required parameter 'switchControlUuid' is set
        if (switchControlUuid == null) {
            throw new ApiException("Missing the required parameter 'switchControlUuid' when calling retrieveContextConnectivityContextConnectionSwitchControlResilienceTypeResilienceType(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/{uuid}/switch-control/{switch_control_uuid}/resilience-type/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
        .replaceAll("\\{" + "switch_control_uuid" + "\\}", apiClient.escapeString(switchControlUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve resilience-type
     * Retrieve operation of resource: resilience-type
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @return ResilienceType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResilienceType retrieveContextConnectivityContextConnectionSwitchControlResilienceTypeResilienceType(String uuid, String switchControlUuid) throws ApiException {
        ApiResponse<ResilienceType> resp = retrieveContextConnectivityContextConnectionSwitchControlResilienceTypeResilienceTypeWithHttpInfo(uuid, switchControlUuid);
        return resp.getData();
    }

    /**
     * Retrieve resilience-type
     * Retrieve operation of resource: resilience-type
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @return ApiResponse&lt;ResilienceType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResilienceType> retrieveContextConnectivityContextConnectionSwitchControlResilienceTypeResilienceTypeWithHttpInfo(String uuid, String switchControlUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionSwitchControlResilienceTypeResilienceTypeCall(uuid, switchControlUuid, null, null);
        Type localVarReturnType = new TypeToken<ResilienceType>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve resilience-type (asynchronously)
     * Retrieve operation of resource: resilience-type
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionSwitchControlResilienceTypeResilienceTypeAsync(String uuid, String switchControlUuid, final ApiCallback<ResilienceType> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionSwitchControlResilienceTypeResilienceTypeCall(uuid, switchControlUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResilienceType>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveContextConnectivityContextConnectionSwitchControlSubSwitchControlSubSwitchControl */
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionSwitchControlSubSwitchControlSubSwitchControlCall(String uuid, String switchControlUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectionSwitchControlSubSwitchControlSubSwitchControl(Async)");
        }
        
        // verify the required parameter 'switchControlUuid' is set
        if (switchControlUuid == null) {
            throw new ApiException("Missing the required parameter 'switchControlUuid' when calling retrieveContextConnectivityContextConnectionSwitchControlSubSwitchControlSubSwitchControl(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/{uuid}/switch-control/{switch_control_uuid}/sub-switch-control/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
        .replaceAll("\\{" + "switch_control_uuid" + "\\}", apiClient.escapeString(switchControlUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve sub-switch-control
     * Retrieve operation of resource: sub-switch-control
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectivityContextConnectionSwitchControlSubSwitchControlSubSwitchControl(String uuid, String switchControlUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectivityContextConnectionSwitchControlSubSwitchControlSubSwitchControlWithHttpInfo(uuid, switchControlUuid);
        return resp.getData();
    }

    /**
     * Retrieve sub-switch-control
     * Retrieve operation of resource: sub-switch-control
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectivityContextConnectionSwitchControlSubSwitchControlSubSwitchControlWithHttpInfo(String uuid, String switchControlUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionSwitchControlSubSwitchControlSubSwitchControlCall(uuid, switchControlUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve sub-switch-control (asynchronously)
     * Retrieve operation of resource: sub-switch-control
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionSwitchControlSubSwitchControlSubSwitchControlAsync(String uuid, String switchControlUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionSwitchControlSubSwitchControlSubSwitchControlCall(uuid, switchControlUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveContextConnectivityContextConnectionSwitchControlSubSwitchControlSubSwitchControlById */
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionSwitchControlSubSwitchControlSubSwitchControlByIdCall(String uuid, String switchControlUuid, String connectionUuidSwitchControlUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectionSwitchControlSubSwitchControlSubSwitchControlById(Async)");
        }
        
        // verify the required parameter 'switchControlUuid' is set
        if (switchControlUuid == null) {
            throw new ApiException("Missing the required parameter 'switchControlUuid' when calling retrieveContextConnectivityContextConnectionSwitchControlSubSwitchControlSubSwitchControlById(Async)");
        }
        
        // verify the required parameter 'connectionUuidSwitchControlUuid' is set
        if (connectionUuidSwitchControlUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionUuidSwitchControlUuid' when calling retrieveContextConnectivityContextConnectionSwitchControlSubSwitchControlSubSwitchControlById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/{uuid}/switch-control/{switch_control_uuid}/sub-switch-control/{connection_uuid_switch_control_uuid}/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
        .replaceAll("\\{" + "switch_control_uuid" + "\\}", apiClient.escapeString(switchControlUuid.toString()))
        .replaceAll("\\{" + "connection_uuid_switch_control_uuid" + "\\}", apiClient.escapeString(connectionUuidSwitchControlUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve sub-switch-control by ID
     * Retrieve operation of resource: sub-switch-control
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param connectionUuidSwitchControlUuid ID of connection_uuid_switch_control_uuid (required)
     * @return SwitchControlRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SwitchControlRef retrieveContextConnectivityContextConnectionSwitchControlSubSwitchControlSubSwitchControlById(String uuid, String switchControlUuid, String connectionUuidSwitchControlUuid) throws ApiException {
        ApiResponse<SwitchControlRef> resp = retrieveContextConnectivityContextConnectionSwitchControlSubSwitchControlSubSwitchControlByIdWithHttpInfo(uuid, switchControlUuid, connectionUuidSwitchControlUuid);
        return resp.getData();
    }

    /**
     * Retrieve sub-switch-control by ID
     * Retrieve operation of resource: sub-switch-control
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param connectionUuidSwitchControlUuid ID of connection_uuid_switch_control_uuid (required)
     * @return ApiResponse&lt;SwitchControlRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SwitchControlRef> retrieveContextConnectivityContextConnectionSwitchControlSubSwitchControlSubSwitchControlByIdWithHttpInfo(String uuid, String switchControlUuid, String connectionUuidSwitchControlUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionSwitchControlSubSwitchControlSubSwitchControlByIdCall(uuid, switchControlUuid, connectionUuidSwitchControlUuid, null, null);
        Type localVarReturnType = new TypeToken<SwitchControlRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve sub-switch-control by ID (asynchronously)
     * Retrieve operation of resource: sub-switch-control
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param connectionUuidSwitchControlUuid ID of connection_uuid_switch_control_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionSwitchControlSubSwitchControlSubSwitchControlByIdAsync(String uuid, String switchControlUuid, String connectionUuidSwitchControlUuid, final ApiCallback<SwitchControlRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionSwitchControlSubSwitchControlSubSwitchControlByIdCall(uuid, switchControlUuid, connectionUuidSwitchControlUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SwitchControlRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveContextConnectivityContextConnectionSwitchControlSwitchControl */
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionSwitchControlSwitchControlCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectionSwitchControlSwitchControl(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/{uuid}/switch-control/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve switch-control
     * Retrieve operation of resource: switch-control
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectivityContextConnectionSwitchControlSwitchControl(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectivityContextConnectionSwitchControlSwitchControlWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve switch-control
     * Retrieve operation of resource: switch-control
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectivityContextConnectionSwitchControlSwitchControlWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionSwitchControlSwitchControlCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve switch-control (asynchronously)
     * Retrieve operation of resource: switch-control
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionSwitchControlSwitchControlAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionSwitchControlSwitchControlCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveContextConnectivityContextConnectionSwitchControlSwitchControlById */
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionSwitchControlSwitchControlByIdCall(String uuid, String switchControlUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectionSwitchControlSwitchControlById(Async)");
        }
        
        // verify the required parameter 'switchControlUuid' is set
        if (switchControlUuid == null) {
            throw new ApiException("Missing the required parameter 'switchControlUuid' when calling retrieveContextConnectivityContextConnectionSwitchControlSwitchControlById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/{uuid}/switch-control/{switch_control_uuid}/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
        .replaceAll("\\{" + "switch_control_uuid" + "\\}", apiClient.escapeString(switchControlUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve switch-control by ID
     * Retrieve operation of resource: switch-control
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @return SwitchControl
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SwitchControl retrieveContextConnectivityContextConnectionSwitchControlSwitchControlById(String uuid, String switchControlUuid) throws ApiException {
        ApiResponse<SwitchControl> resp = retrieveContextConnectivityContextConnectionSwitchControlSwitchControlByIdWithHttpInfo(uuid, switchControlUuid);
        return resp.getData();
    }

    /**
     * Retrieve switch-control by ID
     * Retrieve operation of resource: switch-control
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @return ApiResponse&lt;SwitchControl&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SwitchControl> retrieveContextConnectivityContextConnectionSwitchControlSwitchControlByIdWithHttpInfo(String uuid, String switchControlUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionSwitchControlSwitchControlByIdCall(uuid, switchControlUuid, null, null);
        Type localVarReturnType = new TypeToken<SwitchControl>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve switch-control by ID (asynchronously)
     * Retrieve operation of resource: switch-control
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionSwitchControlSwitchControlByIdAsync(String uuid, String switchControlUuid, final ApiCallback<SwitchControl> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionSwitchControlSwitchControlByIdCall(uuid, switchControlUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SwitchControl>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveContextConnectivityContextConnectionSwitchControlSwitchNameName */
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionSwitchControlSwitchNameNameCall(String uuid, String switchControlUuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectionSwitchControlSwitchNameName(Async)");
        }
        
        // verify the required parameter 'switchControlUuid' is set
        if (switchControlUuid == null) {
            throw new ApiException("Missing the required parameter 'switchControlUuid' when calling retrieveContextConnectivityContextConnectionSwitchControlSwitchNameName(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityContextConnectionSwitchControlSwitchNameName(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/{uuid}/switch-control/{switch_control_uuid}/switch/{local_id}/name/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
        .replaceAll("\\{" + "switch_control_uuid" + "\\}", apiClient.escapeString(switchControlUuid.toString()))
        .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param localId ID of local_id (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectivityContextConnectionSwitchControlSwitchNameName(String uuid, String switchControlUuid, String localId) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectivityContextConnectionSwitchControlSwitchNameNameWithHttpInfo(uuid, switchControlUuid, localId);
        return resp.getData();
    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectivityContextConnectionSwitchControlSwitchNameNameWithHttpInfo(String uuid, String switchControlUuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionSwitchControlSwitchNameNameCall(uuid, switchControlUuid, localId, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionSwitchControlSwitchNameNameAsync(String uuid, String switchControlUuid, String localId, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionSwitchControlSwitchNameNameCall(uuid, switchControlUuid, localId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveContextConnectivityContextConnectionSwitchControlSwitchNameNameById */
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionSwitchControlSwitchNameNameByIdCall(String uuid, String switchControlUuid, String localId, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectionSwitchControlSwitchNameNameById(Async)");
        }
        
        // verify the required parameter 'switchControlUuid' is set
        if (switchControlUuid == null) {
            throw new ApiException("Missing the required parameter 'switchControlUuid' when calling retrieveContextConnectivityContextConnectionSwitchControlSwitchNameNameById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityContextConnectionSwitchControlSwitchNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling retrieveContextConnectivityContextConnectionSwitchControlSwitchNameNameById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/{uuid}/switch-control/{switch_control_uuid}/switch/{local_id}/name/{value_name}/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
        .replaceAll("\\{" + "switch_control_uuid" + "\\}", apiClient.escapeString(switchControlUuid.toString()))
        .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
        .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @return NameAndValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NameAndValue retrieveContextConnectivityContextConnectionSwitchControlSwitchNameNameById(String uuid, String switchControlUuid, String localId, String valueName) throws ApiException {
        ApiResponse<NameAndValue> resp = retrieveContextConnectivityContextConnectionSwitchControlSwitchNameNameByIdWithHttpInfo(uuid, switchControlUuid, localId, valueName);
        return resp.getData();
    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @return ApiResponse&lt;NameAndValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NameAndValue> retrieveContextConnectivityContextConnectionSwitchControlSwitchNameNameByIdWithHttpInfo(String uuid, String switchControlUuid, String localId, String valueName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionSwitchControlSwitchNameNameByIdCall(uuid, switchControlUuid, localId, valueName, null, null);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name by ID (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionSwitchControlSwitchNameNameByIdAsync(String uuid, String switchControlUuid, String localId, String valueName, final ApiCallback<NameAndValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionSwitchControlSwitchNameNameByIdCall(uuid, switchControlUuid, localId, valueName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedConnectionEndPointSelectedConnectionEndPoint */
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedConnectionEndPointSelectedConnectionEndPointCall(String uuid, String switchControlUuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedConnectionEndPointSelectedConnectionEndPoint(Async)");
        }
        
        // verify the required parameter 'switchControlUuid' is set
        if (switchControlUuid == null) {
            throw new ApiException("Missing the required parameter 'switchControlUuid' when calling retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedConnectionEndPointSelectedConnectionEndPoint(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedConnectionEndPointSelectedConnectionEndPoint(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/{uuid}/switch-control/{switch_control_uuid}/switch/{local_id}/selected-connection-end-point/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
        .replaceAll("\\{" + "switch_control_uuid" + "\\}", apiClient.escapeString(switchControlUuid.toString()))
        .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve selected-connection-end-point
     * Retrieve operation of resource: selected-connection-end-point
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param localId ID of local_id (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedConnectionEndPointSelectedConnectionEndPoint(String uuid, String switchControlUuid, String localId) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedConnectionEndPointSelectedConnectionEndPointWithHttpInfo(uuid, switchControlUuid, localId);
        return resp.getData();
    }

    /**
     * Retrieve selected-connection-end-point
     * Retrieve operation of resource: selected-connection-end-point
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedConnectionEndPointSelectedConnectionEndPointWithHttpInfo(String uuid, String switchControlUuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedConnectionEndPointSelectedConnectionEndPointCall(uuid, switchControlUuid, localId, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve selected-connection-end-point (asynchronously)
     * Retrieve operation of resource: selected-connection-end-point
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedConnectionEndPointSelectedConnectionEndPointAsync(String uuid, String switchControlUuid, String localId, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedConnectionEndPointSelectedConnectionEndPointCall(uuid, switchControlUuid, localId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedConnectionEndPointSelectedConnectionEndPointById */
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedConnectionEndPointSelectedConnectionEndPointByIdCall(String uuid, String switchControlUuid, String localId, String topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedConnectionEndPointSelectedConnectionEndPointById(Async)");
        }
        
        // verify the required parameter 'switchControlUuid' is set
        if (switchControlUuid == null) {
            throw new ApiException("Missing the required parameter 'switchControlUuid' when calling retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedConnectionEndPointSelectedConnectionEndPointById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedConnectionEndPointSelectedConnectionEndPointById(Async)");
        }
        
        // verify the required parameter 'topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid' is set
        if (topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid' when calling retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedConnectionEndPointSelectedConnectionEndPointById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/{uuid}/switch-control/{switch_control_uuid}/switch/{local_id}/selected-connection-end-point/{topology_uuid_node_uuid_node_edge_point_uuid_connection_end_point_uuid}/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
        .replaceAll("\\{" + "switch_control_uuid" + "\\}", apiClient.escapeString(switchControlUuid.toString()))
        .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
        .replaceAll("\\{" + "topology_uuid_node_uuid_node_edge_point_uuid_connection_end_point_uuid" + "\\}", apiClient.escapeString(topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve selected-connection-end-point by ID
     * Retrieve operation of resource: selected-connection-end-point
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param localId ID of local_id (required)
     * @param topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid ID of topology_uuid_node_uuid_node_edge_point_uuid_connection_end_point_uuid (required)
     * @return ConnectionEndPointRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConnectionEndPointRef retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedConnectionEndPointSelectedConnectionEndPointById(String uuid, String switchControlUuid, String localId, String topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid) throws ApiException {
        ApiResponse<ConnectionEndPointRef> resp = retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedConnectionEndPointSelectedConnectionEndPointByIdWithHttpInfo(uuid, switchControlUuid, localId, topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid);
        return resp.getData();
    }

    /**
     * Retrieve selected-connection-end-point by ID
     * Retrieve operation of resource: selected-connection-end-point
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param localId ID of local_id (required)
     * @param topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid ID of topology_uuid_node_uuid_node_edge_point_uuid_connection_end_point_uuid (required)
     * @return ApiResponse&lt;ConnectionEndPointRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConnectionEndPointRef> retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedConnectionEndPointSelectedConnectionEndPointByIdWithHttpInfo(String uuid, String switchControlUuid, String localId, String topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedConnectionEndPointSelectedConnectionEndPointByIdCall(uuid, switchControlUuid, localId, topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid, null, null);
        Type localVarReturnType = new TypeToken<ConnectionEndPointRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve selected-connection-end-point by ID (asynchronously)
     * Retrieve operation of resource: selected-connection-end-point
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param localId ID of local_id (required)
     * @param topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid ID of topology_uuid_node_uuid_node_edge_point_uuid_connection_end_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedConnectionEndPointSelectedConnectionEndPointByIdAsync(String uuid, String switchControlUuid, String localId, String topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid, final ApiCallback<ConnectionEndPointRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedConnectionEndPointSelectedConnectionEndPointByIdCall(uuid, switchControlUuid, localId, topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConnectionEndPointRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedRouteSelectedRoute */
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedRouteSelectedRouteCall(String uuid, String switchControlUuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedRouteSelectedRoute(Async)");
        }
        
        // verify the required parameter 'switchControlUuid' is set
        if (switchControlUuid == null) {
            throw new ApiException("Missing the required parameter 'switchControlUuid' when calling retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedRouteSelectedRoute(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedRouteSelectedRoute(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/{uuid}/switch-control/{switch_control_uuid}/switch/{local_id}/selected-route/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
        .replaceAll("\\{" + "switch_control_uuid" + "\\}", apiClient.escapeString(switchControlUuid.toString()))
        .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve selected-route
     * Retrieve operation of resource: selected-route
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param localId ID of local_id (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedRouteSelectedRoute(String uuid, String switchControlUuid, String localId) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedRouteSelectedRouteWithHttpInfo(uuid, switchControlUuid, localId);
        return resp.getData();
    }

    /**
     * Retrieve selected-route
     * Retrieve operation of resource: selected-route
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedRouteSelectedRouteWithHttpInfo(String uuid, String switchControlUuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedRouteSelectedRouteCall(uuid, switchControlUuid, localId, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve selected-route (asynchronously)
     * Retrieve operation of resource: selected-route
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedRouteSelectedRouteAsync(String uuid, String switchControlUuid, String localId, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedRouteSelectedRouteCall(uuid, switchControlUuid, localId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedRouteSelectedRouteById */
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedRouteSelectedRouteByIdCall(String uuid, String switchControlUuid, String localId, String connectionUuidRouteLocalId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedRouteSelectedRouteById(Async)");
        }
        
        // verify the required parameter 'switchControlUuid' is set
        if (switchControlUuid == null) {
            throw new ApiException("Missing the required parameter 'switchControlUuid' when calling retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedRouteSelectedRouteById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedRouteSelectedRouteById(Async)");
        }
        
        // verify the required parameter 'connectionUuidRouteLocalId' is set
        if (connectionUuidRouteLocalId == null) {
            throw new ApiException("Missing the required parameter 'connectionUuidRouteLocalId' when calling retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedRouteSelectedRouteById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/{uuid}/switch-control/{switch_control_uuid}/switch/{local_id}/selected-route/{connection_uuid_route_local_id}/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
        .replaceAll("\\{" + "switch_control_uuid" + "\\}", apiClient.escapeString(switchControlUuid.toString()))
        .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
        .replaceAll("\\{" + "connection_uuid_route_local_id" + "\\}", apiClient.escapeString(connectionUuidRouteLocalId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve selected-route by ID
     * Retrieve operation of resource: selected-route
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionUuidRouteLocalId ID of connection_uuid_route_local_id (required)
     * @return RouteRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RouteRef retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedRouteSelectedRouteById(String uuid, String switchControlUuid, String localId, String connectionUuidRouteLocalId) throws ApiException {
        ApiResponse<RouteRef> resp = retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedRouteSelectedRouteByIdWithHttpInfo(uuid, switchControlUuid, localId, connectionUuidRouteLocalId);
        return resp.getData();
    }

    /**
     * Retrieve selected-route by ID
     * Retrieve operation of resource: selected-route
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionUuidRouteLocalId ID of connection_uuid_route_local_id (required)
     * @return ApiResponse&lt;RouteRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RouteRef> retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedRouteSelectedRouteByIdWithHttpInfo(String uuid, String switchControlUuid, String localId, String connectionUuidRouteLocalId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedRouteSelectedRouteByIdCall(uuid, switchControlUuid, localId, connectionUuidRouteLocalId, null, null);
        Type localVarReturnType = new TypeToken<RouteRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve selected-route by ID (asynchronously)
     * Retrieve operation of resource: selected-route
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param localId ID of local_id (required)
     * @param connectionUuidRouteLocalId ID of connection_uuid_route_local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedRouteSelectedRouteByIdAsync(String uuid, String switchControlUuid, String localId, String connectionUuidRouteLocalId, final ApiCallback<RouteRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedRouteSelectedRouteByIdCall(uuid, switchControlUuid, localId, connectionUuidRouteLocalId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RouteRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveContextConnectivityContextConnectionSwitchControlSwitchSwitch */
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionSwitchControlSwitchSwitchCall(String uuid, String switchControlUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectionSwitchControlSwitchSwitch(Async)");
        }
        
        // verify the required parameter 'switchControlUuid' is set
        if (switchControlUuid == null) {
            throw new ApiException("Missing the required parameter 'switchControlUuid' when calling retrieveContextConnectivityContextConnectionSwitchControlSwitchSwitch(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/{uuid}/switch-control/{switch_control_uuid}/switch/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
        .replaceAll("\\{" + "switch_control_uuid" + "\\}", apiClient.escapeString(switchControlUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve switch
     * Retrieve operation of resource: switch
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectivityContextConnectionSwitchControlSwitchSwitch(String uuid, String switchControlUuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectivityContextConnectionSwitchControlSwitchSwitchWithHttpInfo(uuid, switchControlUuid);
        return resp.getData();
    }

    /**
     * Retrieve switch
     * Retrieve operation of resource: switch
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectivityContextConnectionSwitchControlSwitchSwitchWithHttpInfo(String uuid, String switchControlUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionSwitchControlSwitchSwitchCall(uuid, switchControlUuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve switch (asynchronously)
     * Retrieve operation of resource: switch
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionSwitchControlSwitchSwitchAsync(String uuid, String switchControlUuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionSwitchControlSwitchSwitchCall(uuid, switchControlUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveContextConnectivityContextConnectionSwitchControlSwitchSwitchById */
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionSwitchControlSwitchSwitchByIdCall(String uuid, String switchControlUuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectionSwitchControlSwitchSwitchById(Async)");
        }
        
        // verify the required parameter 'switchControlUuid' is set
        if (switchControlUuid == null) {
            throw new ApiException("Missing the required parameter 'switchControlUuid' when calling retrieveContextConnectivityContextConnectionSwitchControlSwitchSwitchById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityContextConnectionSwitchControlSwitchSwitchById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connection/{uuid}/switch-control/{switch_control_uuid}/switch/{local_id}/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
        .replaceAll("\\{" + "switch_control_uuid" + "\\}", apiClient.escapeString(switchControlUuid.toString()))
        .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve switch by ID
     * Retrieve operation of resource: switch
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param localId ID of local_id (required)
     * @return ModelSwitch
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelSwitch retrieveContextConnectivityContextConnectionSwitchControlSwitchSwitchById(String uuid, String switchControlUuid, String localId) throws ApiException {
        ApiResponse<ModelSwitch> resp = retrieveContextConnectivityContextConnectionSwitchControlSwitchSwitchByIdWithHttpInfo(uuid, switchControlUuid, localId);
        return resp.getData();
    }

    /**
     * Retrieve switch by ID
     * Retrieve operation of resource: switch
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;ModelSwitch&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelSwitch> retrieveContextConnectivityContextConnectionSwitchControlSwitchSwitchByIdWithHttpInfo(String uuid, String switchControlUuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionSwitchControlSwitchSwitchByIdCall(uuid, switchControlUuid, localId, null, null);
        Type localVarReturnType = new TypeToken<ModelSwitch>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve switch by ID (asynchronously)
     * Retrieve operation of resource: switch
     * @param uuid ID of uuid (required)
     * @param switchControlUuid ID of switch_control_uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectionSwitchControlSwitchSwitchByIdAsync(String uuid, String switchControlUuid, String localId, final ApiCallback<ModelSwitch> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectionSwitchControlSwitchSwitchByIdCall(uuid, switchControlUuid, localId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelSwitch>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveContextConnectivityContextConnectivityContext */
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityContextCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve connectivity-context
     * Retrieve operation of resource: connectivity-context
     * @return ConnectivityContext
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConnectivityContext retrieveContextConnectivityContextConnectivityContext() throws ApiException {
        ApiResponse<ConnectivityContext> resp = retrieveContextConnectivityContextConnectivityContextWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieve connectivity-context
     * Retrieve operation of resource: connectivity-context
     * @return ApiResponse&lt;ConnectivityContext&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConnectivityContext> retrieveContextConnectivityContextConnectivityContextWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityContextCall(null, null);
        Type localVarReturnType = new TypeToken<ConnectivityContext>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve connectivity-context (asynchronously)
     * Retrieve operation of resource: connectivity-context
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityContextAsync(final ApiCallback<ConnectivityContext> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityContextCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConnectivityContext>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveContextConnectivityContextConnectivityServiceAvoidTopologyAvoidTopology */
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceAvoidTopologyAvoidTopologyCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceAvoidTopologyAvoidTopology(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/avoid-topology/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve avoid-topology
     * Retrieve operation of resource: avoid-topology
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectivityContextConnectivityServiceAvoidTopologyAvoidTopology(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectivityContextConnectivityServiceAvoidTopologyAvoidTopologyWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve avoid-topology
     * Retrieve operation of resource: avoid-topology
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectivityContextConnectivityServiceAvoidTopologyAvoidTopologyWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceAvoidTopologyAvoidTopologyCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve avoid-topology (asynchronously)
     * Retrieve operation of resource: avoid-topology
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceAvoidTopologyAvoidTopologyAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceAvoidTopologyAvoidTopologyCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveContextConnectivityContextConnectivityServiceAvoidTopologyAvoidTopologyById */
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceAvoidTopologyAvoidTopologyByIdCall(String uuid, String topologyUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceAvoidTopologyAvoidTopologyById(Async)");
        }
        
        // verify the required parameter 'topologyUuid' is set
        if (topologyUuid == null) {
            throw new ApiException("Missing the required parameter 'topologyUuid' when calling retrieveContextConnectivityContextConnectivityServiceAvoidTopologyAvoidTopologyById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/avoid-topology/{topology_uuid}/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
        .replaceAll("\\{" + "topology_uuid" + "\\}", apiClient.escapeString(topologyUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve avoid-topology by ID
     * Retrieve operation of resource: avoid-topology
     * @param uuid ID of uuid (required)
     * @param topologyUuid ID of topology_uuid (required)
     * @return TopologyRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TopologyRef retrieveContextConnectivityContextConnectivityServiceAvoidTopologyAvoidTopologyById(String uuid, String topologyUuid) throws ApiException {
        ApiResponse<TopologyRef> resp = retrieveContextConnectivityContextConnectivityServiceAvoidTopologyAvoidTopologyByIdWithHttpInfo(uuid, topologyUuid);
        return resp.getData();
    }

    /**
     * Retrieve avoid-topology by ID
     * Retrieve operation of resource: avoid-topology
     * @param uuid ID of uuid (required)
     * @param topologyUuid ID of topology_uuid (required)
     * @return ApiResponse&lt;TopologyRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TopologyRef> retrieveContextConnectivityContextConnectivityServiceAvoidTopologyAvoidTopologyByIdWithHttpInfo(String uuid, String topologyUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceAvoidTopologyAvoidTopologyByIdCall(uuid, topologyUuid, null, null);
        Type localVarReturnType = new TypeToken<TopologyRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve avoid-topology by ID (asynchronously)
     * Retrieve operation of resource: avoid-topology
     * @param uuid ID of uuid (required)
     * @param topologyUuid ID of topology_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceAvoidTopologyAvoidTopologyByIdAsync(String uuid, String topologyUuid, final ApiCallback<TopologyRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceAvoidTopologyAvoidTopologyByIdCall(uuid, topologyUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TopologyRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveContextConnectivityContextConnectivityServiceConnectionConnection */
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceConnectionConnectionCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceConnectionConnection(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/connection/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve connection
     * Retrieve operation of resource: connection
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectivityContextConnectivityServiceConnectionConnection(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectivityContextConnectivityServiceConnectionConnectionWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve connection
     * Retrieve operation of resource: connection
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectivityContextConnectivityServiceConnectionConnectionWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceConnectionConnectionCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve connection (asynchronously)
     * Retrieve operation of resource: connection
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceConnectionConnectionAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceConnectionConnectionCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveContextConnectivityContextConnectivityServiceConnectionConnectionById */
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceConnectionConnectionByIdCall(String uuid, String connectionUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceConnectionConnectionById(Async)");
        }
        
        // verify the required parameter 'connectionUuid' is set
        if (connectionUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionUuid' when calling retrieveContextConnectivityContextConnectivityServiceConnectionConnectionById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/connection/{connection_uuid}/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
        .replaceAll("\\{" + "connection_uuid" + "\\}", apiClient.escapeString(connectionUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve connection by ID
     * Retrieve operation of resource: connection
     * @param uuid ID of uuid (required)
     * @param connectionUuid ID of connection_uuid (required)
     * @return ConnectionRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConnectionRef retrieveContextConnectivityContextConnectivityServiceConnectionConnectionById(String uuid, String connectionUuid) throws ApiException {
        ApiResponse<ConnectionRef> resp = retrieveContextConnectivityContextConnectivityServiceConnectionConnectionByIdWithHttpInfo(uuid, connectionUuid);
        return resp.getData();
    }

    /**
     * Retrieve connection by ID
     * Retrieve operation of resource: connection
     * @param uuid ID of uuid (required)
     * @param connectionUuid ID of connection_uuid (required)
     * @return ApiResponse&lt;ConnectionRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConnectionRef> retrieveContextConnectivityContextConnectivityServiceConnectionConnectionByIdWithHttpInfo(String uuid, String connectionUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceConnectionConnectionByIdCall(uuid, connectionUuid, null, null);
        Type localVarReturnType = new TypeToken<ConnectionRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve connection by ID (asynchronously)
     * Retrieve operation of resource: connection
     * @param uuid ID of uuid (required)
     * @param connectionUuid ID of connection_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceConnectionConnectionByIdAsync(String uuid, String connectionUuid, final ApiCallback<ConnectionRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceConnectionConnectionByIdCall(uuid, connectionUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConnectionRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveContextConnectivityContextConnectivityServiceConnectivityService */
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceConnectivityServiceCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve connectivity-service
     * Retrieve operation of resource: connectivity-service
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectivityContextConnectivityServiceConnectivityService() throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectivityContextConnectivityServiceConnectivityServiceWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieve connectivity-service
     * Retrieve operation of resource: connectivity-service
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectivityContextConnectivityServiceConnectivityServiceWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceConnectivityServiceCall(null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve connectivity-service (asynchronously)
     * Retrieve operation of resource: connectivity-service
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceConnectivityServiceAsync(final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceConnectivityServiceCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveContextConnectivityContextConnectivityServiceConnectivityServiceById */
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceConnectivityServiceByIdCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceConnectivityServiceById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve connectivity-service by ID
     * Retrieve operation of resource: connectivity-service
     * @param uuid ID of uuid (required)
     * @return ConnectivityService
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConnectivityService retrieveContextConnectivityContextConnectivityServiceConnectivityServiceById(String uuid) throws ApiException {
        ApiResponse<ConnectivityService> resp = retrieveContextConnectivityContextConnectivityServiceConnectivityServiceByIdWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve connectivity-service by ID
     * Retrieve operation of resource: connectivity-service
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;ConnectivityService&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConnectivityService> retrieveContextConnectivityContextConnectivityServiceConnectivityServiceByIdWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceConnectivityServiceByIdCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<ConnectivityService>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve connectivity-service by ID (asynchronously)
     * Retrieve operation of resource: connectivity-service
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceConnectivityServiceByIdAsync(String uuid, final ApiCallback<ConnectivityService> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceConnectivityServiceByIdCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConnectivityService>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveContextConnectivityContextConnectivityServiceCorouteInclusionCorouteInclusion */
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceCorouteInclusionCorouteInclusionCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceCorouteInclusionCorouteInclusion(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/coroute-inclusion/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve coroute-inclusion
     * Retrieve operation of resource: coroute-inclusion
     * @param uuid ID of uuid (required)
     * @return ConnectivityServiceRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConnectivityServiceRef retrieveContextConnectivityContextConnectivityServiceCorouteInclusionCorouteInclusion(String uuid) throws ApiException {
        ApiResponse<ConnectivityServiceRef> resp = retrieveContextConnectivityContextConnectivityServiceCorouteInclusionCorouteInclusionWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve coroute-inclusion
     * Retrieve operation of resource: coroute-inclusion
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;ConnectivityServiceRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConnectivityServiceRef> retrieveContextConnectivityContextConnectivityServiceCorouteInclusionCorouteInclusionWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceCorouteInclusionCorouteInclusionCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<ConnectivityServiceRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve coroute-inclusion (asynchronously)
     * Retrieve operation of resource: coroute-inclusion
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceCorouteInclusionCorouteInclusionAsync(String uuid, final ApiCallback<ConnectivityServiceRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceCorouteInclusionCorouteInclusionCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConnectivityServiceRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristic */
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristic(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/cost-characteristic/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve cost-characteristic
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristic(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve cost-characteristic
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve cost-characteristic (asynchronously)
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicById */
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicByIdCall(String uuid, String costName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicById(Async)");
        }
        
        // verify the required parameter 'costName' is set
        if (costName == null) {
            throw new ApiException("Missing the required parameter 'costName' when calling retrieveContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/cost-characteristic/{cost_name}/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
        .replaceAll("\\{" + "cost_name" + "\\}", apiClient.escapeString(costName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve cost-characteristic by ID
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param costName ID of cost_name (required)
     * @return CostCharacteristic
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CostCharacteristic retrieveContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicById(String uuid, String costName) throws ApiException {
        ApiResponse<CostCharacteristic> resp = retrieveContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicByIdWithHttpInfo(uuid, costName);
        return resp.getData();
    }

    /**
     * Retrieve cost-characteristic by ID
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param costName ID of cost_name (required)
     * @return ApiResponse&lt;CostCharacteristic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CostCharacteristic> retrieveContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicByIdWithHttpInfo(String uuid, String costName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicByIdCall(uuid, costName, null, null);
        Type localVarReturnType = new TypeToken<CostCharacteristic>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve cost-characteristic by ID (asynchronously)
     * Retrieve operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param costName ID of cost_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicByIdAsync(String uuid, String costName, final ApiCallback<CostCharacteristic> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicByIdCall(uuid, costName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CostCharacteristic>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusion */
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusion(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/diversity-exclusion/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve diversity-exclusion
     * Retrieve operation of resource: diversity-exclusion
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusion(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve diversity-exclusion
     * Retrieve operation of resource: diversity-exclusion
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve diversity-exclusion (asynchronously)
     * Retrieve operation of resource: diversity-exclusion
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionById */
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionByIdCall(String uuid, String connectivityServiceUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionById(Async)");
        }
        
        // verify the required parameter 'connectivityServiceUuid' is set
        if (connectivityServiceUuid == null) {
            throw new ApiException("Missing the required parameter 'connectivityServiceUuid' when calling retrieveContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/diversity-exclusion/{connectivity_service_uuid}/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
        .replaceAll("\\{" + "connectivity_service_uuid" + "\\}", apiClient.escapeString(connectivityServiceUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve diversity-exclusion by ID
     * Retrieve operation of resource: diversity-exclusion
     * @param uuid ID of uuid (required)
     * @param connectivityServiceUuid ID of connectivity_service_uuid (required)
     * @return ConnectivityServiceRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConnectivityServiceRef retrieveContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionById(String uuid, String connectivityServiceUuid) throws ApiException {
        ApiResponse<ConnectivityServiceRef> resp = retrieveContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionByIdWithHttpInfo(uuid, connectivityServiceUuid);
        return resp.getData();
    }

    /**
     * Retrieve diversity-exclusion by ID
     * Retrieve operation of resource: diversity-exclusion
     * @param uuid ID of uuid (required)
     * @param connectivityServiceUuid ID of connectivity_service_uuid (required)
     * @return ApiResponse&lt;ConnectivityServiceRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConnectivityServiceRef> retrieveContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionByIdWithHttpInfo(String uuid, String connectivityServiceUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionByIdCall(uuid, connectivityServiceUuid, null, null);
        Type localVarReturnType = new TypeToken<ConnectivityServiceRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve diversity-exclusion by ID (asynchronously)
     * Retrieve operation of resource: diversity-exclusion
     * @param uuid ID of uuid (required)
     * @param connectivityServiceUuid ID of connectivity_service_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionByIdAsync(String uuid, String connectivityServiceUuid, final ApiCallback<ConnectivityServiceRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionByIdCall(uuid, connectivityServiceUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConnectivityServiceRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfile */
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/capacity/bandwidth-profile/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
        .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve bandwidth-profile
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return BandwidthProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BandwidthProfile retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfile(String uuid, String localId) throws ApiException {
        ApiResponse<BandwidthProfile> resp = retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileWithHttpInfo(uuid, localId);
        return resp.getData();
    }

    /**
     * Retrieve bandwidth-profile
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;BandwidthProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BandwidthProfile> retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileWithHttpInfo(String uuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileCall(uuid, localId, null, null);
        Type localVarReturnType = new TypeToken<BandwidthProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve bandwidth-profile (asynchronously)
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileAsync(String uuid, String localId, final ApiCallback<BandwidthProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileCall(uuid, localId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BandwidthProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize */
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/capacity/bandwidth-profile/committed-burst-size/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
        .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve committed-burst-size
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(String uuid, String localId) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeWithHttpInfo(uuid, localId);
        return resp.getData();
    }

    /**
     * Retrieve committed-burst-size
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeWithHttpInfo(String uuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeCall(uuid, localId, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve committed-burst-size (asynchronously)
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeAsync(String uuid, String localId, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeCall(uuid, localId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate */
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/capacity/bandwidth-profile/committed-information-rate/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
        .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve committed-information-rate
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(String uuid, String localId) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateWithHttpInfo(uuid, localId);
        return resp.getData();
    }

    /**
     * Retrieve committed-information-rate
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateWithHttpInfo(String uuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateCall(uuid, localId, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve committed-information-rate (asynchronously)
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateAsync(String uuid, String localId, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateCall(uuid, localId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSize */
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/capacity/bandwidth-profile/peak-burst-size/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
        .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve peak-burst-size
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSize(String uuid, String localId) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeWithHttpInfo(uuid, localId);
        return resp.getData();
    }

    /**
     * Retrieve peak-burst-size
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeWithHttpInfo(String uuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeCall(uuid, localId, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve peak-burst-size (asynchronously)
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeAsync(String uuid, String localId, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeCall(uuid, localId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRate */
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/capacity/bandwidth-profile/peak-information-rate/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
        .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve peak-information-rate
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRate(String uuid, String localId) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateWithHttpInfo(uuid, localId);
        return resp.getData();
    }

    /**
     * Retrieve peak-information-rate
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateWithHttpInfo(String uuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateCall(uuid, localId, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve peak-information-rate (asynchronously)
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateAsync(String uuid, String localId, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateCall(uuid, localId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveContextConnectivityContextConnectivityServiceEndPointCapacityCapacity */
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointCapacityCapacityCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceEndPointCapacityCapacity(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityContextConnectivityServiceEndPointCapacityCapacity(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/capacity/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
        .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve capacity
     * Retrieve operation of resource: capacity
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return Capacity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Capacity retrieveContextConnectivityContextConnectivityServiceEndPointCapacityCapacity(String uuid, String localId) throws ApiException {
        ApiResponse<Capacity> resp = retrieveContextConnectivityContextConnectivityServiceEndPointCapacityCapacityWithHttpInfo(uuid, localId);
        return resp.getData();
    }

    /**
     * Retrieve capacity
     * Retrieve operation of resource: capacity
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;Capacity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Capacity> retrieveContextConnectivityContextConnectivityServiceEndPointCapacityCapacityWithHttpInfo(String uuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointCapacityCapacityCall(uuid, localId, null, null);
        Type localVarReturnType = new TypeToken<Capacity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve capacity (asynchronously)
     * Retrieve operation of resource: capacity
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointCapacityCapacityAsync(String uuid, String localId, final ApiCallback<Capacity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointCapacityCapacityCall(uuid, localId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Capacity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSize */
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSize(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSize(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/capacity/total-size/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
        .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve total-size
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSize(String uuid, String localId) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeWithHttpInfo(uuid, localId);
        return resp.getData();
    }

    /**
     * Retrieve total-size
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeWithHttpInfo(String uuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeCall(uuid, localId, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve total-size (asynchronously)
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeAsync(String uuid, String localId, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeCall(uuid, localId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPoint */
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPoint(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPoint(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/connection-end-point/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
        .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve connection-end-point
     * Retrieve operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPoint(String uuid, String localId) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointWithHttpInfo(uuid, localId);
        return resp.getData();
    }

    /**
     * Retrieve connection-end-point
     * Retrieve operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointWithHttpInfo(String uuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointCall(uuid, localId, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve connection-end-point (asynchronously)
     * Retrieve operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointAsync(String uuid, String localId, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointCall(uuid, localId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointById */
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointByIdCall(String uuid, String localId, String topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointById(Async)");
        }
        
        // verify the required parameter 'topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid' is set
        if (topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid == null) {
            throw new ApiException("Missing the required parameter 'topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid' when calling retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/connection-end-point/{topology_uuid_node_uuid_node_edge_point_uuid_connection_end_point_uuid}/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
        .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
        .replaceAll("\\{" + "topology_uuid_node_uuid_node_edge_point_uuid_connection_end_point_uuid" + "\\}", apiClient.escapeString(topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve connection-end-point by ID
     * Retrieve operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid ID of topology_uuid_node_uuid_node_edge_point_uuid_connection_end_point_uuid (required)
     * @return ConnectionEndPointRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConnectionEndPointRef retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointById(String uuid, String localId, String topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid) throws ApiException {
        ApiResponse<ConnectionEndPointRef> resp = retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointByIdWithHttpInfo(uuid, localId, topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid);
        return resp.getData();
    }

    /**
     * Retrieve connection-end-point by ID
     * Retrieve operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid ID of topology_uuid_node_uuid_node_edge_point_uuid_connection_end_point_uuid (required)
     * @return ApiResponse&lt;ConnectionEndPointRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConnectionEndPointRef> retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointByIdWithHttpInfo(String uuid, String localId, String topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointByIdCall(uuid, localId, topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid, null, null);
        Type localVarReturnType = new TypeToken<ConnectionEndPointRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve connection-end-point by ID (asynchronously)
     * Retrieve operation of resource: connection-end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid ID of topology_uuid_node_uuid_node_edge_point_uuid_connection_end_point_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointByIdAsync(String uuid, String localId, String topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid, final ApiCallback<ConnectionEndPointRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointByIdCall(uuid, localId, topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConnectionEndPointRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveContextConnectivityContextConnectivityServiceEndPointEndPoint */
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointEndPointCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceEndPointEndPoint(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve end-point
     * Retrieve operation of resource: end-point
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectivityContextConnectivityServiceEndPointEndPoint(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectivityContextConnectivityServiceEndPointEndPointWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve end-point
     * Retrieve operation of resource: end-point
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectivityContextConnectivityServiceEndPointEndPointWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointEndPointCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve end-point (asynchronously)
     * Retrieve operation of resource: end-point
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointEndPointAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointEndPointCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveContextConnectivityContextConnectivityServiceEndPointEndPointById */
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointEndPointByIdCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceEndPointEndPointById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityContextConnectivityServiceEndPointEndPointById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
        .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve end-point by ID
     * Retrieve operation of resource: end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return ConnectivityServiceEndPoint
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConnectivityServiceEndPoint retrieveContextConnectivityContextConnectivityServiceEndPointEndPointById(String uuid, String localId) throws ApiException {
        ApiResponse<ConnectivityServiceEndPoint> resp = retrieveContextConnectivityContextConnectivityServiceEndPointEndPointByIdWithHttpInfo(uuid, localId);
        return resp.getData();
    }

    /**
     * Retrieve end-point by ID
     * Retrieve operation of resource: end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;ConnectivityServiceEndPoint&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConnectivityServiceEndPoint> retrieveContextConnectivityContextConnectivityServiceEndPointEndPointByIdWithHttpInfo(String uuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointEndPointByIdCall(uuid, localId, null, null);
        Type localVarReturnType = new TypeToken<ConnectivityServiceEndPoint>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve end-point by ID (asynchronously)
     * Retrieve operation of resource: end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointEndPointByIdAsync(String uuid, String localId, final ApiCallback<ConnectivityServiceEndPoint> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointEndPointByIdCall(uuid, localId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConnectivityServiceEndPoint>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveContextConnectivityContextConnectivityServiceEndPointNameName */
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointNameNameCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceEndPointNameName(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityContextConnectivityServiceEndPointNameName(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/name/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
        .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectivityContextConnectivityServiceEndPointNameName(String uuid, String localId) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectivityContextConnectivityServiceEndPointNameNameWithHttpInfo(uuid, localId);
        return resp.getData();
    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectivityContextConnectivityServiceEndPointNameNameWithHttpInfo(String uuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointNameNameCall(uuid, localId, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointNameNameAsync(String uuid, String localId, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointNameNameCall(uuid, localId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveContextConnectivityContextConnectivityServiceEndPointNameNameById */
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointNameNameByIdCall(String uuid, String localId, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityContextConnectivityServiceEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling retrieveContextConnectivityContextConnectivityServiceEndPointNameNameById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/name/{value_name}/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
        .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
        .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @return NameAndValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NameAndValue retrieveContextConnectivityContextConnectivityServiceEndPointNameNameById(String uuid, String localId, String valueName) throws ApiException {
        ApiResponse<NameAndValue> resp = retrieveContextConnectivityContextConnectivityServiceEndPointNameNameByIdWithHttpInfo(uuid, localId, valueName);
        return resp.getData();
    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @return ApiResponse&lt;NameAndValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NameAndValue> retrieveContextConnectivityContextConnectivityServiceEndPointNameNameByIdWithHttpInfo(String uuid, String localId, String valueName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointNameNameByIdCall(uuid, localId, valueName, null, null);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name by ID (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointNameNameByIdAsync(String uuid, String localId, String valueName, final ApiCallback<NameAndValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointNameNameByIdCall(uuid, localId, valueName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePoint */
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointCall(String uuid, String localId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePoint(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePoint(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/service-interface-point/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
        .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve service-interface-point
     * Retrieve operation of resource: service-interface-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return ServiceInterfacePointRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ServiceInterfacePointRef retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePoint(String uuid, String localId) throws ApiException {
        ApiResponse<ServiceInterfacePointRef> resp = retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointWithHttpInfo(uuid, localId);
        return resp.getData();
    }

    /**
     * Retrieve service-interface-point
     * Retrieve operation of resource: service-interface-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @return ApiResponse&lt;ServiceInterfacePointRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ServiceInterfacePointRef> retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointWithHttpInfo(String uuid, String localId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointCall(uuid, localId, null, null);
        Type localVarReturnType = new TypeToken<ServiceInterfacePointRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve service-interface-point (asynchronously)
     * Retrieve operation of resource: service-interface-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointAsync(String uuid, String localId, final ApiCallback<ServiceInterfacePointRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointCall(uuid, localId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ServiceInterfacePointRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveContextConnectivityContextConnectivityServiceExcludeLinkExcludeLink */
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceExcludeLinkExcludeLinkCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceExcludeLinkExcludeLink(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/exclude-link/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve exclude-link
     * Retrieve operation of resource: exclude-link
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectivityContextConnectivityServiceExcludeLinkExcludeLink(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectivityContextConnectivityServiceExcludeLinkExcludeLinkWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve exclude-link
     * Retrieve operation of resource: exclude-link
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectivityContextConnectivityServiceExcludeLinkExcludeLinkWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceExcludeLinkExcludeLinkCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve exclude-link (asynchronously)
     * Retrieve operation of resource: exclude-link
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceExcludeLinkExcludeLinkAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceExcludeLinkExcludeLinkCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveContextConnectivityContextConnectivityServiceExcludeLinkExcludeLinkById */
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceExcludeLinkExcludeLinkByIdCall(String uuid, String topologyUuidLinkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceExcludeLinkExcludeLinkById(Async)");
        }
        
        // verify the required parameter 'topologyUuidLinkUuid' is set
        if (topologyUuidLinkUuid == null) {
            throw new ApiException("Missing the required parameter 'topologyUuidLinkUuid' when calling retrieveContextConnectivityContextConnectivityServiceExcludeLinkExcludeLinkById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/exclude-link/{topology_uuid_link_uuid}/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
        .replaceAll("\\{" + "topology_uuid_link_uuid" + "\\}", apiClient.escapeString(topologyUuidLinkUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve exclude-link by ID
     * Retrieve operation of resource: exclude-link
     * @param uuid ID of uuid (required)
     * @param topologyUuidLinkUuid ID of topology_uuid_link_uuid (required)
     * @return LinkRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LinkRef retrieveContextConnectivityContextConnectivityServiceExcludeLinkExcludeLinkById(String uuid, String topologyUuidLinkUuid) throws ApiException {
        ApiResponse<LinkRef> resp = retrieveContextConnectivityContextConnectivityServiceExcludeLinkExcludeLinkByIdWithHttpInfo(uuid, topologyUuidLinkUuid);
        return resp.getData();
    }

    /**
     * Retrieve exclude-link by ID
     * Retrieve operation of resource: exclude-link
     * @param uuid ID of uuid (required)
     * @param topologyUuidLinkUuid ID of topology_uuid_link_uuid (required)
     * @return ApiResponse&lt;LinkRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LinkRef> retrieveContextConnectivityContextConnectivityServiceExcludeLinkExcludeLinkByIdWithHttpInfo(String uuid, String topologyUuidLinkUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceExcludeLinkExcludeLinkByIdCall(uuid, topologyUuidLinkUuid, null, null);
        Type localVarReturnType = new TypeToken<LinkRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve exclude-link by ID (asynchronously)
     * Retrieve operation of resource: exclude-link
     * @param uuid ID of uuid (required)
     * @param topologyUuidLinkUuid ID of topology_uuid_link_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceExcludeLinkExcludeLinkByIdAsync(String uuid, String topologyUuidLinkUuid, final ApiCallback<LinkRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceExcludeLinkExcludeLinkByIdCall(uuid, topologyUuidLinkUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LinkRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveContextConnectivityContextConnectivityServiceExcludeNodeExcludeNode */
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceExcludeNodeExcludeNodeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceExcludeNodeExcludeNode(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/exclude-node/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve exclude-node
     * Retrieve operation of resource: exclude-node
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectivityContextConnectivityServiceExcludeNodeExcludeNode(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectivityContextConnectivityServiceExcludeNodeExcludeNodeWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve exclude-node
     * Retrieve operation of resource: exclude-node
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectivityContextConnectivityServiceExcludeNodeExcludeNodeWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceExcludeNodeExcludeNodeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve exclude-node (asynchronously)
     * Retrieve operation of resource: exclude-node
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceExcludeNodeExcludeNodeAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceExcludeNodeExcludeNodeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveContextConnectivityContextConnectivityServiceExcludeNodeExcludeNodeById */
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceExcludeNodeExcludeNodeByIdCall(String uuid, String topologyUuidNodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceExcludeNodeExcludeNodeById(Async)");
        }
        
        // verify the required parameter 'topologyUuidNodeUuid' is set
        if (topologyUuidNodeUuid == null) {
            throw new ApiException("Missing the required parameter 'topologyUuidNodeUuid' when calling retrieveContextConnectivityContextConnectivityServiceExcludeNodeExcludeNodeById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/exclude-node/{topology_uuid_node_uuid}/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
        .replaceAll("\\{" + "topology_uuid_node_uuid" + "\\}", apiClient.escapeString(topologyUuidNodeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve exclude-node by ID
     * Retrieve operation of resource: exclude-node
     * @param uuid ID of uuid (required)
     * @param topologyUuidNodeUuid ID of topology_uuid_node_uuid (required)
     * @return NodeRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeRef retrieveContextConnectivityContextConnectivityServiceExcludeNodeExcludeNodeById(String uuid, String topologyUuidNodeUuid) throws ApiException {
        ApiResponse<NodeRef> resp = retrieveContextConnectivityContextConnectivityServiceExcludeNodeExcludeNodeByIdWithHttpInfo(uuid, topologyUuidNodeUuid);
        return resp.getData();
    }

    /**
     * Retrieve exclude-node by ID
     * Retrieve operation of resource: exclude-node
     * @param uuid ID of uuid (required)
     * @param topologyUuidNodeUuid ID of topology_uuid_node_uuid (required)
     * @return ApiResponse&lt;NodeRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeRef> retrieveContextConnectivityContextConnectivityServiceExcludeNodeExcludeNodeByIdWithHttpInfo(String uuid, String topologyUuidNodeUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceExcludeNodeExcludeNodeByIdCall(uuid, topologyUuidNodeUuid, null, null);
        Type localVarReturnType = new TypeToken<NodeRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve exclude-node by ID (asynchronously)
     * Retrieve operation of resource: exclude-node
     * @param uuid ID of uuid (required)
     * @param topologyUuidNodeUuid ID of topology_uuid_node_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceExcludeNodeExcludeNodeByIdAsync(String uuid, String topologyUuidNodeUuid, final ApiCallback<NodeRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceExcludeNodeExcludeNodeByIdCall(uuid, topologyUuidNodeUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveContextConnectivityContextConnectivityServiceExcludePathExcludePath */
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceExcludePathExcludePathCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceExcludePathExcludePath(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/exclude-path/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve exclude-path
     * Retrieve operation of resource: exclude-path
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectivityContextConnectivityServiceExcludePathExcludePath(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectivityContextConnectivityServiceExcludePathExcludePathWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve exclude-path
     * Retrieve operation of resource: exclude-path
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectivityContextConnectivityServiceExcludePathExcludePathWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceExcludePathExcludePathCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve exclude-path (asynchronously)
     * Retrieve operation of resource: exclude-path
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceExcludePathExcludePathAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceExcludePathExcludePathCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveContextConnectivityContextConnectivityServiceExcludePathExcludePathById */
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceExcludePathExcludePathByIdCall(String uuid, String pathUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceExcludePathExcludePathById(Async)");
        }
        
        // verify the required parameter 'pathUuid' is set
        if (pathUuid == null) {
            throw new ApiException("Missing the required parameter 'pathUuid' when calling retrieveContextConnectivityContextConnectivityServiceExcludePathExcludePathById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/exclude-path/{path_uuid}/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
        .replaceAll("\\{" + "path_uuid" + "\\}", apiClient.escapeString(pathUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve exclude-path by ID
     * Retrieve operation of resource: exclude-path
     * @param uuid ID of uuid (required)
     * @param pathUuid ID of path_uuid (required)
     * @return PathRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PathRef retrieveContextConnectivityContextConnectivityServiceExcludePathExcludePathById(String uuid, String pathUuid) throws ApiException {
        ApiResponse<PathRef> resp = retrieveContextConnectivityContextConnectivityServiceExcludePathExcludePathByIdWithHttpInfo(uuid, pathUuid);
        return resp.getData();
    }

    /**
     * Retrieve exclude-path by ID
     * Retrieve operation of resource: exclude-path
     * @param uuid ID of uuid (required)
     * @param pathUuid ID of path_uuid (required)
     * @return ApiResponse&lt;PathRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PathRef> retrieveContextConnectivityContextConnectivityServiceExcludePathExcludePathByIdWithHttpInfo(String uuid, String pathUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceExcludePathExcludePathByIdCall(uuid, pathUuid, null, null);
        Type localVarReturnType = new TypeToken<PathRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve exclude-path by ID (asynchronously)
     * Retrieve operation of resource: exclude-path
     * @param uuid ID of uuid (required)
     * @param pathUuid ID of path_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceExcludePathExcludePathByIdAsync(String uuid, String pathUuid, final ApiCallback<PathRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceExcludePathExcludePathByIdCall(uuid, pathUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PathRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveContextConnectivityContextConnectivityServiceIncludeLinkIncludeLink */
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceIncludeLinkIncludeLinkCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceIncludeLinkIncludeLink(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/include-link/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve include-link
     * Retrieve operation of resource: include-link
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectivityContextConnectivityServiceIncludeLinkIncludeLink(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectivityContextConnectivityServiceIncludeLinkIncludeLinkWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve include-link
     * Retrieve operation of resource: include-link
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectivityContextConnectivityServiceIncludeLinkIncludeLinkWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceIncludeLinkIncludeLinkCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve include-link (asynchronously)
     * Retrieve operation of resource: include-link
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceIncludeLinkIncludeLinkAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceIncludeLinkIncludeLinkCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveContextConnectivityContextConnectivityServiceIncludeLinkIncludeLinkById */
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceIncludeLinkIncludeLinkByIdCall(String uuid, String topologyUuidLinkUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceIncludeLinkIncludeLinkById(Async)");
        }
        
        // verify the required parameter 'topologyUuidLinkUuid' is set
        if (topologyUuidLinkUuid == null) {
            throw new ApiException("Missing the required parameter 'topologyUuidLinkUuid' when calling retrieveContextConnectivityContextConnectivityServiceIncludeLinkIncludeLinkById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/include-link/{topology_uuid_link_uuid}/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
        .replaceAll("\\{" + "topology_uuid_link_uuid" + "\\}", apiClient.escapeString(topologyUuidLinkUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve include-link by ID
     * Retrieve operation of resource: include-link
     * @param uuid ID of uuid (required)
     * @param topologyUuidLinkUuid ID of topology_uuid_link_uuid (required)
     * @return LinkRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LinkRef retrieveContextConnectivityContextConnectivityServiceIncludeLinkIncludeLinkById(String uuid, String topologyUuidLinkUuid) throws ApiException {
        ApiResponse<LinkRef> resp = retrieveContextConnectivityContextConnectivityServiceIncludeLinkIncludeLinkByIdWithHttpInfo(uuid, topologyUuidLinkUuid);
        return resp.getData();
    }

    /**
     * Retrieve include-link by ID
     * Retrieve operation of resource: include-link
     * @param uuid ID of uuid (required)
     * @param topologyUuidLinkUuid ID of topology_uuid_link_uuid (required)
     * @return ApiResponse&lt;LinkRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LinkRef> retrieveContextConnectivityContextConnectivityServiceIncludeLinkIncludeLinkByIdWithHttpInfo(String uuid, String topologyUuidLinkUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceIncludeLinkIncludeLinkByIdCall(uuid, topologyUuidLinkUuid, null, null);
        Type localVarReturnType = new TypeToken<LinkRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve include-link by ID (asynchronously)
     * Retrieve operation of resource: include-link
     * @param uuid ID of uuid (required)
     * @param topologyUuidLinkUuid ID of topology_uuid_link_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceIncludeLinkIncludeLinkByIdAsync(String uuid, String topologyUuidLinkUuid, final ApiCallback<LinkRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceIncludeLinkIncludeLinkByIdCall(uuid, topologyUuidLinkUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LinkRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveContextConnectivityContextConnectivityServiceIncludeNodeIncludeNode */
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceIncludeNodeIncludeNodeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceIncludeNodeIncludeNode(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/include-node/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve include-node
     * Retrieve operation of resource: include-node
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectivityContextConnectivityServiceIncludeNodeIncludeNode(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectivityContextConnectivityServiceIncludeNodeIncludeNodeWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve include-node
     * Retrieve operation of resource: include-node
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectivityContextConnectivityServiceIncludeNodeIncludeNodeWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceIncludeNodeIncludeNodeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve include-node (asynchronously)
     * Retrieve operation of resource: include-node
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceIncludeNodeIncludeNodeAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceIncludeNodeIncludeNodeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveContextConnectivityContextConnectivityServiceIncludeNodeIncludeNodeById */
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceIncludeNodeIncludeNodeByIdCall(String uuid, String topologyUuidNodeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceIncludeNodeIncludeNodeById(Async)");
        }
        
        // verify the required parameter 'topologyUuidNodeUuid' is set
        if (topologyUuidNodeUuid == null) {
            throw new ApiException("Missing the required parameter 'topologyUuidNodeUuid' when calling retrieveContextConnectivityContextConnectivityServiceIncludeNodeIncludeNodeById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/include-node/{topology_uuid_node_uuid}/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
        .replaceAll("\\{" + "topology_uuid_node_uuid" + "\\}", apiClient.escapeString(topologyUuidNodeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve include-node by ID
     * Retrieve operation of resource: include-node
     * @param uuid ID of uuid (required)
     * @param topologyUuidNodeUuid ID of topology_uuid_node_uuid (required)
     * @return NodeRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeRef retrieveContextConnectivityContextConnectivityServiceIncludeNodeIncludeNodeById(String uuid, String topologyUuidNodeUuid) throws ApiException {
        ApiResponse<NodeRef> resp = retrieveContextConnectivityContextConnectivityServiceIncludeNodeIncludeNodeByIdWithHttpInfo(uuid, topologyUuidNodeUuid);
        return resp.getData();
    }

    /**
     * Retrieve include-node by ID
     * Retrieve operation of resource: include-node
     * @param uuid ID of uuid (required)
     * @param topologyUuidNodeUuid ID of topology_uuid_node_uuid (required)
     * @return ApiResponse&lt;NodeRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeRef> retrieveContextConnectivityContextConnectivityServiceIncludeNodeIncludeNodeByIdWithHttpInfo(String uuid, String topologyUuidNodeUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceIncludeNodeIncludeNodeByIdCall(uuid, topologyUuidNodeUuid, null, null);
        Type localVarReturnType = new TypeToken<NodeRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve include-node by ID (asynchronously)
     * Retrieve operation of resource: include-node
     * @param uuid ID of uuid (required)
     * @param topologyUuidNodeUuid ID of topology_uuid_node_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceIncludeNodeIncludeNodeByIdAsync(String uuid, String topologyUuidNodeUuid, final ApiCallback<NodeRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceIncludeNodeIncludeNodeByIdCall(uuid, topologyUuidNodeUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveContextConnectivityContextConnectivityServiceIncludePathIncludePath */
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceIncludePathIncludePathCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceIncludePathIncludePath(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/include-path/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve include-path
     * Retrieve operation of resource: include-path
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectivityContextConnectivityServiceIncludePathIncludePath(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectivityContextConnectivityServiceIncludePathIncludePathWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve include-path
     * Retrieve operation of resource: include-path
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectivityContextConnectivityServiceIncludePathIncludePathWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceIncludePathIncludePathCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve include-path (asynchronously)
     * Retrieve operation of resource: include-path
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceIncludePathIncludePathAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceIncludePathIncludePathCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveContextConnectivityContextConnectivityServiceIncludePathIncludePathById */
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceIncludePathIncludePathByIdCall(String uuid, String pathUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceIncludePathIncludePathById(Async)");
        }
        
        // verify the required parameter 'pathUuid' is set
        if (pathUuid == null) {
            throw new ApiException("Missing the required parameter 'pathUuid' when calling retrieveContextConnectivityContextConnectivityServiceIncludePathIncludePathById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/include-path/{path_uuid}/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
        .replaceAll("\\{" + "path_uuid" + "\\}", apiClient.escapeString(pathUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve include-path by ID
     * Retrieve operation of resource: include-path
     * @param uuid ID of uuid (required)
     * @param pathUuid ID of path_uuid (required)
     * @return PathRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PathRef retrieveContextConnectivityContextConnectivityServiceIncludePathIncludePathById(String uuid, String pathUuid) throws ApiException {
        ApiResponse<PathRef> resp = retrieveContextConnectivityContextConnectivityServiceIncludePathIncludePathByIdWithHttpInfo(uuid, pathUuid);
        return resp.getData();
    }

    /**
     * Retrieve include-path by ID
     * Retrieve operation of resource: include-path
     * @param uuid ID of uuid (required)
     * @param pathUuid ID of path_uuid (required)
     * @return ApiResponse&lt;PathRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PathRef> retrieveContextConnectivityContextConnectivityServiceIncludePathIncludePathByIdWithHttpInfo(String uuid, String pathUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceIncludePathIncludePathByIdCall(uuid, pathUuid, null, null);
        Type localVarReturnType = new TypeToken<PathRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve include-path by ID (asynchronously)
     * Retrieve operation of resource: include-path
     * @param uuid ID of uuid (required)
     * @param pathUuid ID of path_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceIncludePathIncludePathByIdAsync(String uuid, String pathUuid, final ApiCallback<PathRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceIncludePathIncludePathByIdCall(uuid, pathUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PathRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveContextConnectivityContextConnectivityServiceIncludeTopologyIncludeTopology */
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceIncludeTopologyIncludeTopologyCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceIncludeTopologyIncludeTopology(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/include-topology/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve include-topology
     * Retrieve operation of resource: include-topology
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectivityContextConnectivityServiceIncludeTopologyIncludeTopology(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectivityContextConnectivityServiceIncludeTopologyIncludeTopologyWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve include-topology
     * Retrieve operation of resource: include-topology
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectivityContextConnectivityServiceIncludeTopologyIncludeTopologyWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceIncludeTopologyIncludeTopologyCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve include-topology (asynchronously)
     * Retrieve operation of resource: include-topology
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceIncludeTopologyIncludeTopologyAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceIncludeTopologyIncludeTopologyCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveContextConnectivityContextConnectivityServiceIncludeTopologyIncludeTopologyById */
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceIncludeTopologyIncludeTopologyByIdCall(String uuid, String topologyUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceIncludeTopologyIncludeTopologyById(Async)");
        }
        
        // verify the required parameter 'topologyUuid' is set
        if (topologyUuid == null) {
            throw new ApiException("Missing the required parameter 'topologyUuid' when calling retrieveContextConnectivityContextConnectivityServiceIncludeTopologyIncludeTopologyById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/include-topology/{topology_uuid}/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
        .replaceAll("\\{" + "topology_uuid" + "\\}", apiClient.escapeString(topologyUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve include-topology by ID
     * Retrieve operation of resource: include-topology
     * @param uuid ID of uuid (required)
     * @param topologyUuid ID of topology_uuid (required)
     * @return TopologyRef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TopologyRef retrieveContextConnectivityContextConnectivityServiceIncludeTopologyIncludeTopologyById(String uuid, String topologyUuid) throws ApiException {
        ApiResponse<TopologyRef> resp = retrieveContextConnectivityContextConnectivityServiceIncludeTopologyIncludeTopologyByIdWithHttpInfo(uuid, topologyUuid);
        return resp.getData();
    }

    /**
     * Retrieve include-topology by ID
     * Retrieve operation of resource: include-topology
     * @param uuid ID of uuid (required)
     * @param topologyUuid ID of topology_uuid (required)
     * @return ApiResponse&lt;TopologyRef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TopologyRef> retrieveContextConnectivityContextConnectivityServiceIncludeTopologyIncludeTopologyByIdWithHttpInfo(String uuid, String topologyUuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceIncludeTopologyIncludeTopologyByIdCall(uuid, topologyUuid, null, null);
        Type localVarReturnType = new TypeToken<TopologyRef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve include-topology by ID (asynchronously)
     * Retrieve operation of resource: include-topology
     * @param uuid ID of uuid (required)
     * @param topologyUuid ID of topology_uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceIncludeTopologyIncludeTopologyByIdAsync(String uuid, String topologyUuid, final ApiCallback<TopologyRef> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceIncludeTopologyIncludeTopologyByIdCall(uuid, topologyUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TopologyRef>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristic */
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristic(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/latency-characteristic/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve latency-characteristic
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristic(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve latency-characteristic
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve latency-characteristic (asynchronously)
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicById */
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicByIdCall(String uuid, String trafficPropertyName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicById(Async)");
        }
        
        // verify the required parameter 'trafficPropertyName' is set
        if (trafficPropertyName == null) {
            throw new ApiException("Missing the required parameter 'trafficPropertyName' when calling retrieveContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/latency-characteristic/{traffic_property_name}/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
        .replaceAll("\\{" + "traffic_property_name" + "\\}", apiClient.escapeString(trafficPropertyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve latency-characteristic by ID
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @return LatencyCharacteristic
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LatencyCharacteristic retrieveContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicById(String uuid, String trafficPropertyName) throws ApiException {
        ApiResponse<LatencyCharacteristic> resp = retrieveContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicByIdWithHttpInfo(uuid, trafficPropertyName);
        return resp.getData();
    }

    /**
     * Retrieve latency-characteristic by ID
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @return ApiResponse&lt;LatencyCharacteristic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LatencyCharacteristic> retrieveContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicByIdWithHttpInfo(String uuid, String trafficPropertyName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicByIdCall(uuid, trafficPropertyName, null, null);
        Type localVarReturnType = new TypeToken<LatencyCharacteristic>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve latency-characteristic by ID (asynchronously)
     * Retrieve operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicByIdAsync(String uuid, String trafficPropertyName, final ApiCallback<LatencyCharacteristic> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicByIdCall(uuid, trafficPropertyName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LatencyCharacteristic>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveContextConnectivityContextConnectivityServiceNameName */
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceNameNameCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceNameName(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/name/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectivityContextConnectivityServiceNameName(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectivityContextConnectivityServiceNameNameWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectivityContextConnectivityServiceNameNameWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceNameNameCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceNameNameAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceNameNameCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveContextConnectivityContextConnectivityServiceNameNameById */
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceNameNameByIdCall(String uuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling retrieveContextConnectivityContextConnectivityServiceNameNameById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/name/{value_name}/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
        .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @return NameAndValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NameAndValue retrieveContextConnectivityContextConnectivityServiceNameNameById(String uuid, String valueName) throws ApiException {
        ApiResponse<NameAndValue> resp = retrieveContextConnectivityContextConnectivityServiceNameNameByIdWithHttpInfo(uuid, valueName);
        return resp.getData();
    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @return ApiResponse&lt;NameAndValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NameAndValue> retrieveContextConnectivityContextConnectivityServiceNameNameByIdWithHttpInfo(String uuid, String valueName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceNameNameByIdCall(uuid, valueName, null, null);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name by ID (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceNameNameByIdAsync(String uuid, String valueName, final ApiCallback<NameAndValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceNameNameByIdCall(uuid, valueName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfile */
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/requested-capacity/bandwidth-profile/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve bandwidth-profile
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @return BandwidthProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BandwidthProfile retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfile(String uuid) throws ApiException {
        ApiResponse<BandwidthProfile> resp = retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve bandwidth-profile
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;BandwidthProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BandwidthProfile> retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<BandwidthProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve bandwidth-profile (asynchronously)
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileAsync(String uuid, final ApiCallback<BandwidthProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BandwidthProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize */
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/requested-capacity/bandwidth-profile/committed-burst-size/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve committed-burst-size
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(String uuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve committed-burst-size
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve committed-burst-size (asynchronously)
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeAsync(String uuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate */
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/requested-capacity/bandwidth-profile/committed-information-rate/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve committed-information-rate
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(String uuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve committed-information-rate
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve committed-information-rate (asynchronously)
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateAsync(String uuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSize */
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/requested-capacity/bandwidth-profile/peak-burst-size/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve peak-burst-size
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSize(String uuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve peak-burst-size
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve peak-burst-size (asynchronously)
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeAsync(String uuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRate */
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/requested-capacity/bandwidth-profile/peak-information-rate/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve peak-information-rate
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRate(String uuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve peak-information-rate
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve peak-information-rate (asynchronously)
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateAsync(String uuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveContextConnectivityContextConnectivityServiceRequestedCapacityRequestedCapacity */
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceRequestedCapacityRequestedCapacityCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceRequestedCapacityRequestedCapacity(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/requested-capacity/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve requested-capacity
     * Retrieve operation of resource: requested-capacity
     * @param uuid ID of uuid (required)
     * @return Capacity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Capacity retrieveContextConnectivityContextConnectivityServiceRequestedCapacityRequestedCapacity(String uuid) throws ApiException {
        ApiResponse<Capacity> resp = retrieveContextConnectivityContextConnectivityServiceRequestedCapacityRequestedCapacityWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve requested-capacity
     * Retrieve operation of resource: requested-capacity
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;Capacity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Capacity> retrieveContextConnectivityContextConnectivityServiceRequestedCapacityRequestedCapacityWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceRequestedCapacityRequestedCapacityCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<Capacity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve requested-capacity (asynchronously)
     * Retrieve operation of resource: requested-capacity
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceRequestedCapacityRequestedCapacityAsync(String uuid, final ApiCallback<Capacity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceRequestedCapacityRequestedCapacityCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Capacity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveContextConnectivityContextConnectivityServiceRequestedCapacityTotalSizeTotalSize */
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceRequestedCapacityTotalSizeTotalSize(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/requested-capacity/total-size/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve total-size
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextConnectivityContextConnectivityServiceRequestedCapacityTotalSizeTotalSize(String uuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextConnectivityContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve total-size
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextConnectivityContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve total-size (asynchronously)
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeAsync(String uuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveContextConnectivityContextConnectivityServiceResilienceTypeResilienceType */
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceResilienceTypeResilienceTypeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceResilienceTypeResilienceType(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/resilience-type/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve resilience-type
     * Retrieve operation of resource: resilience-type
     * @param uuid ID of uuid (required)
     * @return ResilienceType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResilienceType retrieveContextConnectivityContextConnectivityServiceResilienceTypeResilienceType(String uuid) throws ApiException {
        ApiResponse<ResilienceType> resp = retrieveContextConnectivityContextConnectivityServiceResilienceTypeResilienceTypeWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve resilience-type
     * Retrieve operation of resource: resilience-type
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;ResilienceType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResilienceType> retrieveContextConnectivityContextConnectivityServiceResilienceTypeResilienceTypeWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceResilienceTypeResilienceTypeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<ResilienceType>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve resilience-type (asynchronously)
     * Retrieve operation of resource: resilience-type
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceResilienceTypeResilienceTypeAsync(String uuid, final ApiCallback<ResilienceType> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceResilienceTypeResilienceTypeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResilienceType>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristic */
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristic(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/risk-diversity-characteristic/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve risk-diversity-characteristic
     * Retrieve operation of resource: risk-diversity-characteristic
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristic(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve risk-diversity-characteristic
     * Retrieve operation of resource: risk-diversity-characteristic
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve risk-diversity-characteristic (asynchronously)
     * Retrieve operation of resource: risk-diversity-characteristic
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicById */
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicByIdCall(String uuid, String riskCharacteristicName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicById(Async)");
        }
        
        // verify the required parameter 'riskCharacteristicName' is set
        if (riskCharacteristicName == null) {
            throw new ApiException("Missing the required parameter 'riskCharacteristicName' when calling retrieveContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/risk-diversity-characteristic/{risk_characteristic_name}/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
        .replaceAll("\\{" + "risk_characteristic_name" + "\\}", apiClient.escapeString(riskCharacteristicName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve risk-diversity-characteristic by ID
     * Retrieve operation of resource: risk-diversity-characteristic
     * @param uuid ID of uuid (required)
     * @param riskCharacteristicName ID of risk_characteristic_name (required)
     * @return RiskCharacteristic
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RiskCharacteristic retrieveContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicById(String uuid, String riskCharacteristicName) throws ApiException {
        ApiResponse<RiskCharacteristic> resp = retrieveContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicByIdWithHttpInfo(uuid, riskCharacteristicName);
        return resp.getData();
    }

    /**
     * Retrieve risk-diversity-characteristic by ID
     * Retrieve operation of resource: risk-diversity-characteristic
     * @param uuid ID of uuid (required)
     * @param riskCharacteristicName ID of risk_characteristic_name (required)
     * @return ApiResponse&lt;RiskCharacteristic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RiskCharacteristic> retrieveContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicByIdWithHttpInfo(String uuid, String riskCharacteristicName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicByIdCall(uuid, riskCharacteristicName, null, null);
        Type localVarReturnType = new TypeToken<RiskCharacteristic>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve risk-diversity-characteristic by ID (asynchronously)
     * Retrieve operation of resource: risk-diversity-characteristic
     * @param uuid ID of uuid (required)
     * @param riskCharacteristicName ID of risk_characteristic_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicByIdAsync(String uuid, String riskCharacteristicName, final ApiCallback<RiskCharacteristic> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicByIdCall(uuid, riskCharacteristicName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RiskCharacteristic>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveContextConnectivityContextConnectivityServiceScheduleSchedule */
    private com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceScheduleScheduleCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextConnectivityContextConnectivityServiceScheduleSchedule(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/schedule/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve schedule
     * Retrieve operation of resource: schedule
     * @param uuid ID of uuid (required)
     * @return TimeRange
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TimeRange retrieveContextConnectivityContextConnectivityServiceScheduleSchedule(String uuid) throws ApiException {
        ApiResponse<TimeRange> resp = retrieveContextConnectivityContextConnectivityServiceScheduleScheduleWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve schedule
     * Retrieve operation of resource: schedule
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;TimeRange&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TimeRange> retrieveContextConnectivityContextConnectivityServiceScheduleScheduleWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceScheduleScheduleCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<TimeRange>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve schedule (asynchronously)
     * Retrieve operation of resource: schedule
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextConnectivityContextConnectivityServiceScheduleScheduleAsync(String uuid, final ApiCallback<TimeRange> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextConnectivityContextConnectivityServiceScheduleScheduleCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TimeRange>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateContextConnectivityContextConnectivityContextById */
    private com.squareup.okhttp.Call updateContextConnectivityContextConnectivityContextByIdCall(ConnectivityContext connectivityContext, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = connectivityContext;
        
        // verify the required parameter 'connectivityContext' is set
        if (connectivityContext == null) {
            throw new ApiException("Missing the required parameter 'connectivityContext' when calling updateContextConnectivityContextConnectivityContextById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Update connectivity-context by ID
     * Update operation of resource: connectivity-context
     * @param connectivityContext connectivity-contextbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextConnectivityContextConnectivityContextById(ConnectivityContext connectivityContext) throws ApiException {
        updateContextConnectivityContextConnectivityContextByIdWithHttpInfo(connectivityContext);
    }

    /**
     * Update connectivity-context by ID
     * Update operation of resource: connectivity-context
     * @param connectivityContext connectivity-contextbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextConnectivityContextConnectivityContextByIdWithHttpInfo(ConnectivityContext connectivityContext) throws ApiException {
        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityContextByIdCall(connectivityContext, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update connectivity-context by ID (asynchronously)
     * Update operation of resource: connectivity-context
     * @param connectivityContext connectivity-contextbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectivityContextByIdAsync(ConnectivityContext connectivityContext, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityContextByIdCall(connectivityContext, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for updateContextConnectivityContextConnectivityServiceConnectivityServiceById */
    private com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceConnectivityServiceByIdCall(String uuid, ConnectivityService connectivityService, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = connectivityService;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextConnectivityContextConnectivityServiceConnectivityServiceById(Async)");
        }
        
        // verify the required parameter 'connectivityService' is set
        if (connectivityService == null) {
            throw new ApiException("Missing the required parameter 'connectivityService' when calling updateContextConnectivityContextConnectivityServiceConnectivityServiceById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Update connectivity-service by ID
     * Update operation of resource: connectivity-service
     * @param uuid ID of uuid (required)
     * @param connectivityService connectivity-servicebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextConnectivityContextConnectivityServiceConnectivityServiceById(String uuid, ConnectivityService connectivityService) throws ApiException {
        updateContextConnectivityContextConnectivityServiceConnectivityServiceByIdWithHttpInfo(uuid, connectivityService);
    }

    /**
     * Update connectivity-service by ID
     * Update operation of resource: connectivity-service
     * @param uuid ID of uuid (required)
     * @param connectivityService connectivity-servicebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextConnectivityContextConnectivityServiceConnectivityServiceByIdWithHttpInfo(String uuid, ConnectivityService connectivityService) throws ApiException {
        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceConnectivityServiceByIdCall(uuid, connectivityService, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update connectivity-service by ID (asynchronously)
     * Update operation of resource: connectivity-service
     * @param uuid ID of uuid (required)
     * @param connectivityService connectivity-servicebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceConnectivityServiceByIdAsync(String uuid, ConnectivityService connectivityService, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceConnectivityServiceByIdCall(uuid, connectivityService, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for updateContextConnectivityContextConnectivityServiceCorouteInclusionCorouteInclusionById */
    private com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceCorouteInclusionCorouteInclusionByIdCall(String uuid, ConnectivityServiceRef corouteInclusion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = corouteInclusion;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextConnectivityContextConnectivityServiceCorouteInclusionCorouteInclusionById(Async)");
        }
        
        // verify the required parameter 'corouteInclusion' is set
        if (corouteInclusion == null) {
            throw new ApiException("Missing the required parameter 'corouteInclusion' when calling updateContextConnectivityContextConnectivityServiceCorouteInclusionCorouteInclusionById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/coroute-inclusion/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Update coroute-inclusion by ID
     * Update operation of resource: coroute-inclusion
     * @param uuid ID of uuid (required)
     * @param corouteInclusion coroute-inclusionbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextConnectivityContextConnectivityServiceCorouteInclusionCorouteInclusionById(String uuid, ConnectivityServiceRef corouteInclusion) throws ApiException {
        updateContextConnectivityContextConnectivityServiceCorouteInclusionCorouteInclusionByIdWithHttpInfo(uuid, corouteInclusion);
    }

    /**
     * Update coroute-inclusion by ID
     * Update operation of resource: coroute-inclusion
     * @param uuid ID of uuid (required)
     * @param corouteInclusion coroute-inclusionbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextConnectivityContextConnectivityServiceCorouteInclusionCorouteInclusionByIdWithHttpInfo(String uuid, ConnectivityServiceRef corouteInclusion) throws ApiException {
        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceCorouteInclusionCorouteInclusionByIdCall(uuid, corouteInclusion, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update coroute-inclusion by ID (asynchronously)
     * Update operation of resource: coroute-inclusion
     * @param uuid ID of uuid (required)
     * @param corouteInclusion coroute-inclusionbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceCorouteInclusionCorouteInclusionByIdAsync(String uuid, ConnectivityServiceRef corouteInclusion, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceCorouteInclusionCorouteInclusionByIdCall(uuid, corouteInclusion, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for updateContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicById */
    private com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicByIdCall(String uuid, String costName, CostCharacteristic costCharacteristic, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = costCharacteristic;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicById(Async)");
        }
        
        // verify the required parameter 'costName' is set
        if (costName == null) {
            throw new ApiException("Missing the required parameter 'costName' when calling updateContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicById(Async)");
        }
        
        // verify the required parameter 'costCharacteristic' is set
        if (costCharacteristic == null) {
            throw new ApiException("Missing the required parameter 'costCharacteristic' when calling updateContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/cost-characteristic/{cost_name}/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
        .replaceAll("\\{" + "cost_name" + "\\}", apiClient.escapeString(costName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Update cost-characteristic by ID
     * Update operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param costName ID of cost_name (required)
     * @param costCharacteristic cost-characteristicbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicById(String uuid, String costName, CostCharacteristic costCharacteristic) throws ApiException {
        updateContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicByIdWithHttpInfo(uuid, costName, costCharacteristic);
    }

    /**
     * Update cost-characteristic by ID
     * Update operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param costName ID of cost_name (required)
     * @param costCharacteristic cost-characteristicbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicByIdWithHttpInfo(String uuid, String costName, CostCharacteristic costCharacteristic) throws ApiException {
        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicByIdCall(uuid, costName, costCharacteristic, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update cost-characteristic by ID (asynchronously)
     * Update operation of resource: cost-characteristic
     * @param uuid ID of uuid (required)
     * @param costName ID of cost_name (required)
     * @param costCharacteristic cost-characteristicbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicByIdAsync(String uuid, String costName, CostCharacteristic costCharacteristic, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicByIdCall(uuid, costName, costCharacteristic, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for updateContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionById */
    private com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionByIdCall(String uuid, String connectivityServiceUuid, ConnectivityServiceRef diversityExclusion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = diversityExclusion;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionById(Async)");
        }
        
        // verify the required parameter 'connectivityServiceUuid' is set
        if (connectivityServiceUuid == null) {
            throw new ApiException("Missing the required parameter 'connectivityServiceUuid' when calling updateContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionById(Async)");
        }
        
        // verify the required parameter 'diversityExclusion' is set
        if (diversityExclusion == null) {
            throw new ApiException("Missing the required parameter 'diversityExclusion' when calling updateContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/diversity-exclusion/{connectivity_service_uuid}/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
        .replaceAll("\\{" + "connectivity_service_uuid" + "\\}", apiClient.escapeString(connectivityServiceUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Update diversity-exclusion by ID
     * Update operation of resource: diversity-exclusion
     * @param uuid ID of uuid (required)
     * @param connectivityServiceUuid ID of connectivity_service_uuid (required)
     * @param diversityExclusion diversity-exclusionbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionById(String uuid, String connectivityServiceUuid, ConnectivityServiceRef diversityExclusion) throws ApiException {
        updateContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionByIdWithHttpInfo(uuid, connectivityServiceUuid, diversityExclusion);
    }

    /**
     * Update diversity-exclusion by ID
     * Update operation of resource: diversity-exclusion
     * @param uuid ID of uuid (required)
     * @param connectivityServiceUuid ID of connectivity_service_uuid (required)
     * @param diversityExclusion diversity-exclusionbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionByIdWithHttpInfo(String uuid, String connectivityServiceUuid, ConnectivityServiceRef diversityExclusion) throws ApiException {
        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionByIdCall(uuid, connectivityServiceUuid, diversityExclusion, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update diversity-exclusion by ID (asynchronously)
     * Update operation of resource: diversity-exclusion
     * @param uuid ID of uuid (required)
     * @param connectivityServiceUuid ID of connectivity_service_uuid (required)
     * @param diversityExclusion diversity-exclusionbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionByIdAsync(String uuid, String connectivityServiceUuid, ConnectivityServiceRef diversityExclusion, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionByIdCall(uuid, connectivityServiceUuid, diversityExclusion, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileById */
    private com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdCall(String uuid, String localId, BandwidthProfile bandwidthProfile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = bandwidthProfile;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileById(Async)");
        }
        
        // verify the required parameter 'bandwidthProfile' is set
        if (bandwidthProfile == null) {
            throw new ApiException("Missing the required parameter 'bandwidthProfile' when calling updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/capacity/bandwidth-profile/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
        .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Update bandwidth-profile by ID
     * Update operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param bandwidthProfile bandwidth-profilebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileById(String uuid, String localId, BandwidthProfile bandwidthProfile) throws ApiException {
        updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdWithHttpInfo(uuid, localId, bandwidthProfile);
    }

    /**
     * Update bandwidth-profile by ID
     * Update operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param bandwidthProfile bandwidth-profilebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdWithHttpInfo(String uuid, String localId, BandwidthProfile bandwidthProfile) throws ApiException {
        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdCall(uuid, localId, bandwidthProfile, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update bandwidth-profile by ID (asynchronously)
     * Update operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param bandwidthProfile bandwidth-profilebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdAsync(String uuid, String localId, BandwidthProfile bandwidthProfile, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdCall(uuid, localId, bandwidthProfile, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById */
    private com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdCall(String uuid, String localId, CapacityValue committedBurstSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = committedBurstSize;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById(Async)");
        }
        
        // verify the required parameter 'committedBurstSize' is set
        if (committedBurstSize == null) {
            throw new ApiException("Missing the required parameter 'committedBurstSize' when calling updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/capacity/bandwidth-profile/committed-burst-size/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
        .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Update committed-burst-size by ID
     * Update operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param committedBurstSize committed-burst-sizebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById(String uuid, String localId, CapacityValue committedBurstSize) throws ApiException {
        updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdWithHttpInfo(uuid, localId, committedBurstSize);
    }

    /**
     * Update committed-burst-size by ID
     * Update operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param committedBurstSize committed-burst-sizebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdWithHttpInfo(String uuid, String localId, CapacityValue committedBurstSize) throws ApiException {
        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdCall(uuid, localId, committedBurstSize, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update committed-burst-size by ID (asynchronously)
     * Update operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param committedBurstSize committed-burst-sizebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdAsync(String uuid, String localId, CapacityValue committedBurstSize, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdCall(uuid, localId, committedBurstSize, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById */
    private com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdCall(String uuid, String localId, CapacityValue committedInformationRate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = committedInformationRate;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById(Async)");
        }
        
        // verify the required parameter 'committedInformationRate' is set
        if (committedInformationRate == null) {
            throw new ApiException("Missing the required parameter 'committedInformationRate' when calling updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/capacity/bandwidth-profile/committed-information-rate/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
        .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Update committed-information-rate by ID
     * Update operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param committedInformationRate committed-information-ratebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById(String uuid, String localId, CapacityValue committedInformationRate) throws ApiException {
        updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdWithHttpInfo(uuid, localId, committedInformationRate);
    }

    /**
     * Update committed-information-rate by ID
     * Update operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param committedInformationRate committed-information-ratebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdWithHttpInfo(String uuid, String localId, CapacityValue committedInformationRate) throws ApiException {
        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdCall(uuid, localId, committedInformationRate, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update committed-information-rate by ID (asynchronously)
     * Update operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param committedInformationRate committed-information-ratebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdAsync(String uuid, String localId, CapacityValue committedInformationRate, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdCall(uuid, localId, committedInformationRate, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById */
    private com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdCall(String uuid, String localId, CapacityValue peakBurstSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = peakBurstSize;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById(Async)");
        }
        
        // verify the required parameter 'peakBurstSize' is set
        if (peakBurstSize == null) {
            throw new ApiException("Missing the required parameter 'peakBurstSize' when calling updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/capacity/bandwidth-profile/peak-burst-size/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
        .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Update peak-burst-size by ID
     * Update operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param peakBurstSize peak-burst-sizebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById(String uuid, String localId, CapacityValue peakBurstSize) throws ApiException {
        updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdWithHttpInfo(uuid, localId, peakBurstSize);
    }

    /**
     * Update peak-burst-size by ID
     * Update operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param peakBurstSize peak-burst-sizebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdWithHttpInfo(String uuid, String localId, CapacityValue peakBurstSize) throws ApiException {
        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdCall(uuid, localId, peakBurstSize, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update peak-burst-size by ID (asynchronously)
     * Update operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param peakBurstSize peak-burst-sizebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdAsync(String uuid, String localId, CapacityValue peakBurstSize, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdCall(uuid, localId, peakBurstSize, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateById */
    private com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdCall(String uuid, String localId, CapacityValue peakInformationRate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = peakInformationRate;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateById(Async)");
        }
        
        // verify the required parameter 'peakInformationRate' is set
        if (peakInformationRate == null) {
            throw new ApiException("Missing the required parameter 'peakInformationRate' when calling updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/capacity/bandwidth-profile/peak-information-rate/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
        .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Update peak-information-rate by ID
     * Update operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param peakInformationRate peak-information-ratebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateById(String uuid, String localId, CapacityValue peakInformationRate) throws ApiException {
        updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdWithHttpInfo(uuid, localId, peakInformationRate);
    }

    /**
     * Update peak-information-rate by ID
     * Update operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param peakInformationRate peak-information-ratebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdWithHttpInfo(String uuid, String localId, CapacityValue peakInformationRate) throws ApiException {
        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdCall(uuid, localId, peakInformationRate, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update peak-information-rate by ID (asynchronously)
     * Update operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param peakInformationRate peak-information-ratebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdAsync(String uuid, String localId, CapacityValue peakInformationRate, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdCall(uuid, localId, peakInformationRate, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for updateContextConnectivityContextConnectivityServiceEndPointCapacityCapacityById */
    private com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceEndPointCapacityCapacityByIdCall(String uuid, String localId, Capacity capacity, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = capacity;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextConnectivityContextConnectivityServiceEndPointCapacityCapacityById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling updateContextConnectivityContextConnectivityServiceEndPointCapacityCapacityById(Async)");
        }
        
        // verify the required parameter 'capacity' is set
        if (capacity == null) {
            throw new ApiException("Missing the required parameter 'capacity' when calling updateContextConnectivityContextConnectivityServiceEndPointCapacityCapacityById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/capacity/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
        .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Update capacity by ID
     * Update operation of resource: capacity
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param capacity capacitybody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextConnectivityContextConnectivityServiceEndPointCapacityCapacityById(String uuid, String localId, Capacity capacity) throws ApiException {
        updateContextConnectivityContextConnectivityServiceEndPointCapacityCapacityByIdWithHttpInfo(uuid, localId, capacity);
    }

    /**
     * Update capacity by ID
     * Update operation of resource: capacity
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param capacity capacitybody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextConnectivityContextConnectivityServiceEndPointCapacityCapacityByIdWithHttpInfo(String uuid, String localId, Capacity capacity) throws ApiException {
        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceEndPointCapacityCapacityByIdCall(uuid, localId, capacity, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update capacity by ID (asynchronously)
     * Update operation of resource: capacity
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param capacity capacitybody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceEndPointCapacityCapacityByIdAsync(String uuid, String localId, Capacity capacity, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceEndPointCapacityCapacityByIdCall(uuid, localId, capacity, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for updateContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeById */
    private com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeByIdCall(String uuid, String localId, CapacityValue totalSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = totalSize;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling updateContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeById(Async)");
        }
        
        // verify the required parameter 'totalSize' is set
        if (totalSize == null) {
            throw new ApiException("Missing the required parameter 'totalSize' when calling updateContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/capacity/total-size/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
        .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Update total-size by ID
     * Update operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param totalSize total-sizebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeById(String uuid, String localId, CapacityValue totalSize) throws ApiException {
        updateContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeByIdWithHttpInfo(uuid, localId, totalSize);
    }

    /**
     * Update total-size by ID
     * Update operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param totalSize total-sizebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeByIdWithHttpInfo(String uuid, String localId, CapacityValue totalSize) throws ApiException {
        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeByIdCall(uuid, localId, totalSize, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update total-size by ID (asynchronously)
     * Update operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param totalSize total-sizebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeByIdAsync(String uuid, String localId, CapacityValue totalSize, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeByIdCall(uuid, localId, totalSize, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for updateContextConnectivityContextConnectivityServiceEndPointEndPointById */
    private com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceEndPointEndPointByIdCall(String uuid, String localId, ConnectivityServiceEndPoint endPoint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = endPoint;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextConnectivityContextConnectivityServiceEndPointEndPointById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling updateContextConnectivityContextConnectivityServiceEndPointEndPointById(Async)");
        }
        
        // verify the required parameter 'endPoint' is set
        if (endPoint == null) {
            throw new ApiException("Missing the required parameter 'endPoint' when calling updateContextConnectivityContextConnectivityServiceEndPointEndPointById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
        .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Update end-point by ID
     * Update operation of resource: end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param endPoint end-pointbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextConnectivityContextConnectivityServiceEndPointEndPointById(String uuid, String localId, ConnectivityServiceEndPoint endPoint) throws ApiException {
        updateContextConnectivityContextConnectivityServiceEndPointEndPointByIdWithHttpInfo(uuid, localId, endPoint);
    }

    /**
     * Update end-point by ID
     * Update operation of resource: end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param endPoint end-pointbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextConnectivityContextConnectivityServiceEndPointEndPointByIdWithHttpInfo(String uuid, String localId, ConnectivityServiceEndPoint endPoint) throws ApiException {
        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceEndPointEndPointByIdCall(uuid, localId, endPoint, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update end-point by ID (asynchronously)
     * Update operation of resource: end-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param endPoint end-pointbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceEndPointEndPointByIdAsync(String uuid, String localId, ConnectivityServiceEndPoint endPoint, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceEndPointEndPointByIdCall(uuid, localId, endPoint, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for updateContextConnectivityContextConnectivityServiceEndPointNameNameById */
    private com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceEndPointNameNameByIdCall(String uuid, String localId, String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = name;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextConnectivityContextConnectivityServiceEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling updateContextConnectivityContextConnectivityServiceEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling updateContextConnectivityContextConnectivityServiceEndPointNameNameById(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling updateContextConnectivityContextConnectivityServiceEndPointNameNameById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/name/{value_name}/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
        .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()))
        .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Update name by ID
     * Update operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextConnectivityContextConnectivityServiceEndPointNameNameById(String uuid, String localId, String valueName, NameAndValue name) throws ApiException {
        updateContextConnectivityContextConnectivityServiceEndPointNameNameByIdWithHttpInfo(uuid, localId, valueName, name);
    }

    /**
     * Update name by ID
     * Update operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextConnectivityContextConnectivityServiceEndPointNameNameByIdWithHttpInfo(String uuid, String localId, String valueName, NameAndValue name) throws ApiException {
        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceEndPointNameNameByIdCall(uuid, localId, valueName, name, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update name by ID (asynchronously)
     * Update operation of resource: name
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceEndPointNameNameByIdAsync(String uuid, String localId, String valueName, NameAndValue name, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceEndPointNameNameByIdCall(uuid, localId, valueName, name, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for updateContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById */
    private com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointByIdCall(String uuid, String localId, ServiceInterfacePointRef serviceInterfacePoint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = serviceInterfacePoint;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById(Async)");
        }
        
        // verify the required parameter 'localId' is set
        if (localId == null) {
            throw new ApiException("Missing the required parameter 'localId' when calling updateContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById(Async)");
        }
        
        // verify the required parameter 'serviceInterfacePoint' is set
        if (serviceInterfacePoint == null) {
            throw new ApiException("Missing the required parameter 'serviceInterfacePoint' when calling updateContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/end-point/{local_id}/service-interface-point/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
        .replaceAll("\\{" + "local_id" + "\\}", apiClient.escapeString(localId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Update service-interface-point by ID
     * Update operation of resource: service-interface-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePoint service-interface-pointbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById(String uuid, String localId, ServiceInterfacePointRef serviceInterfacePoint) throws ApiException {
        updateContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointByIdWithHttpInfo(uuid, localId, serviceInterfacePoint);
    }

    /**
     * Update service-interface-point by ID
     * Update operation of resource: service-interface-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePoint service-interface-pointbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointByIdWithHttpInfo(String uuid, String localId, ServiceInterfacePointRef serviceInterfacePoint) throws ApiException {
        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointByIdCall(uuid, localId, serviceInterfacePoint, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update service-interface-point by ID (asynchronously)
     * Update operation of resource: service-interface-point
     * @param uuid ID of uuid (required)
     * @param localId ID of local_id (required)
     * @param serviceInterfacePoint service-interface-pointbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointByIdAsync(String uuid, String localId, ServiceInterfacePointRef serviceInterfacePoint, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointByIdCall(uuid, localId, serviceInterfacePoint, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for updateContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicById */
    private com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicByIdCall(String uuid, String trafficPropertyName, LatencyCharacteristic latencyCharacteristic, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = latencyCharacteristic;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicById(Async)");
        }
        
        // verify the required parameter 'trafficPropertyName' is set
        if (trafficPropertyName == null) {
            throw new ApiException("Missing the required parameter 'trafficPropertyName' when calling updateContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicById(Async)");
        }
        
        // verify the required parameter 'latencyCharacteristic' is set
        if (latencyCharacteristic == null) {
            throw new ApiException("Missing the required parameter 'latencyCharacteristic' when calling updateContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/latency-characteristic/{traffic_property_name}/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
        .replaceAll("\\{" + "traffic_property_name" + "\\}", apiClient.escapeString(trafficPropertyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Update latency-characteristic by ID
     * Update operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @param latencyCharacteristic latency-characteristicbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicById(String uuid, String trafficPropertyName, LatencyCharacteristic latencyCharacteristic) throws ApiException {
        updateContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicByIdWithHttpInfo(uuid, trafficPropertyName, latencyCharacteristic);
    }

    /**
     * Update latency-characteristic by ID
     * Update operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @param latencyCharacteristic latency-characteristicbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicByIdWithHttpInfo(String uuid, String trafficPropertyName, LatencyCharacteristic latencyCharacteristic) throws ApiException {
        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicByIdCall(uuid, trafficPropertyName, latencyCharacteristic, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update latency-characteristic by ID (asynchronously)
     * Update operation of resource: latency-characteristic
     * @param uuid ID of uuid (required)
     * @param trafficPropertyName ID of traffic_property_name (required)
     * @param latencyCharacteristic latency-characteristicbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicByIdAsync(String uuid, String trafficPropertyName, LatencyCharacteristic latencyCharacteristic, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicByIdCall(uuid, trafficPropertyName, latencyCharacteristic, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for updateContextConnectivityContextConnectivityServiceNameNameById */
    private com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceNameNameByIdCall(String uuid, String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = name;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextConnectivityContextConnectivityServiceNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling updateContextConnectivityContextConnectivityServiceNameNameById(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling updateContextConnectivityContextConnectivityServiceNameNameById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/name/{value_name}/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
        .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Update name by ID
     * Update operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextConnectivityContextConnectivityServiceNameNameById(String uuid, String valueName, NameAndValue name) throws ApiException {
        updateContextConnectivityContextConnectivityServiceNameNameByIdWithHttpInfo(uuid, valueName, name);
    }

    /**
     * Update name by ID
     * Update operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextConnectivityContextConnectivityServiceNameNameByIdWithHttpInfo(String uuid, String valueName, NameAndValue name) throws ApiException {
        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceNameNameByIdCall(uuid, valueName, name, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update name by ID (asynchronously)
     * Update operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceNameNameByIdAsync(String uuid, String valueName, NameAndValue name, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceNameNameByIdCall(uuid, valueName, name, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileById */
    private com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileByIdCall(String uuid, BandwidthProfile bandwidthProfile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = bandwidthProfile;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileById(Async)");
        }
        
        // verify the required parameter 'bandwidthProfile' is set
        if (bandwidthProfile == null) {
            throw new ApiException("Missing the required parameter 'bandwidthProfile' when calling updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/requested-capacity/bandwidth-profile/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Update bandwidth-profile by ID
     * Update operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param bandwidthProfile bandwidth-profilebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileById(String uuid, BandwidthProfile bandwidthProfile) throws ApiException {
        updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileByIdWithHttpInfo(uuid, bandwidthProfile);
    }

    /**
     * Update bandwidth-profile by ID
     * Update operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param bandwidthProfile bandwidth-profilebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileByIdWithHttpInfo(String uuid, BandwidthProfile bandwidthProfile) throws ApiException {
        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileByIdCall(uuid, bandwidthProfile, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update bandwidth-profile by ID (asynchronously)
     * Update operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param bandwidthProfile bandwidth-profilebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileByIdAsync(String uuid, BandwidthProfile bandwidthProfile, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileByIdCall(uuid, bandwidthProfile, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById */
    private com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdCall(String uuid, CapacityValue committedBurstSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = committedBurstSize;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById(Async)");
        }
        
        // verify the required parameter 'committedBurstSize' is set
        if (committedBurstSize == null) {
            throw new ApiException("Missing the required parameter 'committedBurstSize' when calling updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/requested-capacity/bandwidth-profile/committed-burst-size/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Update committed-burst-size by ID
     * Update operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param committedBurstSize committed-burst-sizebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById(String uuid, CapacityValue committedBurstSize) throws ApiException {
        updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdWithHttpInfo(uuid, committedBurstSize);
    }

    /**
     * Update committed-burst-size by ID
     * Update operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param committedBurstSize committed-burst-sizebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdWithHttpInfo(String uuid, CapacityValue committedBurstSize) throws ApiException {
        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdCall(uuid, committedBurstSize, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update committed-burst-size by ID (asynchronously)
     * Update operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param committedBurstSize committed-burst-sizebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdAsync(String uuid, CapacityValue committedBurstSize, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdCall(uuid, committedBurstSize, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById */
    private com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdCall(String uuid, CapacityValue committedInformationRate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = committedInformationRate;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById(Async)");
        }
        
        // verify the required parameter 'committedInformationRate' is set
        if (committedInformationRate == null) {
            throw new ApiException("Missing the required parameter 'committedInformationRate' when calling updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/requested-capacity/bandwidth-profile/committed-information-rate/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Update committed-information-rate by ID
     * Update operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param committedInformationRate committed-information-ratebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById(String uuid, CapacityValue committedInformationRate) throws ApiException {
        updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdWithHttpInfo(uuid, committedInformationRate);
    }

    /**
     * Update committed-information-rate by ID
     * Update operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param committedInformationRate committed-information-ratebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdWithHttpInfo(String uuid, CapacityValue committedInformationRate) throws ApiException {
        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdCall(uuid, committedInformationRate, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update committed-information-rate by ID (asynchronously)
     * Update operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param committedInformationRate committed-information-ratebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdAsync(String uuid, CapacityValue committedInformationRate, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdCall(uuid, committedInformationRate, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById */
    private com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdCall(String uuid, CapacityValue peakBurstSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = peakBurstSize;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById(Async)");
        }
        
        // verify the required parameter 'peakBurstSize' is set
        if (peakBurstSize == null) {
            throw new ApiException("Missing the required parameter 'peakBurstSize' when calling updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/requested-capacity/bandwidth-profile/peak-burst-size/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Update peak-burst-size by ID
     * Update operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param peakBurstSize peak-burst-sizebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById(String uuid, CapacityValue peakBurstSize) throws ApiException {
        updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdWithHttpInfo(uuid, peakBurstSize);
    }

    /**
     * Update peak-burst-size by ID
     * Update operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param peakBurstSize peak-burst-sizebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdWithHttpInfo(String uuid, CapacityValue peakBurstSize) throws ApiException {
        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdCall(uuid, peakBurstSize, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update peak-burst-size by ID (asynchronously)
     * Update operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param peakBurstSize peak-burst-sizebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdAsync(String uuid, CapacityValue peakBurstSize, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdCall(uuid, peakBurstSize, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateById */
    private com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdCall(String uuid, CapacityValue peakInformationRate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = peakInformationRate;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateById(Async)");
        }
        
        // verify the required parameter 'peakInformationRate' is set
        if (peakInformationRate == null) {
            throw new ApiException("Missing the required parameter 'peakInformationRate' when calling updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/requested-capacity/bandwidth-profile/peak-information-rate/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Update peak-information-rate by ID
     * Update operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param peakInformationRate peak-information-ratebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateById(String uuid, CapacityValue peakInformationRate) throws ApiException {
        updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdWithHttpInfo(uuid, peakInformationRate);
    }

    /**
     * Update peak-information-rate by ID
     * Update operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param peakInformationRate peak-information-ratebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdWithHttpInfo(String uuid, CapacityValue peakInformationRate) throws ApiException {
        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdCall(uuid, peakInformationRate, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update peak-information-rate by ID (asynchronously)
     * Update operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param peakInformationRate peak-information-ratebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdAsync(String uuid, CapacityValue peakInformationRate, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdCall(uuid, peakInformationRate, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for updateContextConnectivityContextConnectivityServiceRequestedCapacityRequestedCapacityById */
    private com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceRequestedCapacityRequestedCapacityByIdCall(String uuid, Capacity requestedCapacity, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = requestedCapacity;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextConnectivityContextConnectivityServiceRequestedCapacityRequestedCapacityById(Async)");
        }
        
        // verify the required parameter 'requestedCapacity' is set
        if (requestedCapacity == null) {
            throw new ApiException("Missing the required parameter 'requestedCapacity' when calling updateContextConnectivityContextConnectivityServiceRequestedCapacityRequestedCapacityById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/requested-capacity/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Update requested-capacity by ID
     * Update operation of resource: requested-capacity
     * @param uuid ID of uuid (required)
     * @param requestedCapacity requested-capacitybody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextConnectivityContextConnectivityServiceRequestedCapacityRequestedCapacityById(String uuid, Capacity requestedCapacity) throws ApiException {
        updateContextConnectivityContextConnectivityServiceRequestedCapacityRequestedCapacityByIdWithHttpInfo(uuid, requestedCapacity);
    }

    /**
     * Update requested-capacity by ID
     * Update operation of resource: requested-capacity
     * @param uuid ID of uuid (required)
     * @param requestedCapacity requested-capacitybody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextConnectivityContextConnectivityServiceRequestedCapacityRequestedCapacityByIdWithHttpInfo(String uuid, Capacity requestedCapacity) throws ApiException {
        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceRequestedCapacityRequestedCapacityByIdCall(uuid, requestedCapacity, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update requested-capacity by ID (asynchronously)
     * Update operation of resource: requested-capacity
     * @param uuid ID of uuid (required)
     * @param requestedCapacity requested-capacitybody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceRequestedCapacityRequestedCapacityByIdAsync(String uuid, Capacity requestedCapacity, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceRequestedCapacityRequestedCapacityByIdCall(uuid, requestedCapacity, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for updateContextConnectivityContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeById */
    private com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeByIdCall(String uuid, CapacityValue totalSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = totalSize;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextConnectivityContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeById(Async)");
        }
        
        // verify the required parameter 'totalSize' is set
        if (totalSize == null) {
            throw new ApiException("Missing the required parameter 'totalSize' when calling updateContextConnectivityContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/requested-capacity/total-size/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Update total-size by ID
     * Update operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param totalSize total-sizebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextConnectivityContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeById(String uuid, CapacityValue totalSize) throws ApiException {
        updateContextConnectivityContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeByIdWithHttpInfo(uuid, totalSize);
    }

    /**
     * Update total-size by ID
     * Update operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param totalSize total-sizebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextConnectivityContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeByIdWithHttpInfo(String uuid, CapacityValue totalSize) throws ApiException {
        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeByIdCall(uuid, totalSize, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update total-size by ID (asynchronously)
     * Update operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param totalSize total-sizebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeByIdAsync(String uuid, CapacityValue totalSize, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeByIdCall(uuid, totalSize, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for updateContextConnectivityContextConnectivityServiceResilienceTypeResilienceTypeById */
    private com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceResilienceTypeResilienceTypeByIdCall(String uuid, ResilienceType resilienceType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = resilienceType;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextConnectivityContextConnectivityServiceResilienceTypeResilienceTypeById(Async)");
        }
        
        // verify the required parameter 'resilienceType' is set
        if (resilienceType == null) {
            throw new ApiException("Missing the required parameter 'resilienceType' when calling updateContextConnectivityContextConnectivityServiceResilienceTypeResilienceTypeById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/resilience-type/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Update resilience-type by ID
     * Update operation of resource: resilience-type
     * @param uuid ID of uuid (required)
     * @param resilienceType resilience-typebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextConnectivityContextConnectivityServiceResilienceTypeResilienceTypeById(String uuid, ResilienceType resilienceType) throws ApiException {
        updateContextConnectivityContextConnectivityServiceResilienceTypeResilienceTypeByIdWithHttpInfo(uuid, resilienceType);
    }

    /**
     * Update resilience-type by ID
     * Update operation of resource: resilience-type
     * @param uuid ID of uuid (required)
     * @param resilienceType resilience-typebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextConnectivityContextConnectivityServiceResilienceTypeResilienceTypeByIdWithHttpInfo(String uuid, ResilienceType resilienceType) throws ApiException {
        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceResilienceTypeResilienceTypeByIdCall(uuid, resilienceType, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update resilience-type by ID (asynchronously)
     * Update operation of resource: resilience-type
     * @param uuid ID of uuid (required)
     * @param resilienceType resilience-typebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceResilienceTypeResilienceTypeByIdAsync(String uuid, ResilienceType resilienceType, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceResilienceTypeResilienceTypeByIdCall(uuid, resilienceType, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for updateContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicById */
    private com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicByIdCall(String uuid, String riskCharacteristicName, RiskCharacteristic riskDiversityCharacteristic, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = riskDiversityCharacteristic;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicById(Async)");
        }
        
        // verify the required parameter 'riskCharacteristicName' is set
        if (riskCharacteristicName == null) {
            throw new ApiException("Missing the required parameter 'riskCharacteristicName' when calling updateContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicById(Async)");
        }
        
        // verify the required parameter 'riskDiversityCharacteristic' is set
        if (riskDiversityCharacteristic == null) {
            throw new ApiException("Missing the required parameter 'riskDiversityCharacteristic' when calling updateContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/risk-diversity-characteristic/{risk_characteristic_name}/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
        .replaceAll("\\{" + "risk_characteristic_name" + "\\}", apiClient.escapeString(riskCharacteristicName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Update risk-diversity-characteristic by ID
     * Update operation of resource: risk-diversity-characteristic
     * @param uuid ID of uuid (required)
     * @param riskCharacteristicName ID of risk_characteristic_name (required)
     * @param riskDiversityCharacteristic risk-diversity-characteristicbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicById(String uuid, String riskCharacteristicName, RiskCharacteristic riskDiversityCharacteristic) throws ApiException {
        updateContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicByIdWithHttpInfo(uuid, riskCharacteristicName, riskDiversityCharacteristic);
    }

    /**
     * Update risk-diversity-characteristic by ID
     * Update operation of resource: risk-diversity-characteristic
     * @param uuid ID of uuid (required)
     * @param riskCharacteristicName ID of risk_characteristic_name (required)
     * @param riskDiversityCharacteristic risk-diversity-characteristicbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicByIdWithHttpInfo(String uuid, String riskCharacteristicName, RiskCharacteristic riskDiversityCharacteristic) throws ApiException {
        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicByIdCall(uuid, riskCharacteristicName, riskDiversityCharacteristic, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update risk-diversity-characteristic by ID (asynchronously)
     * Update operation of resource: risk-diversity-characteristic
     * @param uuid ID of uuid (required)
     * @param riskCharacteristicName ID of risk_characteristic_name (required)
     * @param riskDiversityCharacteristic risk-diversity-characteristicbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicByIdAsync(String uuid, String riskCharacteristicName, RiskCharacteristic riskDiversityCharacteristic, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicByIdCall(uuid, riskCharacteristicName, riskDiversityCharacteristic, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for updateContextConnectivityContextConnectivityServiceScheduleScheduleById */
    private com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceScheduleScheduleByIdCall(String uuid, TimeRange schedule, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = schedule;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextConnectivityContextConnectivityServiceScheduleScheduleById(Async)");
        }
        
        // verify the required parameter 'schedule' is set
        if (schedule == null) {
            throw new ApiException("Missing the required parameter 'schedule' when calling updateContextConnectivityContextConnectivityServiceScheduleScheduleById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/connectivity-context/connectivity-service/{uuid}/schedule/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Update schedule by ID
     * Update operation of resource: schedule
     * @param uuid ID of uuid (required)
     * @param schedule schedulebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextConnectivityContextConnectivityServiceScheduleScheduleById(String uuid, TimeRange schedule) throws ApiException {
        updateContextConnectivityContextConnectivityServiceScheduleScheduleByIdWithHttpInfo(uuid, schedule);
    }

    /**
     * Update schedule by ID
     * Update operation of resource: schedule
     * @param uuid ID of uuid (required)
     * @param schedule schedulebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextConnectivityContextConnectivityServiceScheduleScheduleByIdWithHttpInfo(String uuid, TimeRange schedule) throws ApiException {
        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceScheduleScheduleByIdCall(uuid, schedule, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update schedule by ID (asynchronously)
     * Update operation of resource: schedule
     * @param uuid ID of uuid (required)
     * @param schedule schedulebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextConnectivityContextConnectivityServiceScheduleScheduleByIdAsync(String uuid, TimeRange schedule, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextConnectivityContextConnectivityServiceScheduleScheduleByIdCall(uuid, schedule, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
