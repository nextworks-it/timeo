/**
 * tapi-connectivity API
 * tapi-connectivity API generated from tapi-connectivity@2018-12-10.yang
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.AdminStatePac;
import io.swagger.client.model.Capacity;
import io.swagger.client.model.CapacityPac;
import io.swagger.client.model.NameAndValue;
import io.swagger.client.model.NodeEdgePointRef;
import io.swagger.client.model.ResourceSpec;
import io.swagger.client.model.ServiceInterfacePointRef;
import io.swagger.client.model.TerminationPac;
import java.util.ArrayList;
import java.util.List;


/**
 * The LogicalTerminationPoint (LTP) object class encapsulates the termination and adaptation functions of one or more transport layers. The structure of LTP supports all transport protocols including circuit and packet forms.
 */
@ApiModel(description = "The LogicalTerminationPoint (LTP) object class encapsulates the termination and adaptation functions of one or more transport layers. The structure of LTP supports all transport protocols including circuit and packet forms.")
@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2019-07-09T12:42:21.668+02:00")
public class NodeEdgePoint   {
  /**
   * Gets or Sets layerProtocolName
   */
  public enum LayerProtocolNameEnum {
    @SerializedName("ODU")
    ODU("ODU"),
    
    @SerializedName("ETH")
    ETH("ETH"),
    
    @SerializedName("DSR")
    DSR("DSR"),
    
    @SerializedName("PHOTONIC_MEDIA")
    PHOTONIC_MEDIA("PHOTONIC_MEDIA");

    private String value;

    LayerProtocolNameEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("layer-protocol-name")
  private LayerProtocolNameEnum layerProtocolName = null;

  @SerializedName("mapped-service-interface-point")
  private List<ServiceInterfacePointRef> mappedServiceInterfacePoint = new ArrayList<ServiceInterfacePointRef>();

  @SerializedName("supported-cep-layer-protocol-qualifier")
  private List<String> supportedCepLayerProtocolQualifier = new ArrayList<String>();

  /**
   * The orientation of defined flow at the LinkEnd.
   */
  public enum LinkPortDirectionEnum {
    @SerializedName("BIDIRECTIONAL")
    BIDIRECTIONAL("BIDIRECTIONAL"),
    
    @SerializedName("INPUT")
    INPUT("INPUT"),
    
    @SerializedName("OUTPUT")
    OUTPUT("OUTPUT"),
    
    @SerializedName("UNIDENTIFIED_OR_UNKNOWN")
    UNIDENTIFIED_OR_UNKNOWN("UNIDENTIFIED_OR_UNKNOWN");

    private String value;

    LinkPortDirectionEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("link-port-direction")
  private LinkPortDirectionEnum linkPortDirection = null;

  @SerializedName("aggregated-node-edge-point")
  private List<NodeEdgePointRef> aggregatedNodeEdgePoint = new ArrayList<NodeEdgePointRef>();

  /**
   * Each LinkEnd of the Link has a role (e.g., symmetric, hub, spoke, leaf, root)  in the context of the Link with respect to the Link function. 
   */
  public enum LinkPortRoleEnum {
    @SerializedName("SYMMETRIC")
    SYMMETRIC("SYMMETRIC"),
    
    @SerializedName("ROOT")
    ROOT("ROOT"),
    
    @SerializedName("LEAF")
    LEAF("LEAF"),
    
    @SerializedName("TRUNK")
    TRUNK("TRUNK"),
    
    @SerializedName("UNKNOWN")
    UNKNOWN("UNKNOWN");

    private String value;

    LinkPortRoleEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("link-port-role")
  private LinkPortRoleEnum linkPortRole = null;

  public NodeEdgePoint layerProtocolName(LayerProtocolNameEnum layerProtocolName) {
    this.layerProtocolName = layerProtocolName;
    return this;
  }

   /**
   * Get layerProtocolName
   * @return layerProtocolName
  **/
  @ApiModelProperty(example = "null", value = "")
  public LayerProtocolNameEnum getLayerProtocolName() {
    return layerProtocolName;
  }

  public void setLayerProtocolName(LayerProtocolNameEnum layerProtocolName) {
    this.layerProtocolName = layerProtocolName;
  }

  public NodeEdgePoint mappedServiceInterfacePoint(List<ServiceInterfacePointRef> mappedServiceInterfacePoint) {
    this.mappedServiceInterfacePoint = mappedServiceInterfacePoint;
    return this;
  }

  public NodeEdgePoint addMappedServiceInterfacePointItem(ServiceInterfacePointRef mappedServiceInterfacePointItem) {
    this.mappedServiceInterfacePoint.add(mappedServiceInterfacePointItem);
    return this;
  }

   /**
   * NodeEdgePoint mapped to more than ServiceInterfacePoint (slicing/virtualizing) or a ServiceInterfacePoint mapped to more than one NodeEdgePoint (load balancing/Resilience) should be considered experimental
   * @return mappedServiceInterfacePoint
  **/
  @ApiModelProperty(example = "null", value = "NodeEdgePoint mapped to more than ServiceInterfacePoint (slicing/virtualizing) or a ServiceInterfacePoint mapped to more than one NodeEdgePoint (load balancing/Resilience) should be considered experimental")
  public List<ServiceInterfacePointRef> getMappedServiceInterfacePoint() {
    return mappedServiceInterfacePoint;
  }

  public void setMappedServiceInterfacePoint(List<ServiceInterfacePointRef> mappedServiceInterfacePoint) {
    this.mappedServiceInterfacePoint = mappedServiceInterfacePoint;
  }

  public NodeEdgePoint supportedCepLayerProtocolQualifier(List<String> supportedCepLayerProtocolQualifier) {
    this.supportedCepLayerProtocolQualifier = supportedCepLayerProtocolQualifier;
    return this;
  }

  public NodeEdgePoint addSupportedCepLayerProtocolQualifierItem(String supportedCepLayerProtocolQualifierItem) {
    this.supportedCepLayerProtocolQualifier.add(supportedCepLayerProtocolQualifierItem);
    return this;
  }

   /**
   * Get supportedCepLayerProtocolQualifier
   * @return supportedCepLayerProtocolQualifier
  **/
  @ApiModelProperty(example = "null", value = "")
  public List<String> getSupportedCepLayerProtocolQualifier() {
    return supportedCepLayerProtocolQualifier;
  }

  public void setSupportedCepLayerProtocolQualifier(List<String> supportedCepLayerProtocolQualifier) {
    this.supportedCepLayerProtocolQualifier = supportedCepLayerProtocolQualifier;
  }

  public NodeEdgePoint linkPortDirection(LinkPortDirectionEnum linkPortDirection) {
    this.linkPortDirection = linkPortDirection;
    return this;
  }

   /**
   * The orientation of defined flow at the LinkEnd.
   * @return linkPortDirection
  **/
  @ApiModelProperty(example = "null", value = "The orientation of defined flow at the LinkEnd.")
  public LinkPortDirectionEnum getLinkPortDirection() {
    return linkPortDirection;
  }

  public void setLinkPortDirection(LinkPortDirectionEnum linkPortDirection) {
    this.linkPortDirection = linkPortDirection;
  }

  public NodeEdgePoint aggregatedNodeEdgePoint(List<NodeEdgePointRef> aggregatedNodeEdgePoint) {
    this.aggregatedNodeEdgePoint = aggregatedNodeEdgePoint;
    return this;
  }

  public NodeEdgePoint addAggregatedNodeEdgePointItem(NodeEdgePointRef aggregatedNodeEdgePointItem) {
    this.aggregatedNodeEdgePoint.add(aggregatedNodeEdgePointItem);
    return this;
  }

   /**
   * Get aggregatedNodeEdgePoint
   * @return aggregatedNodeEdgePoint
  **/
  @ApiModelProperty(example = "null", value = "")
  public List<NodeEdgePointRef> getAggregatedNodeEdgePoint() {
    return aggregatedNodeEdgePoint;
  }

  public void setAggregatedNodeEdgePoint(List<NodeEdgePointRef> aggregatedNodeEdgePoint) {
    this.aggregatedNodeEdgePoint = aggregatedNodeEdgePoint;
  }

  public NodeEdgePoint linkPortRole(LinkPortRoleEnum linkPortRole) {
    this.linkPortRole = linkPortRole;
    return this;
  }

   /**
   * Each LinkEnd of the Link has a role (e.g., symmetric, hub, spoke, leaf, root)  in the context of the Link with respect to the Link function. 
   * @return linkPortRole
  **/
  @ApiModelProperty(example = "null", value = "Each LinkEnd of the Link has a role (e.g., symmetric, hub, spoke, leaf, root)  in the context of the Link with respect to the Link function. ")
  public LinkPortRoleEnum getLinkPortRole() {
    return linkPortRole;
  }

  public void setLinkPortRole(LinkPortRoleEnum linkPortRole) {
    this.linkPortRole = linkPortRole;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NodeEdgePoint nodeEdgePoint = (NodeEdgePoint) o;
    return Objects.equals(this.layerProtocolName, nodeEdgePoint.layerProtocolName) &&
        Objects.equals(this.mappedServiceInterfacePoint, nodeEdgePoint.mappedServiceInterfacePoint) &&
        Objects.equals(this.supportedCepLayerProtocolQualifier, nodeEdgePoint.supportedCepLayerProtocolQualifier) &&
        Objects.equals(this.linkPortDirection, nodeEdgePoint.linkPortDirection) &&
        Objects.equals(this.aggregatedNodeEdgePoint, nodeEdgePoint.aggregatedNodeEdgePoint) &&
        Objects.equals(this.linkPortRole, nodeEdgePoint.linkPortRole);
  }

  @Override
  public int hashCode() {
    return Objects.hash(layerProtocolName, mappedServiceInterfacePoint, supportedCepLayerProtocolQualifier, linkPortDirection, aggregatedNodeEdgePoint, linkPortRole);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NodeEdgePoint {\n");
    
    sb.append("    layerProtocolName: ").append(toIndentedString(layerProtocolName)).append("\n");
    sb.append("    mappedServiceInterfacePoint: ").append(toIndentedString(mappedServiceInterfacePoint)).append("\n");
    sb.append("    supportedCepLayerProtocolQualifier: ").append(toIndentedString(supportedCepLayerProtocolQualifier)).append("\n");
    sb.append("    linkPortDirection: ").append(toIndentedString(linkPortDirection)).append("\n");
    sb.append("    aggregatedNodeEdgePoint: ").append(toIndentedString(aggregatedNodeEdgePoint)).append("\n");
    sb.append("    linkPortRole: ").append(toIndentedString(linkPortRole)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

