/**
 * tapi-connectivity API
 * tapi-connectivity API generated from tapi-connectivity@2018-12-10.yang
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.LocalClass;
import io.swagger.client.model.NameAndValue;
import java.util.List;


/**
 * PathObjectiveFunction
 */
@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2019-07-09T12:42:21.668+02:00")
public class PathObjectiveFunction   {
  @SerializedName("concurrent-paths")
  private String concurrentPaths = null;

  @SerializedName("link-utilization")
  private String linkUtilization = null;

  @SerializedName("bandwidth-optimization")
  private String bandwidthOptimization = null;

  @SerializedName("cost-optimization")
  private String costOptimization = null;

  @SerializedName("resource-sharing")
  private String resourceSharing = null;

  public PathObjectiveFunction concurrentPaths(String concurrentPaths) {
    this.concurrentPaths = concurrentPaths;
    return this;
  }

   /**
   * Get concurrentPaths
   * @return concurrentPaths
  **/
  @ApiModelProperty(example = "null", value = "")
  public String getConcurrentPaths() {
    return concurrentPaths;
  }

  public void setConcurrentPaths(String concurrentPaths) {
    this.concurrentPaths = concurrentPaths;
  }

  public PathObjectiveFunction linkUtilization(String linkUtilization) {
    this.linkUtilization = linkUtilization;
    return this;
  }

   /**
   * Get linkUtilization
   * @return linkUtilization
  **/
  @ApiModelProperty(example = "null", value = "")
  public String getLinkUtilization() {
    return linkUtilization;
  }

  public void setLinkUtilization(String linkUtilization) {
    this.linkUtilization = linkUtilization;
  }

  public PathObjectiveFunction bandwidthOptimization(String bandwidthOptimization) {
    this.bandwidthOptimization = bandwidthOptimization;
    return this;
  }

   /**
   * Get bandwidthOptimization
   * @return bandwidthOptimization
  **/
  @ApiModelProperty(example = "null", value = "")
  public String getBandwidthOptimization() {
    return bandwidthOptimization;
  }

  public void setBandwidthOptimization(String bandwidthOptimization) {
    this.bandwidthOptimization = bandwidthOptimization;
  }

  public PathObjectiveFunction costOptimization(String costOptimization) {
    this.costOptimization = costOptimization;
    return this;
  }

   /**
   * Get costOptimization
   * @return costOptimization
  **/
  @ApiModelProperty(example = "null", value = "")
  public String getCostOptimization() {
    return costOptimization;
  }

  public void setCostOptimization(String costOptimization) {
    this.costOptimization = costOptimization;
  }

  public PathObjectiveFunction resourceSharing(String resourceSharing) {
    this.resourceSharing = resourceSharing;
    return this;
  }

   /**
   * Get resourceSharing
   * @return resourceSharing
  **/
  @ApiModelProperty(example = "null", value = "")
  public String getResourceSharing() {
    return resourceSharing;
  }

  public void setResourceSharing(String resourceSharing) {
    this.resourceSharing = resourceSharing;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PathObjectiveFunction pathObjectiveFunction = (PathObjectiveFunction) o;
    return Objects.equals(this.concurrentPaths, pathObjectiveFunction.concurrentPaths) &&
        Objects.equals(this.linkUtilization, pathObjectiveFunction.linkUtilization) &&
        Objects.equals(this.bandwidthOptimization, pathObjectiveFunction.bandwidthOptimization) &&
        Objects.equals(this.costOptimization, pathObjectiveFunction.costOptimization) &&
        Objects.equals(this.resourceSharing, pathObjectiveFunction.resourceSharing);
  }

  @Override
  public int hashCode() {
    return Objects.hash(concurrentPaths, linkUtilization, bandwidthOptimization, costOptimization, resourceSharing);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PathObjectiveFunction {\n");
    
    sb.append("    concurrentPaths: ").append(toIndentedString(concurrentPaths)).append("\n");
    sb.append("    linkUtilization: ").append(toIndentedString(linkUtilization)).append("\n");
    sb.append("    bandwidthOptimization: ").append(toIndentedString(bandwidthOptimization)).append("\n");
    sb.append("    costOptimization: ").append(toIndentedString(costOptimization)).append("\n");
    sb.append("    resourceSharing: ").append(toIndentedString(resourceSharing)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

