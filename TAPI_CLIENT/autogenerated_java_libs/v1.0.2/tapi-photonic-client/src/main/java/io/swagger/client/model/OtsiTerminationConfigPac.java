/*
 * tapi-photonic-media API
 * tapi-photonic-media API generated from tapi-photonic-media@2018-12-10.yang
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.ApplicationIdentifier;
import io.swagger.client.model.CentralFrequency;
import io.swagger.client.model.PowerPropertiesPac;
import io.swagger.client.model.SpectrumBand;
import java.io.IOException;

/**
 * OtsiTerminationConfigPac
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-07-09T14:10:37.064+02:00")
public class OtsiTerminationConfigPac {
  /**
   * The modulation techniqu selected at the source.
   */
  @JsonAdapter(ModulationEnum.Adapter.class)
  public enum ModulationEnum {
    RZ("RZ"),
    
    NRZ("NRZ"),
    
    BPSK("BPSK"),
    
    DPSK("DPSK"),
    
    QPSK("QPSK"),
    
    _8QAM("8QAM"),
    
    _16QAM("16QAM"),
    
    PAM4("PAM4"),
    
    PAM8("PAM8"),
    
    UNDEFINED("UNDEFINED");

    private String value;

    ModulationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ModulationEnum fromValue(String text) {
      for (ModulationEnum b : ModulationEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ModulationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ModulationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ModulationEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ModulationEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("modulation")
  private ModulationEnum modulation = null;

  @SerializedName("spectrum")
  private SpectrumBand spectrum = null;

  @SerializedName("application-identifier")
  private ApplicationIdentifier applicationIdentifier = null;

  @SerializedName("total-power-warn-threshold-upper")
  private Double totalPowerWarnThresholdUpper = null;

  @SerializedName("transmit-power")
  private PowerPropertiesPac transmitPower = null;

  /**
   * Laser control can be FORCED-ON, FORCED-OFF or LASER-SHUTDOWN
   */
  @JsonAdapter(LaserControlEnum.Adapter.class)
  public enum LaserControlEnum {
    FORCED_ON("FORCED-ON"),
    
    FORCED_OFF("FORCED-OFF"),
    
    AUTOMATIC_LASER_SHUTDOWN("AUTOMATIC-LASER-SHUTDOWN"),
    
    UNDEFINED("UNDEFINED");

    private String value;

    LaserControlEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LaserControlEnum fromValue(String text) {
      for (LaserControlEnum b : LaserControlEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<LaserControlEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LaserControlEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LaserControlEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return LaserControlEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("laser-control")
  private LaserControlEnum laserControl = null;

  @SerializedName("total-power-warn-threshold-lower")
  private Double totalPowerWarnThresholdLower = null;

  @SerializedName("central-frequency")
  private CentralFrequency centralFrequency = null;

  public OtsiTerminationConfigPac modulation(ModulationEnum modulation) {
    this.modulation = modulation;
    return this;
  }

   /**
   * The modulation techniqu selected at the source.
   * @return modulation
  **/
  @ApiModelProperty(value = "The modulation techniqu selected at the source.")
  public ModulationEnum getModulation() {
    return modulation;
  }

  public void setModulation(ModulationEnum modulation) {
    this.modulation = modulation;
  }

  public OtsiTerminationConfigPac spectrum(SpectrumBand spectrum) {
    this.spectrum = spectrum;
    return this;
  }

   /**
   * Get spectrum
   * @return spectrum
  **/
  @ApiModelProperty(value = "")
  public SpectrumBand getSpectrum() {
    return spectrum;
  }

  public void setSpectrum(SpectrumBand spectrum) {
    this.spectrum = spectrum;
  }

  public OtsiTerminationConfigPac applicationIdentifier(ApplicationIdentifier applicationIdentifier) {
    this.applicationIdentifier = applicationIdentifier;
    return this;
  }

   /**
   * This attribute indicates the selected Application Identifier.
   * @return applicationIdentifier
  **/
  @ApiModelProperty(value = "This attribute indicates the selected Application Identifier.")
  public ApplicationIdentifier getApplicationIdentifier() {
    return applicationIdentifier;
  }

  public void setApplicationIdentifier(ApplicationIdentifier applicationIdentifier) {
    this.applicationIdentifier = applicationIdentifier;
  }

  public OtsiTerminationConfigPac totalPowerWarnThresholdUpper(Double totalPowerWarnThresholdUpper) {
    this.totalPowerWarnThresholdUpper = totalPowerWarnThresholdUpper;
    return this;
  }

   /**
   * Allows to configure the Upper power threshold which is expected to be different from Default, but within the Min and Max values specified as OTSi SIP capability.
   * @return totalPowerWarnThresholdUpper
  **/
  @ApiModelProperty(value = "Allows to configure the Upper power threshold which is expected to be different from Default, but within the Min and Max values specified as OTSi SIP capability.")
  public Double getTotalPowerWarnThresholdUpper() {
    return totalPowerWarnThresholdUpper;
  }

  public void setTotalPowerWarnThresholdUpper(Double totalPowerWarnThresholdUpper) {
    this.totalPowerWarnThresholdUpper = totalPowerWarnThresholdUpper;
  }

  public OtsiTerminationConfigPac transmitPower(PowerPropertiesPac transmitPower) {
    this.transmitPower = transmitPower;
    return this;
  }

   /**
   * Transmit power as requested.
   * @return transmitPower
  **/
  @ApiModelProperty(value = "Transmit power as requested.")
  public PowerPropertiesPac getTransmitPower() {
    return transmitPower;
  }

  public void setTransmitPower(PowerPropertiesPac transmitPower) {
    this.transmitPower = transmitPower;
  }

  public OtsiTerminationConfigPac laserControl(LaserControlEnum laserControl) {
    this.laserControl = laserControl;
    return this;
  }

   /**
   * Laser control can be FORCED-ON, FORCED-OFF or LASER-SHUTDOWN
   * @return laserControl
  **/
  @ApiModelProperty(value = "Laser control can be FORCED-ON, FORCED-OFF or LASER-SHUTDOWN")
  public LaserControlEnum getLaserControl() {
    return laserControl;
  }

  public void setLaserControl(LaserControlEnum laserControl) {
    this.laserControl = laserControl;
  }

  public OtsiTerminationConfigPac totalPowerWarnThresholdLower(Double totalPowerWarnThresholdLower) {
    this.totalPowerWarnThresholdLower = totalPowerWarnThresholdLower;
    return this;
  }

   /**
   * Allows to configure the Lowerpower threshold which is expected to be different from Default, but within the Min and Max values specified as OTSi SIP capability.
   * @return totalPowerWarnThresholdLower
  **/
  @ApiModelProperty(value = "Allows to configure the Lowerpower threshold which is expected to be different from Default, but within the Min and Max values specified as OTSi SIP capability.")
  public Double getTotalPowerWarnThresholdLower() {
    return totalPowerWarnThresholdLower;
  }

  public void setTotalPowerWarnThresholdLower(Double totalPowerWarnThresholdLower) {
    this.totalPowerWarnThresholdLower = totalPowerWarnThresholdLower;
  }

  public OtsiTerminationConfigPac centralFrequency(CentralFrequency centralFrequency) {
    this.centralFrequency = centralFrequency;
    return this;
  }

   /**
   * The central frequency of the laser. It is the oscillation frequency of the corresponding electromagnetic wave
   * @return centralFrequency
  **/
  @ApiModelProperty(value = "The central frequency of the laser. It is the oscillation frequency of the corresponding electromagnetic wave")
  public CentralFrequency getCentralFrequency() {
    return centralFrequency;
  }

  public void setCentralFrequency(CentralFrequency centralFrequency) {
    this.centralFrequency = centralFrequency;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OtsiTerminationConfigPac otsiTerminationConfigPac = (OtsiTerminationConfigPac) o;
    return Objects.equals(this.modulation, otsiTerminationConfigPac.modulation) &&
        Objects.equals(this.spectrum, otsiTerminationConfigPac.spectrum) &&
        Objects.equals(this.applicationIdentifier, otsiTerminationConfigPac.applicationIdentifier) &&
        Objects.equals(this.totalPowerWarnThresholdUpper, otsiTerminationConfigPac.totalPowerWarnThresholdUpper) &&
        Objects.equals(this.transmitPower, otsiTerminationConfigPac.transmitPower) &&
        Objects.equals(this.laserControl, otsiTerminationConfigPac.laserControl) &&
        Objects.equals(this.totalPowerWarnThresholdLower, otsiTerminationConfigPac.totalPowerWarnThresholdLower) &&
        Objects.equals(this.centralFrequency, otsiTerminationConfigPac.centralFrequency);
  }

  @Override
  public int hashCode() {
    return Objects.hash(modulation, spectrum, applicationIdentifier, totalPowerWarnThresholdUpper, transmitPower, laserControl, totalPowerWarnThresholdLower, centralFrequency);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OtsiTerminationConfigPac {\n");
    
    sb.append("    modulation: ").append(toIndentedString(modulation)).append("\n");
    sb.append("    spectrum: ").append(toIndentedString(spectrum)).append("\n");
    sb.append("    applicationIdentifier: ").append(toIndentedString(applicationIdentifier)).append("\n");
    sb.append("    totalPowerWarnThresholdUpper: ").append(toIndentedString(totalPowerWarnThresholdUpper)).append("\n");
    sb.append("    transmitPower: ").append(toIndentedString(transmitPower)).append("\n");
    sb.append("    laserControl: ").append(toIndentedString(laserControl)).append("\n");
    sb.append("    totalPowerWarnThresholdLower: ").append(toIndentedString(totalPowerWarnThresholdLower)).append("\n");
    sb.append("    centralFrequency: ").append(toIndentedString(centralFrequency)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

