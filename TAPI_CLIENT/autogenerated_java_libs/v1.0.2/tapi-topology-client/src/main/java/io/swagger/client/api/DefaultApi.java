/**
 * tapi-topology API
 * tapi-topology API generated from tapi-topology@2018-12-10.yang
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import io.swagger.client.model.ContextSchema;
import io.swagger.client.model.GetLinkDetailsRPCInputSchema;
import io.swagger.client.model.GetLinkDetailsRPCOutputSchema;
import io.swagger.client.model.GetNodeDetailsRPCOutputSchema;
import io.swagger.client.model.GetNodeDetailsRPCInputSchema;
import io.swagger.client.model.GetNodeEdgePointDetailsRPCOutputSchema;
import io.swagger.client.model.GetNodeEdgePointDetailsRPCInputSchema;
import io.swagger.client.model.GetServiceInterfacePointDetailsRPCOutputSchema;
import io.swagger.client.model.GetServiceInterfacePointDetailsRPCInputSchema;
import io.swagger.client.model.GetServiceInterfacePointListRPCOutputSchema;
import io.swagger.client.model.GetTopologyDetailsRPCOutputSchema;
import io.swagger.client.model.GetTopologyDetailsRPCInputSchema;
import io.swagger.client.model.GetTopologyListRPCOutputSchema;
import io.swagger.client.model.UpdateServiceInterfacePointRPCInputSchema;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient apiClient;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for createContextById */
    private com.squareup.okhttp.Call createContextByIdCall(ContextSchema context, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = context;
        
        // verify the required parameter 'context' is set
        if (context == null) {
            throw new ApiException("Missing the required parameter 'context' when calling createContextById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Create context by ID
     * Create operation of resource: context
     * @param context contextbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextById(ContextSchema context) throws ApiException {
        createContextByIdWithHttpInfo(context);
    }

    /**
     * Create context by ID
     * Create operation of resource: context
     * @param context contextbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextByIdWithHttpInfo(ContextSchema context) throws ApiException {
        com.squareup.okhttp.Call call = createContextByIdCall(context, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create context by ID (asynchronously)
     * Create operation of resource: context
     * @param context contextbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextByIdAsync(ContextSchema context, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextByIdCall(context, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for createGetLinkDetailsById */
    private com.squareup.okhttp.Call createGetLinkDetailsByIdCall(GetLinkDetailsRPCInputSchema getLinkDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = getLinkDetails;
        
        // verify the required parameter 'getLinkDetails' is set
        if (getLinkDetails == null) {
            throw new ApiException("Missing the required parameter 'getLinkDetails' when calling createGetLinkDetailsById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/operations/get-link-details/".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Create get-link-details by ID
     * Create operation of resource: get-link-details
     * @param getLinkDetails get-link-detailsbody object (required)
     * @return GetLinkDetailsRPCOutputSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetLinkDetailsRPCOutputSchema createGetLinkDetailsById(GetLinkDetailsRPCInputSchema getLinkDetails) throws ApiException {
        ApiResponse<GetLinkDetailsRPCOutputSchema> resp = createGetLinkDetailsByIdWithHttpInfo(getLinkDetails);
        return resp.getData();
    }

    /**
     * Create get-link-details by ID
     * Create operation of resource: get-link-details
     * @param getLinkDetails get-link-detailsbody object (required)
     * @return ApiResponse&lt;GetLinkDetailsRPCOutputSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetLinkDetailsRPCOutputSchema> createGetLinkDetailsByIdWithHttpInfo(GetLinkDetailsRPCInputSchema getLinkDetails) throws ApiException {
        com.squareup.okhttp.Call call = createGetLinkDetailsByIdCall(getLinkDetails, null, null);
        Type localVarReturnType = new TypeToken<GetLinkDetailsRPCOutputSchema>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create get-link-details by ID (asynchronously)
     * Create operation of resource: get-link-details
     * @param getLinkDetails get-link-detailsbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createGetLinkDetailsByIdAsync(GetLinkDetailsRPCInputSchema getLinkDetails, final ApiCallback<GetLinkDetailsRPCOutputSchema> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createGetLinkDetailsByIdCall(getLinkDetails, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetLinkDetailsRPCOutputSchema>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for createGetNodeDetailsById */
    private com.squareup.okhttp.Call createGetNodeDetailsByIdCall(GetNodeDetailsRPCInputSchema getNodeDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = getNodeDetails;
        
        // verify the required parameter 'getNodeDetails' is set
        if (getNodeDetails == null) {
            throw new ApiException("Missing the required parameter 'getNodeDetails' when calling createGetNodeDetailsById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/operations/get-node-details/".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Create get-node-details by ID
     * Create operation of resource: get-node-details
     * @param getNodeDetails get-node-detailsbody object (required)
     * @return GetNodeDetailsRPCOutputSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetNodeDetailsRPCOutputSchema createGetNodeDetailsById(GetNodeDetailsRPCInputSchema getNodeDetails) throws ApiException {
        ApiResponse<GetNodeDetailsRPCOutputSchema> resp = createGetNodeDetailsByIdWithHttpInfo(getNodeDetails);
        return resp.getData();
    }

    /**
     * Create get-node-details by ID
     * Create operation of resource: get-node-details
     * @param getNodeDetails get-node-detailsbody object (required)
     * @return ApiResponse&lt;GetNodeDetailsRPCOutputSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetNodeDetailsRPCOutputSchema> createGetNodeDetailsByIdWithHttpInfo(GetNodeDetailsRPCInputSchema getNodeDetails) throws ApiException {
        com.squareup.okhttp.Call call = createGetNodeDetailsByIdCall(getNodeDetails, null, null);
        Type localVarReturnType = new TypeToken<GetNodeDetailsRPCOutputSchema>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create get-node-details by ID (asynchronously)
     * Create operation of resource: get-node-details
     * @param getNodeDetails get-node-detailsbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createGetNodeDetailsByIdAsync(GetNodeDetailsRPCInputSchema getNodeDetails, final ApiCallback<GetNodeDetailsRPCOutputSchema> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createGetNodeDetailsByIdCall(getNodeDetails, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetNodeDetailsRPCOutputSchema>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for createGetNodeEdgePointDetailsById */
    private com.squareup.okhttp.Call createGetNodeEdgePointDetailsByIdCall(GetNodeEdgePointDetailsRPCInputSchema getNodeEdgePointDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = getNodeEdgePointDetails;
        
        // verify the required parameter 'getNodeEdgePointDetails' is set
        if (getNodeEdgePointDetails == null) {
            throw new ApiException("Missing the required parameter 'getNodeEdgePointDetails' when calling createGetNodeEdgePointDetailsById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/operations/get-node-edge-point-details/".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Create get-node-edge-point-details by ID
     * Create operation of resource: get-node-edge-point-details
     * @param getNodeEdgePointDetails get-node-edge-point-detailsbody object (required)
     * @return GetNodeEdgePointDetailsRPCOutputSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetNodeEdgePointDetailsRPCOutputSchema createGetNodeEdgePointDetailsById(GetNodeEdgePointDetailsRPCInputSchema getNodeEdgePointDetails) throws ApiException {
        ApiResponse<GetNodeEdgePointDetailsRPCOutputSchema> resp = createGetNodeEdgePointDetailsByIdWithHttpInfo(getNodeEdgePointDetails);
        return resp.getData();
    }

    /**
     * Create get-node-edge-point-details by ID
     * Create operation of resource: get-node-edge-point-details
     * @param getNodeEdgePointDetails get-node-edge-point-detailsbody object (required)
     * @return ApiResponse&lt;GetNodeEdgePointDetailsRPCOutputSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetNodeEdgePointDetailsRPCOutputSchema> createGetNodeEdgePointDetailsByIdWithHttpInfo(GetNodeEdgePointDetailsRPCInputSchema getNodeEdgePointDetails) throws ApiException {
        com.squareup.okhttp.Call call = createGetNodeEdgePointDetailsByIdCall(getNodeEdgePointDetails, null, null);
        Type localVarReturnType = new TypeToken<GetNodeEdgePointDetailsRPCOutputSchema>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create get-node-edge-point-details by ID (asynchronously)
     * Create operation of resource: get-node-edge-point-details
     * @param getNodeEdgePointDetails get-node-edge-point-detailsbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createGetNodeEdgePointDetailsByIdAsync(GetNodeEdgePointDetailsRPCInputSchema getNodeEdgePointDetails, final ApiCallback<GetNodeEdgePointDetailsRPCOutputSchema> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createGetNodeEdgePointDetailsByIdCall(getNodeEdgePointDetails, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetNodeEdgePointDetailsRPCOutputSchema>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for createGetServiceInterfacePointDetailsById */
    private com.squareup.okhttp.Call createGetServiceInterfacePointDetailsByIdCall(GetServiceInterfacePointDetailsRPCInputSchema getServiceInterfacePointDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = getServiceInterfacePointDetails;
        
        // verify the required parameter 'getServiceInterfacePointDetails' is set
        if (getServiceInterfacePointDetails == null) {
            throw new ApiException("Missing the required parameter 'getServiceInterfacePointDetails' when calling createGetServiceInterfacePointDetailsById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/operations/get-service-interface-point-details/".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Create get-service-interface-point-details by ID
     * Create operation of resource: get-service-interface-point-details
     * @param getServiceInterfacePointDetails get-service-interface-point-detailsbody object (required)
     * @return GetServiceInterfacePointDetailsRPCOutputSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetServiceInterfacePointDetailsRPCOutputSchema createGetServiceInterfacePointDetailsById(GetServiceInterfacePointDetailsRPCInputSchema getServiceInterfacePointDetails) throws ApiException {
        ApiResponse<GetServiceInterfacePointDetailsRPCOutputSchema> resp = createGetServiceInterfacePointDetailsByIdWithHttpInfo(getServiceInterfacePointDetails);
        return resp.getData();
    }

    /**
     * Create get-service-interface-point-details by ID
     * Create operation of resource: get-service-interface-point-details
     * @param getServiceInterfacePointDetails get-service-interface-point-detailsbody object (required)
     * @return ApiResponse&lt;GetServiceInterfacePointDetailsRPCOutputSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetServiceInterfacePointDetailsRPCOutputSchema> createGetServiceInterfacePointDetailsByIdWithHttpInfo(GetServiceInterfacePointDetailsRPCInputSchema getServiceInterfacePointDetails) throws ApiException {
        com.squareup.okhttp.Call call = createGetServiceInterfacePointDetailsByIdCall(getServiceInterfacePointDetails, null, null);
        Type localVarReturnType = new TypeToken<GetServiceInterfacePointDetailsRPCOutputSchema>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create get-service-interface-point-details by ID (asynchronously)
     * Create operation of resource: get-service-interface-point-details
     * @param getServiceInterfacePointDetails get-service-interface-point-detailsbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createGetServiceInterfacePointDetailsByIdAsync(GetServiceInterfacePointDetailsRPCInputSchema getServiceInterfacePointDetails, final ApiCallback<GetServiceInterfacePointDetailsRPCOutputSchema> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createGetServiceInterfacePointDetailsByIdCall(getServiceInterfacePointDetails, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetServiceInterfacePointDetailsRPCOutputSchema>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for createGetServiceInterfacePointListById */
    private com.squareup.okhttp.Call createGetServiceInterfacePointListByIdCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/operations/get-service-interface-point-list/".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Create get-service-interface-point-list by ID
     * Create operation of resource: get-service-interface-point-list
     * @return GetServiceInterfacePointListRPCOutputSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetServiceInterfacePointListRPCOutputSchema createGetServiceInterfacePointListById() throws ApiException {
        ApiResponse<GetServiceInterfacePointListRPCOutputSchema> resp = createGetServiceInterfacePointListByIdWithHttpInfo();
        return resp.getData();
    }

    /**
     * Create get-service-interface-point-list by ID
     * Create operation of resource: get-service-interface-point-list
     * @return ApiResponse&lt;GetServiceInterfacePointListRPCOutputSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetServiceInterfacePointListRPCOutputSchema> createGetServiceInterfacePointListByIdWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = createGetServiceInterfacePointListByIdCall(null, null);
        Type localVarReturnType = new TypeToken<GetServiceInterfacePointListRPCOutputSchema>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create get-service-interface-point-list by ID (asynchronously)
     * Create operation of resource: get-service-interface-point-list
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createGetServiceInterfacePointListByIdAsync(final ApiCallback<GetServiceInterfacePointListRPCOutputSchema> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createGetServiceInterfacePointListByIdCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetServiceInterfacePointListRPCOutputSchema>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for createGetTopologyDetailsById */
    private com.squareup.okhttp.Call createGetTopologyDetailsByIdCall(GetTopologyDetailsRPCInputSchema getTopologyDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = getTopologyDetails;
        
        // verify the required parameter 'getTopologyDetails' is set
        if (getTopologyDetails == null) {
            throw new ApiException("Missing the required parameter 'getTopologyDetails' when calling createGetTopologyDetailsById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/operations/get-topology-details/".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Create get-topology-details by ID
     * Create operation of resource: get-topology-details
     * @param getTopologyDetails get-topology-detailsbody object (required)
     * @return GetTopologyDetailsRPCOutputSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetTopologyDetailsRPCOutputSchema createGetTopologyDetailsById(GetTopologyDetailsRPCInputSchema getTopologyDetails) throws ApiException {
        ApiResponse<GetTopologyDetailsRPCOutputSchema> resp = createGetTopologyDetailsByIdWithHttpInfo(getTopologyDetails);
        return resp.getData();
    }

    /**
     * Create get-topology-details by ID
     * Create operation of resource: get-topology-details
     * @param getTopologyDetails get-topology-detailsbody object (required)
     * @return ApiResponse&lt;GetTopologyDetailsRPCOutputSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetTopologyDetailsRPCOutputSchema> createGetTopologyDetailsByIdWithHttpInfo(GetTopologyDetailsRPCInputSchema getTopologyDetails) throws ApiException {
        com.squareup.okhttp.Call call = createGetTopologyDetailsByIdCall(getTopologyDetails, null, null);
        Type localVarReturnType = new TypeToken<GetTopologyDetailsRPCOutputSchema>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create get-topology-details by ID (asynchronously)
     * Create operation of resource: get-topology-details
     * @param getTopologyDetails get-topology-detailsbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createGetTopologyDetailsByIdAsync(GetTopologyDetailsRPCInputSchema getTopologyDetails, final ApiCallback<GetTopologyDetailsRPCOutputSchema> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createGetTopologyDetailsByIdCall(getTopologyDetails, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetTopologyDetailsRPCOutputSchema>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for createGetTopologyListById */
    private com.squareup.okhttp.Call createGetTopologyListByIdCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/operations/get-topology-list/".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Create get-topology-list by ID
     * Create operation of resource: get-topology-list
     * @return GetTopologyListRPCOutputSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetTopologyListRPCOutputSchema createGetTopologyListById() throws ApiException {
        ApiResponse<GetTopologyListRPCOutputSchema> resp = createGetTopologyListByIdWithHttpInfo();
        return resp.getData();
    }

    /**
     * Create get-topology-list by ID
     * Create operation of resource: get-topology-list
     * @return ApiResponse&lt;GetTopologyListRPCOutputSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetTopologyListRPCOutputSchema> createGetTopologyListByIdWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = createGetTopologyListByIdCall(null, null);
        Type localVarReturnType = new TypeToken<GetTopologyListRPCOutputSchema>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create get-topology-list by ID (asynchronously)
     * Create operation of resource: get-topology-list
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createGetTopologyListByIdAsync(final ApiCallback<GetTopologyListRPCOutputSchema> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createGetTopologyListByIdCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetTopologyListRPCOutputSchema>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for createUpdateServiceInterfacePointById */
    private com.squareup.okhttp.Call createUpdateServiceInterfacePointByIdCall(UpdateServiceInterfacePointRPCInputSchema updateServiceInterfacePoint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = updateServiceInterfacePoint;
        
        // verify the required parameter 'updateServiceInterfacePoint' is set
        if (updateServiceInterfacePoint == null) {
            throw new ApiException("Missing the required parameter 'updateServiceInterfacePoint' when calling createUpdateServiceInterfacePointById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/operations/update-service-interface-point/".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Create update-service-interface-point by ID
     * Create operation of resource: update-service-interface-point
     * @param updateServiceInterfacePoint update-service-interface-pointbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createUpdateServiceInterfacePointById(UpdateServiceInterfacePointRPCInputSchema updateServiceInterfacePoint) throws ApiException {
        createUpdateServiceInterfacePointByIdWithHttpInfo(updateServiceInterfacePoint);
    }

    /**
     * Create update-service-interface-point by ID
     * Create operation of resource: update-service-interface-point
     * @param updateServiceInterfacePoint update-service-interface-pointbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createUpdateServiceInterfacePointByIdWithHttpInfo(UpdateServiceInterfacePointRPCInputSchema updateServiceInterfacePoint) throws ApiException {
        com.squareup.okhttp.Call call = createUpdateServiceInterfacePointByIdCall(updateServiceInterfacePoint, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create update-service-interface-point by ID (asynchronously)
     * Create operation of resource: update-service-interface-point
     * @param updateServiceInterfacePoint update-service-interface-pointbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createUpdateServiceInterfacePointByIdAsync(UpdateServiceInterfacePointRPCInputSchema updateServiceInterfacePoint, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createUpdateServiceInterfacePointByIdCall(updateServiceInterfacePoint, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for deleteContextById */
    private com.squareup.okhttp.Call deleteContextByIdCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/config/context/".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Delete context by ID
     * Delete operation of resource: context
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextById() throws ApiException {
        deleteContextByIdWithHttpInfo();
    }

    /**
     * Delete context by ID
     * Delete operation of resource: context
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextByIdWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = deleteContextByIdCall(null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete context by ID (asynchronously)
     * Delete operation of resource: context
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextByIdAsync(final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextByIdCall(progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for retrieveContext */
    private com.squareup.okhttp.Call retrieveContextCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/config/context/".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve context
     * Retrieve operation of resource: context
     * @return ContextSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ContextSchema retrieveContext() throws ApiException {
        ApiResponse<ContextSchema> resp = retrieveContextWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieve context
     * Retrieve operation of resource: context
     * @return ApiResponse&lt;ContextSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ContextSchema> retrieveContextWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextCall(null, null);
        Type localVarReturnType = new TypeToken<ContextSchema>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve context (asynchronously)
     * Retrieve operation of resource: context
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextAsync(final ApiCallback<ContextSchema> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ContextSchema>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateContextById */
    private com.squareup.okhttp.Call updateContextByIdCall(ContextSchema context, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = context;
        
        // verify the required parameter 'context' is set
        if (context == null) {
            throw new ApiException("Missing the required parameter 'context' when calling updateContextById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Update context by ID
     * Update operation of resource: context
     * @param context contextbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextById(ContextSchema context) throws ApiException {
        updateContextByIdWithHttpInfo(context);
    }

    /**
     * Update context by ID
     * Update operation of resource: context
     * @param context contextbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextByIdWithHttpInfo(ContextSchema context) throws ApiException {
        com.squareup.okhttp.Call call = updateContextByIdCall(context, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update context by ID (asynchronously)
     * Update operation of resource: context
     * @param context contextbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextByIdAsync(ContextSchema context, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextByIdCall(context, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
