/**
 * tapi-topology API
 * tapi-topology API generated from tapi-topology@2018-12-10.yang
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import io.swagger.client.model.NameAndValue;
import io.swagger.client.model.ServiceInterfacePoint;
import io.swagger.client.model.Capacity;
import io.swagger.client.model.BandwidthProfile;
import io.swagger.client.model.CapacityValue;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ServiceinterfacepointApi {
    private ApiClient apiClient;

    public ServiceinterfacepointApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ServiceinterfacepointApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for createContextServiceInterfacePointNameNameById */
    private com.squareup.okhttp.Call createContextServiceInterfacePointNameNameByIdCall(String uuid, String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = name;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextServiceInterfacePointNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling createContextServiceInterfacePointNameNameById(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling createContextServiceInterfacePointNameNameById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/service-interface-point/{uuid}/name/{value_name}/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
        .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Create name by ID
     * Create operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextServiceInterfacePointNameNameById(String uuid, String valueName, NameAndValue name) throws ApiException {
        createContextServiceInterfacePointNameNameByIdWithHttpInfo(uuid, valueName, name);
    }

    /**
     * Create name by ID
     * Create operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextServiceInterfacePointNameNameByIdWithHttpInfo(String uuid, String valueName, NameAndValue name) throws ApiException {
        com.squareup.okhttp.Call call = createContextServiceInterfacePointNameNameByIdCall(uuid, valueName, name, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create name by ID (asynchronously)
     * Create operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextServiceInterfacePointNameNameByIdAsync(String uuid, String valueName, NameAndValue name, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextServiceInterfacePointNameNameByIdCall(uuid, valueName, name, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for createContextServiceInterfacePointServiceInterfacePointById */
    private com.squareup.okhttp.Call createContextServiceInterfacePointServiceInterfacePointByIdCall(String uuid, ServiceInterfacePoint serviceInterfacePoint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = serviceInterfacePoint;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createContextServiceInterfacePointServiceInterfacePointById(Async)");
        }
        
        // verify the required parameter 'serviceInterfacePoint' is set
        if (serviceInterfacePoint == null) {
            throw new ApiException("Missing the required parameter 'serviceInterfacePoint' when calling createContextServiceInterfacePointServiceInterfacePointById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/service-interface-point/{uuid}/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Create service-interface-point by ID
     * Create operation of resource: service-interface-point
     * @param uuid ID of uuid (required)
     * @param serviceInterfacePoint service-interface-pointbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createContextServiceInterfacePointServiceInterfacePointById(String uuid, ServiceInterfacePoint serviceInterfacePoint) throws ApiException {
        createContextServiceInterfacePointServiceInterfacePointByIdWithHttpInfo(uuid, serviceInterfacePoint);
    }

    /**
     * Create service-interface-point by ID
     * Create operation of resource: service-interface-point
     * @param uuid ID of uuid (required)
     * @param serviceInterfacePoint service-interface-pointbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createContextServiceInterfacePointServiceInterfacePointByIdWithHttpInfo(String uuid, ServiceInterfacePoint serviceInterfacePoint) throws ApiException {
        com.squareup.okhttp.Call call = createContextServiceInterfacePointServiceInterfacePointByIdCall(uuid, serviceInterfacePoint, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create service-interface-point by ID (asynchronously)
     * Create operation of resource: service-interface-point
     * @param uuid ID of uuid (required)
     * @param serviceInterfacePoint service-interface-pointbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextServiceInterfacePointServiceInterfacePointByIdAsync(String uuid, ServiceInterfacePoint serviceInterfacePoint, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextServiceInterfacePointServiceInterfacePointByIdCall(uuid, serviceInterfacePoint, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for deleteContextServiceInterfacePointNameNameById */
    private com.squareup.okhttp.Call deleteContextServiceInterfacePointNameNameByIdCall(String uuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextServiceInterfacePointNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling deleteContextServiceInterfacePointNameNameById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/service-interface-point/{uuid}/name/{value_name}/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
        .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Delete name by ID
     * Delete operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextServiceInterfacePointNameNameById(String uuid, String valueName) throws ApiException {
        deleteContextServiceInterfacePointNameNameByIdWithHttpInfo(uuid, valueName);
    }

    /**
     * Delete name by ID
     * Delete operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextServiceInterfacePointNameNameByIdWithHttpInfo(String uuid, String valueName) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextServiceInterfacePointNameNameByIdCall(uuid, valueName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete name by ID (asynchronously)
     * Delete operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextServiceInterfacePointNameNameByIdAsync(String uuid, String valueName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextServiceInterfacePointNameNameByIdCall(uuid, valueName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for deleteContextServiceInterfacePointServiceInterfacePointById */
    private com.squareup.okhttp.Call deleteContextServiceInterfacePointServiceInterfacePointByIdCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteContextServiceInterfacePointServiceInterfacePointById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/service-interface-point/{uuid}/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Delete service-interface-point by ID
     * Delete operation of resource: service-interface-point
     * @param uuid ID of uuid (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContextServiceInterfacePointServiceInterfacePointById(String uuid) throws ApiException {
        deleteContextServiceInterfacePointServiceInterfacePointByIdWithHttpInfo(uuid);
    }

    /**
     * Delete service-interface-point by ID
     * Delete operation of resource: service-interface-point
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContextServiceInterfacePointServiceInterfacePointByIdWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = deleteContextServiceInterfacePointServiceInterfacePointByIdCall(uuid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete service-interface-point by ID (asynchronously)
     * Delete operation of resource: service-interface-point
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContextServiceInterfacePointServiceInterfacePointByIdAsync(String uuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContextServiceInterfacePointServiceInterfacePointByIdCall(uuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for retrieveContextServiceInterfacePointAvailableCapacityAvailableCapacity */
    private com.squareup.okhttp.Call retrieveContextServiceInterfacePointAvailableCapacityAvailableCapacityCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextServiceInterfacePointAvailableCapacityAvailableCapacity(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/service-interface-point/{uuid}/available-capacity/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve available-capacity
     * Retrieve operation of resource: available-capacity
     * @param uuid ID of uuid (required)
     * @return Capacity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Capacity retrieveContextServiceInterfacePointAvailableCapacityAvailableCapacity(String uuid) throws ApiException {
        ApiResponse<Capacity> resp = retrieveContextServiceInterfacePointAvailableCapacityAvailableCapacityWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve available-capacity
     * Retrieve operation of resource: available-capacity
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;Capacity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Capacity> retrieveContextServiceInterfacePointAvailableCapacityAvailableCapacityWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointAvailableCapacityAvailableCapacityCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<Capacity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve available-capacity (asynchronously)
     * Retrieve operation of resource: available-capacity
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextServiceInterfacePointAvailableCapacityAvailableCapacityAsync(String uuid, final ApiCallback<Capacity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointAvailableCapacityAvailableCapacityCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Capacity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileBandwidthProfile */
    private com.squareup.okhttp.Call retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileBandwidthProfileCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/service-interface-point/{uuid}/available-capacity/bandwidth-profile/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve bandwidth-profile
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @return BandwidthProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BandwidthProfile retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileBandwidthProfile(String uuid) throws ApiException {
        ApiResponse<BandwidthProfile> resp = retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileBandwidthProfileWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve bandwidth-profile
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;BandwidthProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BandwidthProfile> retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileBandwidthProfileWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileBandwidthProfileCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<BandwidthProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve bandwidth-profile (asynchronously)
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileBandwidthProfileAsync(String uuid, final ApiCallback<BandwidthProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileBandwidthProfileCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BandwidthProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize */
    private com.squareup.okhttp.Call retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/service-interface-point/{uuid}/available-capacity/bandwidth-profile/committed-burst-size/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve committed-burst-size
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(String uuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve committed-burst-size
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve committed-burst-size (asynchronously)
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeAsync(String uuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate */
    private com.squareup.okhttp.Call retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/service-interface-point/{uuid}/available-capacity/bandwidth-profile/committed-information-rate/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve committed-information-rate
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(String uuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve committed-information-rate
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve committed-information-rate (asynchronously)
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateAsync(String uuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize */
    private com.squareup.okhttp.Call retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/service-interface-point/{uuid}/available-capacity/bandwidth-profile/peak-burst-size/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve peak-burst-size
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize(String uuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve peak-burst-size
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve peak-burst-size (asynchronously)
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeAsync(String uuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate */
    private com.squareup.okhttp.Call retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/service-interface-point/{uuid}/available-capacity/bandwidth-profile/peak-information-rate/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve peak-information-rate
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate(String uuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve peak-information-rate
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve peak-information-rate (asynchronously)
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateAsync(String uuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveContextServiceInterfacePointAvailableCapacityTotalSizeTotalSize */
    private com.squareup.okhttp.Call retrieveContextServiceInterfacePointAvailableCapacityTotalSizeTotalSizeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextServiceInterfacePointAvailableCapacityTotalSizeTotalSize(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/service-interface-point/{uuid}/available-capacity/total-size/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve total-size
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextServiceInterfacePointAvailableCapacityTotalSizeTotalSize(String uuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextServiceInterfacePointAvailableCapacityTotalSizeTotalSizeWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve total-size
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextServiceInterfacePointAvailableCapacityTotalSizeTotalSizeWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointAvailableCapacityTotalSizeTotalSizeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve total-size (asynchronously)
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextServiceInterfacePointAvailableCapacityTotalSizeTotalSizeAsync(String uuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointAvailableCapacityTotalSizeTotalSizeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveContextServiceInterfacePointNameName */
    private com.squareup.okhttp.Call retrieveContextServiceInterfacePointNameNameCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextServiceInterfacePointNameName(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/service-interface-point/{uuid}/name/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextServiceInterfacePointNameName(String uuid) throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextServiceInterfacePointNameNameWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve name
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextServiceInterfacePointNameNameWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointNameNameCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextServiceInterfacePointNameNameAsync(String uuid, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointNameNameCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveContextServiceInterfacePointNameNameById */
    private com.squareup.okhttp.Call retrieveContextServiceInterfacePointNameNameByIdCall(String uuid, String valueName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextServiceInterfacePointNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling retrieveContextServiceInterfacePointNameNameById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/service-interface-point/{uuid}/name/{value_name}/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
        .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @return NameAndValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NameAndValue retrieveContextServiceInterfacePointNameNameById(String uuid, String valueName) throws ApiException {
        ApiResponse<NameAndValue> resp = retrieveContextServiceInterfacePointNameNameByIdWithHttpInfo(uuid, valueName);
        return resp.getData();
    }

    /**
     * Retrieve name by ID
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @return ApiResponse&lt;NameAndValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NameAndValue> retrieveContextServiceInterfacePointNameNameByIdWithHttpInfo(String uuid, String valueName) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointNameNameByIdCall(uuid, valueName, null, null);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve name by ID (asynchronously)
     * Retrieve operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextServiceInterfacePointNameNameByIdAsync(String uuid, String valueName, final ApiCallback<NameAndValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointNameNameByIdCall(uuid, valueName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NameAndValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveContextServiceInterfacePointServiceInterfacePoint */
    private com.squareup.okhttp.Call retrieveContextServiceInterfacePointServiceInterfacePointCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/config/context/service-interface-point/".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve service-interface-point
     * Retrieve operation of resource: service-interface-point
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> retrieveContextServiceInterfacePointServiceInterfacePoint() throws ApiException {
        ApiResponse<List<String>> resp = retrieveContextServiceInterfacePointServiceInterfacePointWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieve service-interface-point
     * Retrieve operation of resource: service-interface-point
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> retrieveContextServiceInterfacePointServiceInterfacePointWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointServiceInterfacePointCall(null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve service-interface-point (asynchronously)
     * Retrieve operation of resource: service-interface-point
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextServiceInterfacePointServiceInterfacePointAsync(final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointServiceInterfacePointCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveContextServiceInterfacePointServiceInterfacePointById */
    private com.squareup.okhttp.Call retrieveContextServiceInterfacePointServiceInterfacePointByIdCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextServiceInterfacePointServiceInterfacePointById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/service-interface-point/{uuid}/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve service-interface-point by ID
     * Retrieve operation of resource: service-interface-point
     * @param uuid ID of uuid (required)
     * @return ServiceInterfacePoint
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ServiceInterfacePoint retrieveContextServiceInterfacePointServiceInterfacePointById(String uuid) throws ApiException {
        ApiResponse<ServiceInterfacePoint> resp = retrieveContextServiceInterfacePointServiceInterfacePointByIdWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve service-interface-point by ID
     * Retrieve operation of resource: service-interface-point
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;ServiceInterfacePoint&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ServiceInterfacePoint> retrieveContextServiceInterfacePointServiceInterfacePointByIdWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointServiceInterfacePointByIdCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<ServiceInterfacePoint>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve service-interface-point by ID (asynchronously)
     * Retrieve operation of resource: service-interface-point
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextServiceInterfacePointServiceInterfacePointByIdAsync(String uuid, final ApiCallback<ServiceInterfacePoint> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointServiceInterfacePointByIdCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ServiceInterfacePoint>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileBandwidthProfile */
    private com.squareup.okhttp.Call retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileBandwidthProfileCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileBandwidthProfile(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/service-interface-point/{uuid}/total-potential-capacity/bandwidth-profile/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve bandwidth-profile
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @return BandwidthProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BandwidthProfile retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileBandwidthProfile(String uuid) throws ApiException {
        ApiResponse<BandwidthProfile> resp = retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileBandwidthProfileWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve bandwidth-profile
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;BandwidthProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BandwidthProfile> retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileBandwidthProfileWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileBandwidthProfileCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<BandwidthProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve bandwidth-profile (asynchronously)
     * Retrieve operation of resource: bandwidth-profile
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileBandwidthProfileAsync(String uuid, final ApiCallback<BandwidthProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileBandwidthProfileCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BandwidthProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize */
    private com.squareup.okhttp.Call retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/service-interface-point/{uuid}/total-potential-capacity/bandwidth-profile/committed-burst-size/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve committed-burst-size
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(String uuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve committed-burst-size
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve committed-burst-size (asynchronously)
     * Retrieve operation of resource: committed-burst-size
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeAsync(String uuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate */
    private com.squareup.okhttp.Call retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/service-interface-point/{uuid}/total-potential-capacity/bandwidth-profile/committed-information-rate/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve committed-information-rate
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(String uuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve committed-information-rate
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve committed-information-rate (asynchronously)
     * Retrieve operation of resource: committed-information-rate
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateAsync(String uuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize */
    private com.squareup.okhttp.Call retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/service-interface-point/{uuid}/total-potential-capacity/bandwidth-profile/peak-burst-size/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve peak-burst-size
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize(String uuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve peak-burst-size
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve peak-burst-size (asynchronously)
     * Retrieve operation of resource: peak-burst-size
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeAsync(String uuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate */
    private com.squareup.okhttp.Call retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/service-interface-point/{uuid}/total-potential-capacity/bandwidth-profile/peak-information-rate/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve peak-information-rate
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate(String uuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve peak-information-rate
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve peak-information-rate (asynchronously)
     * Retrieve operation of resource: peak-information-rate
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateAsync(String uuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveContextServiceInterfacePointTotalPotentialCapacityTotalPotentialCapacity */
    private com.squareup.okhttp.Call retrieveContextServiceInterfacePointTotalPotentialCapacityTotalPotentialCapacityCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextServiceInterfacePointTotalPotentialCapacityTotalPotentialCapacity(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/service-interface-point/{uuid}/total-potential-capacity/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve total-potential-capacity
     * Retrieve operation of resource: total-potential-capacity
     * @param uuid ID of uuid (required)
     * @return Capacity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Capacity retrieveContextServiceInterfacePointTotalPotentialCapacityTotalPotentialCapacity(String uuid) throws ApiException {
        ApiResponse<Capacity> resp = retrieveContextServiceInterfacePointTotalPotentialCapacityTotalPotentialCapacityWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve total-potential-capacity
     * Retrieve operation of resource: total-potential-capacity
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;Capacity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Capacity> retrieveContextServiceInterfacePointTotalPotentialCapacityTotalPotentialCapacityWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointTotalPotentialCapacityTotalPotentialCapacityCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<Capacity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve total-potential-capacity (asynchronously)
     * Retrieve operation of resource: total-potential-capacity
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextServiceInterfacePointTotalPotentialCapacityTotalPotentialCapacityAsync(String uuid, final ApiCallback<Capacity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointTotalPotentialCapacityTotalPotentialCapacityCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Capacity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveContextServiceInterfacePointTotalPotentialCapacityTotalSizeTotalSize */
    private com.squareup.okhttp.Call retrieveContextServiceInterfacePointTotalPotentialCapacityTotalSizeTotalSizeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveContextServiceInterfacePointTotalPotentialCapacityTotalSizeTotalSize(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/service-interface-point/{uuid}/total-potential-capacity/total-size/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve total-size
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @return CapacityValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CapacityValue retrieveContextServiceInterfacePointTotalPotentialCapacityTotalSizeTotalSize(String uuid) throws ApiException {
        ApiResponse<CapacityValue> resp = retrieveContextServiceInterfacePointTotalPotentialCapacityTotalSizeTotalSizeWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Retrieve total-size
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @return ApiResponse&lt;CapacityValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CapacityValue> retrieveContextServiceInterfacePointTotalPotentialCapacityTotalSizeTotalSizeWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointTotalPotentialCapacityTotalSizeTotalSizeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve total-size (asynchronously)
     * Retrieve operation of resource: total-size
     * @param uuid ID of uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveContextServiceInterfacePointTotalPotentialCapacityTotalSizeTotalSizeAsync(String uuid, final ApiCallback<CapacityValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveContextServiceInterfacePointTotalPotentialCapacityTotalSizeTotalSizeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CapacityValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateContextServiceInterfacePointNameNameById */
    private com.squareup.okhttp.Call updateContextServiceInterfacePointNameNameByIdCall(String uuid, String valueName, NameAndValue name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = name;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextServiceInterfacePointNameNameById(Async)");
        }
        
        // verify the required parameter 'valueName' is set
        if (valueName == null) {
            throw new ApiException("Missing the required parameter 'valueName' when calling updateContextServiceInterfacePointNameNameById(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling updateContextServiceInterfacePointNameNameById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/service-interface-point/{uuid}/name/{value_name}/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
        .replaceAll("\\{" + "value_name" + "\\}", apiClient.escapeString(valueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Update name by ID
     * Update operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextServiceInterfacePointNameNameById(String uuid, String valueName, NameAndValue name) throws ApiException {
        updateContextServiceInterfacePointNameNameByIdWithHttpInfo(uuid, valueName, name);
    }

    /**
     * Update name by ID
     * Update operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextServiceInterfacePointNameNameByIdWithHttpInfo(String uuid, String valueName, NameAndValue name) throws ApiException {
        com.squareup.okhttp.Call call = updateContextServiceInterfacePointNameNameByIdCall(uuid, valueName, name, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update name by ID (asynchronously)
     * Update operation of resource: name
     * @param uuid ID of uuid (required)
     * @param valueName ID of value_name (required)
     * @param name namebody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextServiceInterfacePointNameNameByIdAsync(String uuid, String valueName, NameAndValue name, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextServiceInterfacePointNameNameByIdCall(uuid, valueName, name, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for updateContextServiceInterfacePointServiceInterfacePointById */
    private com.squareup.okhttp.Call updateContextServiceInterfacePointServiceInterfacePointByIdCall(String uuid, ServiceInterfacePoint serviceInterfacePoint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = serviceInterfacePoint;
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateContextServiceInterfacePointServiceInterfacePointById(Async)");
        }
        
        // verify the required parameter 'serviceInterfacePoint' is set
        if (serviceInterfacePoint == null) {
            throw new ApiException("Missing the required parameter 'serviceInterfacePoint' when calling updateContextServiceInterfacePointServiceInterfacePointById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/config/context/service-interface-point/{uuid}/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Update service-interface-point by ID
     * Update operation of resource: service-interface-point
     * @param uuid ID of uuid (required)
     * @param serviceInterfacePoint service-interface-pointbody object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateContextServiceInterfacePointServiceInterfacePointById(String uuid, ServiceInterfacePoint serviceInterfacePoint) throws ApiException {
        updateContextServiceInterfacePointServiceInterfacePointByIdWithHttpInfo(uuid, serviceInterfacePoint);
    }

    /**
     * Update service-interface-point by ID
     * Update operation of resource: service-interface-point
     * @param uuid ID of uuid (required)
     * @param serviceInterfacePoint service-interface-pointbody object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateContextServiceInterfacePointServiceInterfacePointByIdWithHttpInfo(String uuid, ServiceInterfacePoint serviceInterfacePoint) throws ApiException {
        com.squareup.okhttp.Call call = updateContextServiceInterfacePointServiceInterfacePointByIdCall(uuid, serviceInterfacePoint, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update service-interface-point by ID (asynchronously)
     * Update operation of resource: service-interface-point
     * @param uuid ID of uuid (required)
     * @param serviceInterfacePoint service-interface-pointbody object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContextServiceInterfacePointServiceInterfacePointByIdAsync(String uuid, ServiceInterfacePoint serviceInterfacePoint, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContextServiceInterfacePointServiceInterfacePointByIdCall(uuid, serviceInterfacePoint, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
