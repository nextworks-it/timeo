/*
 * tapi-sdm API
 * tapi-sdm API generated from tapi-sdm.yang
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.Capacity;
import io.swagger.client.model.ConnectionRef;
import io.swagger.client.model.ConnectivityService;
import io.swagger.client.model.ConnectivityServiceEndPoint;
import io.swagger.client.model.ConnectivityServiceRef;
import io.swagger.client.model.CostCharacteristic;
import io.swagger.client.model.LatencyCharacteristic;
import io.swagger.client.model.NameAndValue;
import io.swagger.client.model.ResilienceType;
import io.swagger.client.model.RiskCharacteristic;
import io.swagger.client.model.SdmPropertiesPac;
import io.swagger.client.model.TimeRange;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * ConnectivityServiceSchema
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-07-09T13:10:07.918+02:00")
public class ConnectivityServiceSchema {
  @SerializedName("uuid")
  private String uuid = null;

  @SerializedName("name")
  private List<NameAndValue> name = null;

  /**
   * Gets or Sets serviceType
   */
  @JsonAdapter(ServiceTypeEnum.Adapter.class)
  public enum ServiceTypeEnum {
    POINT_TO_POINT_CONNECTIVITY("POINT_TO_POINT_CONNECTIVITY"),
    
    POINT_TO_MULTIPOINT_CONNECTIVITY("POINT_TO_MULTIPOINT_CONNECTIVITY"),
    
    MULTIPOINT_CONNECTIVITY("MULTIPOINT_CONNECTIVITY"),
    
    ROOTED_MULTIPOINT_CONNECTIVITY("ROOTED_MULTIPOINT_CONNECTIVITY");

    private String value;

    ServiceTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ServiceTypeEnum fromValue(String text) {
      for (ServiceTypeEnum b : ServiceTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ServiceTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ServiceTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ServiceTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ServiceTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("service-type")
  private ServiceTypeEnum serviceType = null;

  @SerializedName("schedule")
  private TimeRange schedule = null;

  @SerializedName("requested-capacity")
  private Capacity requestedCapacity = null;

  /**
   * Gets or Sets serviceLayer
   */
  @JsonAdapter(ServiceLayerEnum.Adapter.class)
  public enum ServiceLayerEnum {
    ODU("ODU"),
    
    ETH("ETH"),
    
    DSR("DSR"),
    
    PHOTONIC_MEDIA("PHOTONIC_MEDIA");

    private String value;

    ServiceLayerEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ServiceLayerEnum fromValue(String text) {
      for (ServiceLayerEnum b : ServiceLayerEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ServiceLayerEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ServiceLayerEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ServiceLayerEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ServiceLayerEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("service-layer")
  private ServiceLayerEnum serviceLayer = null;

  @SerializedName("service-level")
  private String serviceLevel = null;

  @SerializedName("diversity-exclusion")
  private List<ConnectivityServiceRef> diversityExclusion = null;

  /**
   * Gets or Sets connectivityDirection
   */
  @JsonAdapter(ConnectivityDirectionEnum.Adapter.class)
  public enum ConnectivityDirectionEnum {
    BIDIRECTIONAL("BIDIRECTIONAL"),
    
    UNIDIRECTIONAL("UNIDIRECTIONAL"),
    
    UNDEFINED_OR_UNKNOWN("UNDEFINED_OR_UNKNOWN");

    private String value;

    ConnectivityDirectionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ConnectivityDirectionEnum fromValue(String text) {
      for (ConnectivityDirectionEnum b : ConnectivityDirectionEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ConnectivityDirectionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ConnectivityDirectionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ConnectivityDirectionEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ConnectivityDirectionEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("connectivity-direction")
  private ConnectivityDirectionEnum connectivityDirection = null;

  @SerializedName("coroute-inclusion")
  private ConnectivityServiceRef corouteInclusion = null;

  @SerializedName("diversity-policy")
  private String diversityPolicy = null;

  /**
   * Gets or Sets routeDirection
   */
  @JsonAdapter(RouteDirectionEnum.Adapter.class)
  public enum RouteDirectionEnum {
    BIDIRECTIONAL("BIDIRECTIONAL"),
    
    UNIDIRECTIONAL("UNIDIRECTIONAL"),
    
    UNDEFINED_OR_UNKNOWN("UNDEFINED_OR_UNKNOWN");

    private String value;

    RouteDirectionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RouteDirectionEnum fromValue(String text) {
      for (RouteDirectionEnum b : RouteDirectionEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<RouteDirectionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RouteDirectionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RouteDirectionEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return RouteDirectionEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("route-direction")
  private RouteDirectionEnum routeDirection = null;

  @SerializedName("cost-characteristic")
  private List<CostCharacteristic> costCharacteristic = null;

  @SerializedName("route-objective-function")
  private String routeObjectiveFunction = null;

  @SerializedName("is-exclusive")
  private Boolean isExclusive = null;

  @SerializedName("latency-characteristic")
  private List<LatencyCharacteristic> latencyCharacteristic = null;

  @SerializedName("risk-diversity-characteristic")
  private List<RiskCharacteristic> riskDiversityCharacteristic = null;

  @SerializedName("exclude-node")
  private List<String> excludeNode = null;

  @SerializedName("include-node")
  private List<String> includeNode = null;

  @SerializedName("include-path")
  private List<String> includePath = null;

  @SerializedName("include-link")
  private List<String> includeLink = null;

  @SerializedName("exclude-path")
  private List<String> excludePath = null;

  @SerializedName("exclude-link")
  private List<String> excludeLink = null;

  /**
   * soft constraint requested by client to indicate the layer(s) of transport connection that it prefers to carry the service. This could be same as the service layer or one of the supported server layers
   */
  @JsonAdapter(PreferredTransportLayerEnum.Adapter.class)
  public enum PreferredTransportLayerEnum {
    ODU("ODU"),
    
    ETH("ETH"),
    
    DSR("DSR"),
    
    PHOTONIC_MEDIA("PHOTONIC_MEDIA");

    private String value;

    PreferredTransportLayerEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PreferredTransportLayerEnum fromValue(String text) {
      for (PreferredTransportLayerEnum b : PreferredTransportLayerEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<PreferredTransportLayerEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PreferredTransportLayerEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PreferredTransportLayerEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return PreferredTransportLayerEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("preferred-transport-layer")
  private List<PreferredTransportLayerEnum> preferredTransportLayer = null;

  @SerializedName("avoid-topology")
  private List<String> avoidTopology = null;

  @SerializedName("include-topology")
  private List<String> includeTopology = null;

  @SerializedName("max-switch-times")
  private String maxSwitchTimes = null;

  @SerializedName("wait-to-revert-time")
  private String waitToRevertTime = null;

  @SerializedName("restore-priority")
  private String restorePriority = null;

  @SerializedName("is-lock-out")
  private Boolean isLockOut = null;

  @SerializedName("is-coordinated-switching-both-ends")
  private Boolean isCoordinatedSwitchingBothEnds = null;

  @SerializedName("is-frozen")
  private Boolean isFrozen = null;

  /**
   * Indicate which layer this resilience parameters package configured for.
   */
  @JsonAdapter(PreferredRestorationLayerEnum.Adapter.class)
  public enum PreferredRestorationLayerEnum {
    ODU("ODU"),
    
    ETH("ETH"),
    
    DSR("DSR"),
    
    PHOTONIC_MEDIA("PHOTONIC_MEDIA");

    private String value;

    PreferredRestorationLayerEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PreferredRestorationLayerEnum fromValue(String text) {
      for (PreferredRestorationLayerEnum b : PreferredRestorationLayerEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<PreferredRestorationLayerEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PreferredRestorationLayerEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PreferredRestorationLayerEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return PreferredRestorationLayerEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("preferred-restoration-layer")
  private List<PreferredRestorationLayerEnum> preferredRestorationLayer = null;

  /**
   * Indcates whether the protection scheme is revertive or non-revertive.
   */
  @JsonAdapter(ReversionModeEnum.Adapter.class)
  public enum ReversionModeEnum {
    REVERTIVE("REVERTIVE"),
    
    NON_REVERTIVE("NON-REVERTIVE");

    private String value;

    ReversionModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ReversionModeEnum fromValue(String text) {
      for (ReversionModeEnum b : ReversionModeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ReversionModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ReversionModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ReversionModeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ReversionModeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("reversion-mode")
  private ReversionModeEnum reversionMode = null;

  @SerializedName("hold-off-time")
  private String holdOffTime = null;

  @SerializedName("resilience-type")
  private ResilienceType resilienceType = null;

  /**
   *  The coordination mechanism between multi-layers.
   */
  @JsonAdapter(RestorationCoordinateTypeEnum.Adapter.class)
  public enum RestorationCoordinateTypeEnum {
    NO_COORDINATE("NO_COORDINATE"),
    
    HOLD_OFF_TIME("HOLD_OFF_TIME"),
    
    WAIT_FOR_NOTIFICATION("WAIT_FOR_NOTIFICATION");

    private String value;

    RestorationCoordinateTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RestorationCoordinateTypeEnum fromValue(String text) {
      for (RestorationCoordinateTypeEnum b : RestorationCoordinateTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<RestorationCoordinateTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RestorationCoordinateTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RestorationCoordinateTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return RestorationCoordinateTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("restoration-coordinate-type")
  private RestorationCoordinateTypeEnum restorationCoordinateType = null;

  /**
   * Gets or Sets administrativeState
   */
  @JsonAdapter(AdministrativeStateEnum.Adapter.class)
  public enum AdministrativeStateEnum {
    LOCKED("LOCKED"),
    
    UNLOCKED("UNLOCKED");

    private String value;

    AdministrativeStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AdministrativeStateEnum fromValue(String text) {
      for (AdministrativeStateEnum b : AdministrativeStateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<AdministrativeStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AdministrativeStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AdministrativeStateEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return AdministrativeStateEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("administrative-state")
  private AdministrativeStateEnum administrativeState = null;

  /**
   * Gets or Sets lifecycleState
   */
  @JsonAdapter(LifecycleStateEnum.Adapter.class)
  public enum LifecycleStateEnum {
    PLANNED("PLANNED"),
    
    POTENTIAL_AVAILABLE("POTENTIAL_AVAILABLE"),
    
    POTENTIAL_BUSY("POTENTIAL_BUSY"),
    
    INSTALLED("INSTALLED"),
    
    PENDING_REMOVAL("PENDING_REMOVAL");

    private String value;

    LifecycleStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LifecycleStateEnum fromValue(String text) {
      for (LifecycleStateEnum b : LifecycleStateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<LifecycleStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LifecycleStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LifecycleStateEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return LifecycleStateEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("lifecycle-state")
  private LifecycleStateEnum lifecycleState = null;

  /**
   * Gets or Sets operationalState
   */
  @JsonAdapter(OperationalStateEnum.Adapter.class)
  public enum OperationalStateEnum {
    DISABLED("DISABLED"),
    
    ENABLED("ENABLED");

    private String value;

    OperationalStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OperationalStateEnum fromValue(String text) {
      for (OperationalStateEnum b : OperationalStateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<OperationalStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OperationalStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OperationalStateEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return OperationalStateEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("operational-state")
  private OperationalStateEnum operationalState = null;

  @SerializedName("connection")
  private List<ConnectionRef> connection = null;

  @SerializedName("end-point")
  private List<ConnectivityServiceEndPoint> endPoint = null;

  @SerializedName("include-core")
  private SdmPropertiesPac includeCore = null;

  public ConnectivityServiceSchema uuid(String uuid) {
    this.uuid = uuid;
    return this;
  }

   /**
   * UUID: An identifier that is universally unique within an identifier space, where the identifier space is itself globally unique, and immutable. An UUID carries no semantics with respect to the purpose or state of the entity. UUID here uses string representation as defined in RFC 4122.  The canonical representation uses lowercase characters. Pattern: [0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-&#39; + &#39;[0-9a-fA-F]{4}-[0-9a-fA-F]{12} Example of a UUID in string representation: f81d4fae-7dec-11d0-a765-00a0c91e6bf6
   * @return uuid
  **/
  @ApiModelProperty(value = "UUID: An identifier that is universally unique within an identifier space, where the identifier space is itself globally unique, and immutable. An UUID carries no semantics with respect to the purpose or state of the entity. UUID here uses string representation as defined in RFC 4122.  The canonical representation uses lowercase characters. Pattern: [0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-' + '[0-9a-fA-F]{4}-[0-9a-fA-F]{12} Example of a UUID in string representation: f81d4fae-7dec-11d0-a765-00a0c91e6bf6")
  public String getUuid() {
    return uuid;
  }

  public void setUuid(String uuid) {
    this.uuid = uuid;
  }

  public ConnectivityServiceSchema name(List<NameAndValue> name) {
    this.name = name;
    return this;
  }

  public ConnectivityServiceSchema addNameItem(NameAndValue nameItem) {
    if (this.name == null) {
      this.name = new ArrayList<NameAndValue>();
    }
    this.name.add(nameItem);
    return this;
  }

   /**
   * List of names. A property of an entity with a value that is unique in some namespace but may change during the life of the entity. A name carries no semantics with respect to the purpose of the entity.
   * @return name
  **/
  @ApiModelProperty(value = "List of names. A property of an entity with a value that is unique in some namespace but may change during the life of the entity. A name carries no semantics with respect to the purpose of the entity.")
  public List<NameAndValue> getName() {
    return name;
  }

  public void setName(List<NameAndValue> name) {
    this.name = name;
  }

  public ConnectivityServiceSchema serviceType(ServiceTypeEnum serviceType) {
    this.serviceType = serviceType;
    return this;
  }

   /**
   * Get serviceType
   * @return serviceType
  **/
  @ApiModelProperty(value = "")
  public ServiceTypeEnum getServiceType() {
    return serviceType;
  }

  public void setServiceType(ServiceTypeEnum serviceType) {
    this.serviceType = serviceType;
  }

  public ConnectivityServiceSchema schedule(TimeRange schedule) {
    this.schedule = schedule;
    return this;
  }

   /**
   * Get schedule
   * @return schedule
  **/
  @ApiModelProperty(value = "")
  public TimeRange getSchedule() {
    return schedule;
  }

  public void setSchedule(TimeRange schedule) {
    this.schedule = schedule;
  }

  public ConnectivityServiceSchema requestedCapacity(Capacity requestedCapacity) {
    this.requestedCapacity = requestedCapacity;
    return this;
  }

   /**
   * Get requestedCapacity
   * @return requestedCapacity
  **/
  @ApiModelProperty(value = "")
  public Capacity getRequestedCapacity() {
    return requestedCapacity;
  }

  public void setRequestedCapacity(Capacity requestedCapacity) {
    this.requestedCapacity = requestedCapacity;
  }

  public ConnectivityServiceSchema serviceLayer(ServiceLayerEnum serviceLayer) {
    this.serviceLayer = serviceLayer;
    return this;
  }

   /**
   * Get serviceLayer
   * @return serviceLayer
  **/
  @ApiModelProperty(value = "")
  public ServiceLayerEnum getServiceLayer() {
    return serviceLayer;
  }

  public void setServiceLayer(ServiceLayerEnum serviceLayer) {
    this.serviceLayer = serviceLayer;
  }

  public ConnectivityServiceSchema serviceLevel(String serviceLevel) {
    this.serviceLevel = serviceLevel;
    return this;
  }

   /**
   * An abstract value the meaning of which is mutually agreed – typically represents metrics such as - Class of service, priority, resiliency, availability
   * @return serviceLevel
  **/
  @ApiModelProperty(value = "An abstract value the meaning of which is mutually agreed – typically represents metrics such as - Class of service, priority, resiliency, availability")
  public String getServiceLevel() {
    return serviceLevel;
  }

  public void setServiceLevel(String serviceLevel) {
    this.serviceLevel = serviceLevel;
  }

  public ConnectivityServiceSchema diversityExclusion(List<ConnectivityServiceRef> diversityExclusion) {
    this.diversityExclusion = diversityExclusion;
    return this;
  }

  public ConnectivityServiceSchema addDiversityExclusionItem(ConnectivityServiceRef diversityExclusionItem) {
    if (this.diversityExclusion == null) {
      this.diversityExclusion = new ArrayList<ConnectivityServiceRef>();
    }
    this.diversityExclusion.add(diversityExclusionItem);
    return this;
  }

   /**
   * Get diversityExclusion
   * @return diversityExclusion
  **/
  @ApiModelProperty(value = "")
  public List<ConnectivityServiceRef> getDiversityExclusion() {
    return diversityExclusion;
  }

  public void setDiversityExclusion(List<ConnectivityServiceRef> diversityExclusion) {
    this.diversityExclusion = diversityExclusion;
  }

  public ConnectivityServiceSchema connectivityDirection(ConnectivityDirectionEnum connectivityDirection) {
    this.connectivityDirection = connectivityDirection;
    return this;
  }

   /**
   * Get connectivityDirection
   * @return connectivityDirection
  **/
  @ApiModelProperty(value = "")
  public ConnectivityDirectionEnum getConnectivityDirection() {
    return connectivityDirection;
  }

  public void setConnectivityDirection(ConnectivityDirectionEnum connectivityDirection) {
    this.connectivityDirection = connectivityDirection;
  }

  public ConnectivityServiceSchema corouteInclusion(ConnectivityServiceRef corouteInclusion) {
    this.corouteInclusion = corouteInclusion;
    return this;
  }

   /**
   * Get corouteInclusion
   * @return corouteInclusion
  **/
  @ApiModelProperty(value = "")
  public ConnectivityServiceRef getCorouteInclusion() {
    return corouteInclusion;
  }

  public void setCorouteInclusion(ConnectivityServiceRef corouteInclusion) {
    this.corouteInclusion = corouteInclusion;
  }

  public ConnectivityServiceSchema diversityPolicy(String diversityPolicy) {
    this.diversityPolicy = diversityPolicy;
    return this;
  }

   /**
   * Get diversityPolicy
   * @return diversityPolicy
  **/
  @ApiModelProperty(value = "")
  public String getDiversityPolicy() {
    return diversityPolicy;
  }

  public void setDiversityPolicy(String diversityPolicy) {
    this.diversityPolicy = diversityPolicy;
  }

  public ConnectivityServiceSchema routeDirection(RouteDirectionEnum routeDirection) {
    this.routeDirection = routeDirection;
    return this;
  }

   /**
   * Get routeDirection
   * @return routeDirection
  **/
  @ApiModelProperty(value = "")
  public RouteDirectionEnum getRouteDirection() {
    return routeDirection;
  }

  public void setRouteDirection(RouteDirectionEnum routeDirection) {
    this.routeDirection = routeDirection;
  }

  public ConnectivityServiceSchema costCharacteristic(List<CostCharacteristic> costCharacteristic) {
    this.costCharacteristic = costCharacteristic;
    return this;
  }

  public ConnectivityServiceSchema addCostCharacteristicItem(CostCharacteristic costCharacteristicItem) {
    if (this.costCharacteristic == null) {
      this.costCharacteristic = new ArrayList<CostCharacteristic>();
    }
    this.costCharacteristic.add(costCharacteristicItem);
    return this;
  }

   /**
   * The list of costs where each cost relates to some aspect of the TopologicalEntity.
   * @return costCharacteristic
  **/
  @ApiModelProperty(value = "The list of costs where each cost relates to some aspect of the TopologicalEntity.")
  public List<CostCharacteristic> getCostCharacteristic() {
    return costCharacteristic;
  }

  public void setCostCharacteristic(List<CostCharacteristic> costCharacteristic) {
    this.costCharacteristic = costCharacteristic;
  }

  public ConnectivityServiceSchema routeObjectiveFunction(String routeObjectiveFunction) {
    this.routeObjectiveFunction = routeObjectiveFunction;
    return this;
  }

   /**
   * Get routeObjectiveFunction
   * @return routeObjectiveFunction
  **/
  @ApiModelProperty(value = "")
  public String getRouteObjectiveFunction() {
    return routeObjectiveFunction;
  }

  public void setRouteObjectiveFunction(String routeObjectiveFunction) {
    this.routeObjectiveFunction = routeObjectiveFunction;
  }

  public ConnectivityServiceSchema isExclusive(Boolean isExclusive) {
    this.isExclusive = isExclusive;
    return this;
  }

   /**
   * To distinguish if the resources are to be exclusive to the service
   * @return isExclusive
  **/
  @ApiModelProperty(value = "To distinguish if the resources are to be exclusive to the service")
  public Boolean isIsExclusive() {
    return isExclusive;
  }

  public void setIsExclusive(Boolean isExclusive) {
    this.isExclusive = isExclusive;
  }

  public ConnectivityServiceSchema latencyCharacteristic(List<LatencyCharacteristic> latencyCharacteristic) {
    this.latencyCharacteristic = latencyCharacteristic;
    return this;
  }

  public ConnectivityServiceSchema addLatencyCharacteristicItem(LatencyCharacteristic latencyCharacteristicItem) {
    if (this.latencyCharacteristic == null) {
      this.latencyCharacteristic = new ArrayList<LatencyCharacteristic>();
    }
    this.latencyCharacteristic.add(latencyCharacteristicItem);
    return this;
  }

   /**
   * The effect on the latency of a queuing process. This only has significant effect for packet based systems and has a complex characteristic.
   * @return latencyCharacteristic
  **/
  @ApiModelProperty(value = "The effect on the latency of a queuing process. This only has significant effect for packet based systems and has a complex characteristic.")
  public List<LatencyCharacteristic> getLatencyCharacteristic() {
    return latencyCharacteristic;
  }

  public void setLatencyCharacteristic(List<LatencyCharacteristic> latencyCharacteristic) {
    this.latencyCharacteristic = latencyCharacteristic;
  }

  public ConnectivityServiceSchema riskDiversityCharacteristic(List<RiskCharacteristic> riskDiversityCharacteristic) {
    this.riskDiversityCharacteristic = riskDiversityCharacteristic;
    return this;
  }

  public ConnectivityServiceSchema addRiskDiversityCharacteristicItem(RiskCharacteristic riskDiversityCharacteristicItem) {
    if (this.riskDiversityCharacteristic == null) {
      this.riskDiversityCharacteristic = new ArrayList<RiskCharacteristic>();
    }
    this.riskDiversityCharacteristic.add(riskDiversityCharacteristicItem);
    return this;
  }

   /**
   * Get riskDiversityCharacteristic
   * @return riskDiversityCharacteristic
  **/
  @ApiModelProperty(value = "")
  public List<RiskCharacteristic> getRiskDiversityCharacteristic() {
    return riskDiversityCharacteristic;
  }

  public void setRiskDiversityCharacteristic(List<RiskCharacteristic> riskDiversityCharacteristic) {
    this.riskDiversityCharacteristic = riskDiversityCharacteristic;
  }

  public ConnectivityServiceSchema excludeNode(List<String> excludeNode) {
    this.excludeNode = excludeNode;
    return this;
  }

  public ConnectivityServiceSchema addExcludeNodeItem(String excludeNodeItem) {
    if (this.excludeNode == null) {
      this.excludeNode = new ArrayList<String>();
    }
    this.excludeNode.add(excludeNodeItem);
    return this;
  }

   /**
   * Get excludeNode
   * @return excludeNode
  **/
  @ApiModelProperty(value = "")
  public List<String> getExcludeNode() {
    return excludeNode;
  }

  public void setExcludeNode(List<String> excludeNode) {
    this.excludeNode = excludeNode;
  }

  public ConnectivityServiceSchema includeNode(List<String> includeNode) {
    this.includeNode = includeNode;
    return this;
  }

  public ConnectivityServiceSchema addIncludeNodeItem(String includeNodeItem) {
    if (this.includeNode == null) {
      this.includeNode = new ArrayList<String>();
    }
    this.includeNode.add(includeNodeItem);
    return this;
  }

   /**
   * Get includeNode
   * @return includeNode
  **/
  @ApiModelProperty(value = "")
  public List<String> getIncludeNode() {
    return includeNode;
  }

  public void setIncludeNode(List<String> includeNode) {
    this.includeNode = includeNode;
  }

  public ConnectivityServiceSchema includePath(List<String> includePath) {
    this.includePath = includePath;
    return this;
  }

  public ConnectivityServiceSchema addIncludePathItem(String includePathItem) {
    if (this.includePath == null) {
      this.includePath = new ArrayList<String>();
    }
    this.includePath.add(includePathItem);
    return this;
  }

   /**
   * Get includePath
   * @return includePath
  **/
  @ApiModelProperty(value = "")
  public List<String> getIncludePath() {
    return includePath;
  }

  public void setIncludePath(List<String> includePath) {
    this.includePath = includePath;
  }

  public ConnectivityServiceSchema includeLink(List<String> includeLink) {
    this.includeLink = includeLink;
    return this;
  }

  public ConnectivityServiceSchema addIncludeLinkItem(String includeLinkItem) {
    if (this.includeLink == null) {
      this.includeLink = new ArrayList<String>();
    }
    this.includeLink.add(includeLinkItem);
    return this;
  }

   /**
   * Get includeLink
   * @return includeLink
  **/
  @ApiModelProperty(value = "")
  public List<String> getIncludeLink() {
    return includeLink;
  }

  public void setIncludeLink(List<String> includeLink) {
    this.includeLink = includeLink;
  }

  public ConnectivityServiceSchema excludePath(List<String> excludePath) {
    this.excludePath = excludePath;
    return this;
  }

  public ConnectivityServiceSchema addExcludePathItem(String excludePathItem) {
    if (this.excludePath == null) {
      this.excludePath = new ArrayList<String>();
    }
    this.excludePath.add(excludePathItem);
    return this;
  }

   /**
   * Get excludePath
   * @return excludePath
  **/
  @ApiModelProperty(value = "")
  public List<String> getExcludePath() {
    return excludePath;
  }

  public void setExcludePath(List<String> excludePath) {
    this.excludePath = excludePath;
  }

  public ConnectivityServiceSchema excludeLink(List<String> excludeLink) {
    this.excludeLink = excludeLink;
    return this;
  }

  public ConnectivityServiceSchema addExcludeLinkItem(String excludeLinkItem) {
    if (this.excludeLink == null) {
      this.excludeLink = new ArrayList<String>();
    }
    this.excludeLink.add(excludeLinkItem);
    return this;
  }

   /**
   * Get excludeLink
   * @return excludeLink
  **/
  @ApiModelProperty(value = "")
  public List<String> getExcludeLink() {
    return excludeLink;
  }

  public void setExcludeLink(List<String> excludeLink) {
    this.excludeLink = excludeLink;
  }

  public ConnectivityServiceSchema preferredTransportLayer(List<PreferredTransportLayerEnum> preferredTransportLayer) {
    this.preferredTransportLayer = preferredTransportLayer;
    return this;
  }

  public ConnectivityServiceSchema addPreferredTransportLayerItem(PreferredTransportLayerEnum preferredTransportLayerItem) {
    if (this.preferredTransportLayer == null) {
      this.preferredTransportLayer = new ArrayList<PreferredTransportLayerEnum>();
    }
    this.preferredTransportLayer.add(preferredTransportLayerItem);
    return this;
  }

   /**
   * Get preferredTransportLayer
   * @return preferredTransportLayer
  **/
  @ApiModelProperty(value = "")
  public List<PreferredTransportLayerEnum> getPreferredTransportLayer() {
    return preferredTransportLayer;
  }

  public void setPreferredTransportLayer(List<PreferredTransportLayerEnum> preferredTransportLayer) {
    this.preferredTransportLayer = preferredTransportLayer;
  }

  public ConnectivityServiceSchema avoidTopology(List<String> avoidTopology) {
    this.avoidTopology = avoidTopology;
    return this;
  }

  public ConnectivityServiceSchema addAvoidTopologyItem(String avoidTopologyItem) {
    if (this.avoidTopology == null) {
      this.avoidTopology = new ArrayList<String>();
    }
    this.avoidTopology.add(avoidTopologyItem);
    return this;
  }

   /**
   * Get avoidTopology
   * @return avoidTopology
  **/
  @ApiModelProperty(value = "")
  public List<String> getAvoidTopology() {
    return avoidTopology;
  }

  public void setAvoidTopology(List<String> avoidTopology) {
    this.avoidTopology = avoidTopology;
  }

  public ConnectivityServiceSchema includeTopology(List<String> includeTopology) {
    this.includeTopology = includeTopology;
    return this;
  }

  public ConnectivityServiceSchema addIncludeTopologyItem(String includeTopologyItem) {
    if (this.includeTopology == null) {
      this.includeTopology = new ArrayList<String>();
    }
    this.includeTopology.add(includeTopologyItem);
    return this;
  }

   /**
   * Get includeTopology
   * @return includeTopology
  **/
  @ApiModelProperty(value = "")
  public List<String> getIncludeTopology() {
    return includeTopology;
  }

  public void setIncludeTopology(List<String> includeTopology) {
    this.includeTopology = includeTopology;
  }

  public ConnectivityServiceSchema maxSwitchTimes(String maxSwitchTimes) {
    this.maxSwitchTimes = maxSwitchTimes;
    return this;
  }

   /**
   * Used to limit the maximum swtich times. When work fault disappears , and traffic return to the original work path, switch counter reset.
   * @return maxSwitchTimes
  **/
  @ApiModelProperty(value = "Used to limit the maximum swtich times. When work fault disappears , and traffic return to the original work path, switch counter reset.")
  public String getMaxSwitchTimes() {
    return maxSwitchTimes;
  }

  public void setMaxSwitchTimes(String maxSwitchTimes) {
    this.maxSwitchTimes = maxSwitchTimes;
  }

  public ConnectivityServiceSchema waitToRevertTime(String waitToRevertTime) {
    this.waitToRevertTime = waitToRevertTime;
    return this;
  }

   /**
   * If the protection system is revertive, this attribute specifies the time, in minutes, to wait after a fault clears on a higher priority (preferred) resource before reverting to the preferred resource.
   * @return waitToRevertTime
  **/
  @ApiModelProperty(value = "If the protection system is revertive, this attribute specifies the time, in minutes, to wait after a fault clears on a higher priority (preferred) resource before reverting to the preferred resource.")
  public String getWaitToRevertTime() {
    return waitToRevertTime;
  }

  public void setWaitToRevertTime(String waitToRevertTime) {
    this.waitToRevertTime = waitToRevertTime;
  }

  public ConnectivityServiceSchema restorePriority(String restorePriority) {
    this.restorePriority = restorePriority;
    return this;
  }

   /**
   * Get restorePriority
   * @return restorePriority
  **/
  @ApiModelProperty(value = "")
  public String getRestorePriority() {
    return restorePriority;
  }

  public void setRestorePriority(String restorePriority) {
    this.restorePriority = restorePriority;
  }

  public ConnectivityServiceSchema isLockOut(Boolean isLockOut) {
    this.isLockOut = isLockOut;
    return this;
  }

   /**
   * The resource is configured to temporarily not be available for use in the protection scheme(s) it is part of. This overrides all other protection control states including forced. If the item is locked out then it cannot be used under any circumstances. Note: Only relevant when part of a protection scheme.
   * @return isLockOut
  **/
  @ApiModelProperty(value = "The resource is configured to temporarily not be available for use in the protection scheme(s) it is part of. This overrides all other protection control states including forced. If the item is locked out then it cannot be used under any circumstances. Note: Only relevant when part of a protection scheme.")
  public Boolean isIsLockOut() {
    return isLockOut;
  }

  public void setIsLockOut(Boolean isLockOut) {
    this.isLockOut = isLockOut;
  }

  public ConnectivityServiceSchema isCoordinatedSwitchingBothEnds(Boolean isCoordinatedSwitchingBothEnds) {
    this.isCoordinatedSwitchingBothEnds = isCoordinatedSwitchingBothEnds;
    return this;
  }

   /**
   * Is operating such that switching at both ends of each flow acorss the FC is coordinated at both ingress and egress ends.
   * @return isCoordinatedSwitchingBothEnds
  **/
  @ApiModelProperty(value = "Is operating such that switching at both ends of each flow acorss the FC is coordinated at both ingress and egress ends.")
  public Boolean isIsCoordinatedSwitchingBothEnds() {
    return isCoordinatedSwitchingBothEnds;
  }

  public void setIsCoordinatedSwitchingBothEnds(Boolean isCoordinatedSwitchingBothEnds) {
    this.isCoordinatedSwitchingBothEnds = isCoordinatedSwitchingBothEnds;
  }

  public ConnectivityServiceSchema isFrozen(Boolean isFrozen) {
    this.isFrozen = isFrozen;
    return this;
  }

   /**
   * Temporarily prevents any switch action to be taken and, as such, freezes the current state. Until the freeze is cleared, additional near-end external commands are rejected and fault condition changes and received APS messages are ignored. All administrative controls of any aspect of protection are rejected.
   * @return isFrozen
  **/
  @ApiModelProperty(value = "Temporarily prevents any switch action to be taken and, as such, freezes the current state. Until the freeze is cleared, additional near-end external commands are rejected and fault condition changes and received APS messages are ignored. All administrative controls of any aspect of protection are rejected.")
  public Boolean isIsFrozen() {
    return isFrozen;
  }

  public void setIsFrozen(Boolean isFrozen) {
    this.isFrozen = isFrozen;
  }

  public ConnectivityServiceSchema preferredRestorationLayer(List<PreferredRestorationLayerEnum> preferredRestorationLayer) {
    this.preferredRestorationLayer = preferredRestorationLayer;
    return this;
  }

  public ConnectivityServiceSchema addPreferredRestorationLayerItem(PreferredRestorationLayerEnum preferredRestorationLayerItem) {
    if (this.preferredRestorationLayer == null) {
      this.preferredRestorationLayer = new ArrayList<PreferredRestorationLayerEnum>();
    }
    this.preferredRestorationLayer.add(preferredRestorationLayerItem);
    return this;
  }

   /**
   * Get preferredRestorationLayer
   * @return preferredRestorationLayer
  **/
  @ApiModelProperty(value = "")
  public List<PreferredRestorationLayerEnum> getPreferredRestorationLayer() {
    return preferredRestorationLayer;
  }

  public void setPreferredRestorationLayer(List<PreferredRestorationLayerEnum> preferredRestorationLayer) {
    this.preferredRestorationLayer = preferredRestorationLayer;
  }

  public ConnectivityServiceSchema reversionMode(ReversionModeEnum reversionMode) {
    this.reversionMode = reversionMode;
    return this;
  }

   /**
   * Indcates whether the protection scheme is revertive or non-revertive.
   * @return reversionMode
  **/
  @ApiModelProperty(value = "Indcates whether the protection scheme is revertive or non-revertive.")
  public ReversionModeEnum getReversionMode() {
    return reversionMode;
  }

  public void setReversionMode(ReversionModeEnum reversionMode) {
    this.reversionMode = reversionMode;
  }

  public ConnectivityServiceSchema holdOffTime(String holdOffTime) {
    this.holdOffTime = holdOffTime;
    return this;
  }

   /**
   * This attribute indicates the time, in milliseconds, between declaration of signal degrade or signal fail, and the initialization of the protection switching algorithm.
   * @return holdOffTime
  **/
  @ApiModelProperty(value = "This attribute indicates the time, in milliseconds, between declaration of signal degrade or signal fail, and the initialization of the protection switching algorithm.")
  public String getHoldOffTime() {
    return holdOffTime;
  }

  public void setHoldOffTime(String holdOffTime) {
    this.holdOffTime = holdOffTime;
  }

  public ConnectivityServiceSchema resilienceType(ResilienceType resilienceType) {
    this.resilienceType = resilienceType;
    return this;
  }

   /**
   * Get resilienceType
   * @return resilienceType
  **/
  @ApiModelProperty(value = "")
  public ResilienceType getResilienceType() {
    return resilienceType;
  }

  public void setResilienceType(ResilienceType resilienceType) {
    this.resilienceType = resilienceType;
  }

  public ConnectivityServiceSchema restorationCoordinateType(RestorationCoordinateTypeEnum restorationCoordinateType) {
    this.restorationCoordinateType = restorationCoordinateType;
    return this;
  }

   /**
   *  The coordination mechanism between multi-layers.
   * @return restorationCoordinateType
  **/
  @ApiModelProperty(value = " The coordination mechanism between multi-layers.")
  public RestorationCoordinateTypeEnum getRestorationCoordinateType() {
    return restorationCoordinateType;
  }

  public void setRestorationCoordinateType(RestorationCoordinateTypeEnum restorationCoordinateType) {
    this.restorationCoordinateType = restorationCoordinateType;
  }

  public ConnectivityServiceSchema administrativeState(AdministrativeStateEnum administrativeState) {
    this.administrativeState = administrativeState;
    return this;
  }

   /**
   * Get administrativeState
   * @return administrativeState
  **/
  @ApiModelProperty(value = "")
  public AdministrativeStateEnum getAdministrativeState() {
    return administrativeState;
  }

  public void setAdministrativeState(AdministrativeStateEnum administrativeState) {
    this.administrativeState = administrativeState;
  }

  public ConnectivityServiceSchema lifecycleState(LifecycleStateEnum lifecycleState) {
    this.lifecycleState = lifecycleState;
    return this;
  }

   /**
   * Get lifecycleState
   * @return lifecycleState
  **/
  @ApiModelProperty(value = "")
  public LifecycleStateEnum getLifecycleState() {
    return lifecycleState;
  }

  public void setLifecycleState(LifecycleStateEnum lifecycleState) {
    this.lifecycleState = lifecycleState;
  }

  public ConnectivityServiceSchema operationalState(OperationalStateEnum operationalState) {
    this.operationalState = operationalState;
    return this;
  }

   /**
   * Get operationalState
   * @return operationalState
  **/
  @ApiModelProperty(value = "")
  public OperationalStateEnum getOperationalState() {
    return operationalState;
  }

  public void setOperationalState(OperationalStateEnum operationalState) {
    this.operationalState = operationalState;
  }

  public ConnectivityServiceSchema connection(List<ConnectionRef> connection) {
    this.connection = connection;
    return this;
  }

  public ConnectivityServiceSchema addConnectionItem(ConnectionRef connectionItem) {
    if (this.connection == null) {
      this.connection = new ArrayList<ConnectionRef>();
    }
    this.connection.add(connectionItem);
    return this;
  }

   /**
   * Get connection
   * @return connection
  **/
  @ApiModelProperty(value = "")
  public List<ConnectionRef> getConnection() {
    return connection;
  }

  public void setConnection(List<ConnectionRef> connection) {
    this.connection = connection;
  }

  public ConnectivityServiceSchema endPoint(List<ConnectivityServiceEndPoint> endPoint) {
    this.endPoint = endPoint;
    return this;
  }

  public ConnectivityServiceSchema addEndPointItem(ConnectivityServiceEndPoint endPointItem) {
    if (this.endPoint == null) {
      this.endPoint = new ArrayList<ConnectivityServiceEndPoint>();
    }
    this.endPoint.add(endPointItem);
    return this;
  }

   /**
   * Get endPoint
   * @return endPoint
  **/
  @ApiModelProperty(value = "")
  public List<ConnectivityServiceEndPoint> getEndPoint() {
    return endPoint;
  }

  public void setEndPoint(List<ConnectivityServiceEndPoint> endPoint) {
    this.endPoint = endPoint;
  }

  public ConnectivityServiceSchema includeCore(SdmPropertiesPac includeCore) {
    this.includeCore = includeCore;
    return this;
  }

   /**
   * Get includeCore
   * @return includeCore
  **/
  @ApiModelProperty(value = "")
  public SdmPropertiesPac getIncludeCore() {
    return includeCore;
  }

  public void setIncludeCore(SdmPropertiesPac includeCore) {
    this.includeCore = includeCore;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConnectivityServiceSchema connectivityServiceSchema = (ConnectivityServiceSchema) o;
    return Objects.equals(this.uuid, connectivityServiceSchema.uuid) &&
        Objects.equals(this.name, connectivityServiceSchema.name) &&
        Objects.equals(this.serviceType, connectivityServiceSchema.serviceType) &&
        Objects.equals(this.schedule, connectivityServiceSchema.schedule) &&
        Objects.equals(this.requestedCapacity, connectivityServiceSchema.requestedCapacity) &&
        Objects.equals(this.serviceLayer, connectivityServiceSchema.serviceLayer) &&
        Objects.equals(this.serviceLevel, connectivityServiceSchema.serviceLevel) &&
        Objects.equals(this.diversityExclusion, connectivityServiceSchema.diversityExclusion) &&
        Objects.equals(this.connectivityDirection, connectivityServiceSchema.connectivityDirection) &&
        Objects.equals(this.corouteInclusion, connectivityServiceSchema.corouteInclusion) &&
        Objects.equals(this.diversityPolicy, connectivityServiceSchema.diversityPolicy) &&
        Objects.equals(this.routeDirection, connectivityServiceSchema.routeDirection) &&
        Objects.equals(this.costCharacteristic, connectivityServiceSchema.costCharacteristic) &&
        Objects.equals(this.routeObjectiveFunction, connectivityServiceSchema.routeObjectiveFunction) &&
        Objects.equals(this.isExclusive, connectivityServiceSchema.isExclusive) &&
        Objects.equals(this.latencyCharacteristic, connectivityServiceSchema.latencyCharacteristic) &&
        Objects.equals(this.riskDiversityCharacteristic, connectivityServiceSchema.riskDiversityCharacteristic) &&
        Objects.equals(this.excludeNode, connectivityServiceSchema.excludeNode) &&
        Objects.equals(this.includeNode, connectivityServiceSchema.includeNode) &&
        Objects.equals(this.includePath, connectivityServiceSchema.includePath) &&
        Objects.equals(this.includeLink, connectivityServiceSchema.includeLink) &&
        Objects.equals(this.excludePath, connectivityServiceSchema.excludePath) &&
        Objects.equals(this.excludeLink, connectivityServiceSchema.excludeLink) &&
        Objects.equals(this.preferredTransportLayer, connectivityServiceSchema.preferredTransportLayer) &&
        Objects.equals(this.avoidTopology, connectivityServiceSchema.avoidTopology) &&
        Objects.equals(this.includeTopology, connectivityServiceSchema.includeTopology) &&
        Objects.equals(this.maxSwitchTimes, connectivityServiceSchema.maxSwitchTimes) &&
        Objects.equals(this.waitToRevertTime, connectivityServiceSchema.waitToRevertTime) &&
        Objects.equals(this.restorePriority, connectivityServiceSchema.restorePriority) &&
        Objects.equals(this.isLockOut, connectivityServiceSchema.isLockOut) &&
        Objects.equals(this.isCoordinatedSwitchingBothEnds, connectivityServiceSchema.isCoordinatedSwitchingBothEnds) &&
        Objects.equals(this.isFrozen, connectivityServiceSchema.isFrozen) &&
        Objects.equals(this.preferredRestorationLayer, connectivityServiceSchema.preferredRestorationLayer) &&
        Objects.equals(this.reversionMode, connectivityServiceSchema.reversionMode) &&
        Objects.equals(this.holdOffTime, connectivityServiceSchema.holdOffTime) &&
        Objects.equals(this.resilienceType, connectivityServiceSchema.resilienceType) &&
        Objects.equals(this.restorationCoordinateType, connectivityServiceSchema.restorationCoordinateType) &&
        Objects.equals(this.administrativeState, connectivityServiceSchema.administrativeState) &&
        Objects.equals(this.lifecycleState, connectivityServiceSchema.lifecycleState) &&
        Objects.equals(this.operationalState, connectivityServiceSchema.operationalState) &&
        Objects.equals(this.connection, connectivityServiceSchema.connection) &&
        Objects.equals(this.endPoint, connectivityServiceSchema.endPoint) &&
        Objects.equals(this.includeCore, connectivityServiceSchema.includeCore);
  }

  @Override
  public int hashCode() {
    return Objects.hash(uuid, name, serviceType, schedule, requestedCapacity, serviceLayer, serviceLevel, diversityExclusion, connectivityDirection, corouteInclusion, diversityPolicy, routeDirection, costCharacteristic, routeObjectiveFunction, isExclusive, latencyCharacteristic, riskDiversityCharacteristic, excludeNode, includeNode, includePath, includeLink, excludePath, excludeLink, preferredTransportLayer, avoidTopology, includeTopology, maxSwitchTimes, waitToRevertTime, restorePriority, isLockOut, isCoordinatedSwitchingBothEnds, isFrozen, preferredRestorationLayer, reversionMode, holdOffTime, resilienceType, restorationCoordinateType, administrativeState, lifecycleState, operationalState, connection, endPoint, includeCore);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConnectivityServiceSchema {\n");
    
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    serviceType: ").append(toIndentedString(serviceType)).append("\n");
    sb.append("    schedule: ").append(toIndentedString(schedule)).append("\n");
    sb.append("    requestedCapacity: ").append(toIndentedString(requestedCapacity)).append("\n");
    sb.append("    serviceLayer: ").append(toIndentedString(serviceLayer)).append("\n");
    sb.append("    serviceLevel: ").append(toIndentedString(serviceLevel)).append("\n");
    sb.append("    diversityExclusion: ").append(toIndentedString(diversityExclusion)).append("\n");
    sb.append("    connectivityDirection: ").append(toIndentedString(connectivityDirection)).append("\n");
    sb.append("    corouteInclusion: ").append(toIndentedString(corouteInclusion)).append("\n");
    sb.append("    diversityPolicy: ").append(toIndentedString(diversityPolicy)).append("\n");
    sb.append("    routeDirection: ").append(toIndentedString(routeDirection)).append("\n");
    sb.append("    costCharacteristic: ").append(toIndentedString(costCharacteristic)).append("\n");
    sb.append("    routeObjectiveFunction: ").append(toIndentedString(routeObjectiveFunction)).append("\n");
    sb.append("    isExclusive: ").append(toIndentedString(isExclusive)).append("\n");
    sb.append("    latencyCharacteristic: ").append(toIndentedString(latencyCharacteristic)).append("\n");
    sb.append("    riskDiversityCharacteristic: ").append(toIndentedString(riskDiversityCharacteristic)).append("\n");
    sb.append("    excludeNode: ").append(toIndentedString(excludeNode)).append("\n");
    sb.append("    includeNode: ").append(toIndentedString(includeNode)).append("\n");
    sb.append("    includePath: ").append(toIndentedString(includePath)).append("\n");
    sb.append("    includeLink: ").append(toIndentedString(includeLink)).append("\n");
    sb.append("    excludePath: ").append(toIndentedString(excludePath)).append("\n");
    sb.append("    excludeLink: ").append(toIndentedString(excludeLink)).append("\n");
    sb.append("    preferredTransportLayer: ").append(toIndentedString(preferredTransportLayer)).append("\n");
    sb.append("    avoidTopology: ").append(toIndentedString(avoidTopology)).append("\n");
    sb.append("    includeTopology: ").append(toIndentedString(includeTopology)).append("\n");
    sb.append("    maxSwitchTimes: ").append(toIndentedString(maxSwitchTimes)).append("\n");
    sb.append("    waitToRevertTime: ").append(toIndentedString(waitToRevertTime)).append("\n");
    sb.append("    restorePriority: ").append(toIndentedString(restorePriority)).append("\n");
    sb.append("    isLockOut: ").append(toIndentedString(isLockOut)).append("\n");
    sb.append("    isCoordinatedSwitchingBothEnds: ").append(toIndentedString(isCoordinatedSwitchingBothEnds)).append("\n");
    sb.append("    isFrozen: ").append(toIndentedString(isFrozen)).append("\n");
    sb.append("    preferredRestorationLayer: ").append(toIndentedString(preferredRestorationLayer)).append("\n");
    sb.append("    reversionMode: ").append(toIndentedString(reversionMode)).append("\n");
    sb.append("    holdOffTime: ").append(toIndentedString(holdOffTime)).append("\n");
    sb.append("    resilienceType: ").append(toIndentedString(resilienceType)).append("\n");
    sb.append("    restorationCoordinateType: ").append(toIndentedString(restorationCoordinateType)).append("\n");
    sb.append("    administrativeState: ").append(toIndentedString(administrativeState)).append("\n");
    sb.append("    lifecycleState: ").append(toIndentedString(lifecycleState)).append("\n");
    sb.append("    operationalState: ").append(toIndentedString(operationalState)).append("\n");
    sb.append("    connection: ").append(toIndentedString(connection)).append("\n");
    sb.append("    endPoint: ").append(toIndentedString(endPoint)).append("\n");
    sb.append("    includeCore: ").append(toIndentedString(includeCore)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

