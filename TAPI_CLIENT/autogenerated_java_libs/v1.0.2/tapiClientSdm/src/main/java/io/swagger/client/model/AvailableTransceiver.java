/*
 * tapi-sdm API
 * tapi-sdm API generated from tapi-sdm.yang
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.AvailabletransceiverCoreModeRef;
import io.swagger.client.model.AvailabletransceiverSupportedbandwidth;
import io.swagger.client.model.SpectrumBand;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * AvailableTransceiver
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-07-09T13:10:07.918+02:00")
public class AvailableTransceiver {
  @SerializedName("supportable-spectrum")
  private SpectrumBand supportableSpectrum = null;

  @SerializedName("transceiver-id")
  private String transceiverId = null;

  @SerializedName("core_mode_ref")
  private List<AvailabletransceiverCoreModeRef> coreModeRef = null;

  @SerializedName("supportable-slices")
  private String supportableSlices = null;

  @SerializedName("supported-bandwidth")
  private AvailabletransceiverSupportedbandwidth supportedBandwidth = null;

  @SerializedName("transceiver-type")
  private String transceiverType = null;

  public AvailableTransceiver supportableSpectrum(SpectrumBand supportableSpectrum) {
    this.supportableSpectrum = supportableSpectrum;
    return this;
  }

   /**
   * Get supportableSpectrum
   * @return supportableSpectrum
  **/
  @ApiModelProperty(value = "")
  public SpectrumBand getSupportableSpectrum() {
    return supportableSpectrum;
  }

  public void setSupportableSpectrum(SpectrumBand supportableSpectrum) {
    this.supportableSpectrum = supportableSpectrum;
  }

  public AvailableTransceiver transceiverId(String transceiverId) {
    this.transceiverId = transceiverId;
    return this;
  }

   /**
   * Get transceiverId
   * @return transceiverId
  **/
  @ApiModelProperty(value = "")
  public String getTransceiverId() {
    return transceiverId;
  }

  public void setTransceiverId(String transceiverId) {
    this.transceiverId = transceiverId;
  }

  public AvailableTransceiver coreModeRef(List<AvailabletransceiverCoreModeRef> coreModeRef) {
    this.coreModeRef = coreModeRef;
    return this;
  }

  public AvailableTransceiver addCoreModeRefItem(AvailabletransceiverCoreModeRef coreModeRefItem) {
    if (this.coreModeRef == null) {
      this.coreModeRef = new ArrayList<AvailabletransceiverCoreModeRef>();
    }
    this.coreModeRef.add(coreModeRefItem);
    return this;
  }

   /**
   * Get coreModeRef
   * @return coreModeRef
  **/
  @ApiModelProperty(value = "")
  public List<AvailabletransceiverCoreModeRef> getCoreModeRef() {
    return coreModeRef;
  }

  public void setCoreModeRef(List<AvailabletransceiverCoreModeRef> coreModeRef) {
    this.coreModeRef = coreModeRef;
  }

  public AvailableTransceiver supportableSlices(String supportableSlices) {
    this.supportableSlices = supportableSlices;
    return this;
  }

   /**
   * Get supportableSlices
   * @return supportableSlices
  **/
  @ApiModelProperty(value = "")
  public String getSupportableSlices() {
    return supportableSlices;
  }

  public void setSupportableSlices(String supportableSlices) {
    this.supportableSlices = supportableSlices;
  }

  public AvailableTransceiver supportedBandwidth(AvailabletransceiverSupportedbandwidth supportedBandwidth) {
    this.supportedBandwidth = supportedBandwidth;
    return this;
  }

   /**
   * Get supportedBandwidth
   * @return supportedBandwidth
  **/
  @ApiModelProperty(value = "")
  public AvailabletransceiverSupportedbandwidth getSupportedBandwidth() {
    return supportedBandwidth;
  }

  public void setSupportedBandwidth(AvailabletransceiverSupportedbandwidth supportedBandwidth) {
    this.supportedBandwidth = supportedBandwidth;
  }

  public AvailableTransceiver transceiverType(String transceiverType) {
    this.transceiverType = transceiverType;
    return this;
  }

   /**
   * Get transceiverType
   * @return transceiverType
  **/
  @ApiModelProperty(value = "")
  public String getTransceiverType() {
    return transceiverType;
  }

  public void setTransceiverType(String transceiverType) {
    this.transceiverType = transceiverType;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AvailableTransceiver availableTransceiver = (AvailableTransceiver) o;
    return Objects.equals(this.supportableSpectrum, availableTransceiver.supportableSpectrum) &&
        Objects.equals(this.transceiverId, availableTransceiver.transceiverId) &&
        Objects.equals(this.coreModeRef, availableTransceiver.coreModeRef) &&
        Objects.equals(this.supportableSlices, availableTransceiver.supportableSlices) &&
        Objects.equals(this.supportedBandwidth, availableTransceiver.supportedBandwidth) &&
        Objects.equals(this.transceiverType, availableTransceiver.transceiverType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(supportableSpectrum, transceiverId, coreModeRef, supportableSlices, supportedBandwidth, transceiverType);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AvailableTransceiver {\n");
    
    sb.append("    supportableSpectrum: ").append(toIndentedString(supportableSpectrum)).append("\n");
    sb.append("    transceiverId: ").append(toIndentedString(transceiverId)).append("\n");
    sb.append("    coreModeRef: ").append(toIndentedString(coreModeRef)).append("\n");
    sb.append("    supportableSlices: ").append(toIndentedString(supportableSlices)).append("\n");
    sb.append("    supportedBandwidth: ").append(toIndentedString(supportedBandwidth)).append("\n");
    sb.append("    transceiverType: ").append(toIndentedString(transceiverType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

