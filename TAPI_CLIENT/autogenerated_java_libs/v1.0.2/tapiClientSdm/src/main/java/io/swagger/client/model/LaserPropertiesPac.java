/*
 * tapi-sdm API
 * tapi-sdm API generated from tapi-sdm.yang
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * LaserPropertiesPac
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-07-09T13:10:07.918+02:00")
public class LaserPropertiesPac {
  @SerializedName("laser-status")
  private String laserStatus = null;

  @SerializedName("laser-temperature")
  private Double laserTemperature = null;

  @SerializedName("laser-application-type")
  private String laserApplicationType = null;

  @SerializedName("laser-bias-current")
  private Double laserBiasCurrent = null;

  public LaserPropertiesPac laserStatus(String laserStatus) {
    this.laserStatus = laserStatus;
    return this;
  }

   /**
   * Get laserStatus
   * @return laserStatus
  **/
  @ApiModelProperty(value = "")
  public String getLaserStatus() {
    return laserStatus;
  }

  public void setLaserStatus(String laserStatus) {
    this.laserStatus = laserStatus;
  }

  public LaserPropertiesPac laserTemperature(Double laserTemperature) {
    this.laserTemperature = laserTemperature;
    return this;
  }

   /**
   * The temperature of the laser
   * @return laserTemperature
  **/
  @ApiModelProperty(value = "The temperature of the laser")
  public Double getLaserTemperature() {
    return laserTemperature;
  }

  public void setLaserTemperature(Double laserTemperature) {
    this.laserTemperature = laserTemperature;
  }

  public LaserPropertiesPac laserApplicationType(String laserApplicationType) {
    this.laserApplicationType = laserApplicationType;
    return this;
  }

   /**
   * The type of laser, its operational wavelengths, and its applications. String size 255.
   * @return laserApplicationType
  **/
  @ApiModelProperty(value = "The type of laser, its operational wavelengths, and its applications. String size 255.")
  public String getLaserApplicationType() {
    return laserApplicationType;
  }

  public void setLaserApplicationType(String laserApplicationType) {
    this.laserApplicationType = laserApplicationType;
  }

  public LaserPropertiesPac laserBiasCurrent(Double laserBiasCurrent) {
    this.laserBiasCurrent = laserBiasCurrent;
    return this;
  }

   /**
   * The Bias current of the laser that is the medium polarization current of the laser.
   * @return laserBiasCurrent
  **/
  @ApiModelProperty(value = "The Bias current of the laser that is the medium polarization current of the laser.")
  public Double getLaserBiasCurrent() {
    return laserBiasCurrent;
  }

  public void setLaserBiasCurrent(Double laserBiasCurrent) {
    this.laserBiasCurrent = laserBiasCurrent;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LaserPropertiesPac laserPropertiesPac = (LaserPropertiesPac) o;
    return Objects.equals(this.laserStatus, laserPropertiesPac.laserStatus) &&
        Objects.equals(this.laserTemperature, laserPropertiesPac.laserTemperature) &&
        Objects.equals(this.laserApplicationType, laserPropertiesPac.laserApplicationType) &&
        Objects.equals(this.laserBiasCurrent, laserPropertiesPac.laserBiasCurrent);
  }

  @Override
  public int hashCode() {
    return Objects.hash(laserStatus, laserTemperature, laserApplicationType, laserBiasCurrent);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LaserPropertiesPac {\n");
    
    sb.append("    laserStatus: ").append(toIndentedString(laserStatus)).append("\n");
    sb.append("    laserTemperature: ").append(toIndentedString(laserTemperature)).append("\n");
    sb.append("    laserApplicationType: ").append(toIndentedString(laserApplicationType)).append("\n");
    sb.append("    laserBiasCurrent: ").append(toIndentedString(laserBiasCurrent)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

