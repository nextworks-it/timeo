/*
 * tapi-sdm API
 * tapi-sdm API generated from tapi-sdm.yang
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.ApplicationIdentifier;
import io.swagger.client.model.AvailableTransceiver;
import io.swagger.client.model.BandwidthProfile;
import io.swagger.client.model.Capacity;
import io.swagger.client.model.CapacityValue;
import io.swagger.client.model.CentralFrequency;
import io.swagger.client.model.CepList;
import io.swagger.client.model.Connection;
import io.swagger.client.model.ConnectionEndPointRef;
import io.swagger.client.model.ConnectionEndPointSchema;
import io.swagger.client.model.ConnectionRef;
import io.swagger.client.model.ConnectivityContext;
import io.swagger.client.model.ConnectivityServiceRef;
import io.swagger.client.model.ConnectivityServiceSchema;
import io.swagger.client.model.ContextSchema;
import io.swagger.client.model.CoreIdSchema;
import io.swagger.client.model.CoreModeRefSchema;
import io.swagger.client.model.CostCharacteristic;
import io.swagger.client.model.CreateConnectivityServiceRPCInputSchema;
import io.swagger.client.model.CreateConnectivityServiceRPCOutputSchema;
import io.swagger.client.model.DeleteConnectivityServiceRPCInputSchema;
import io.swagger.client.model.EndPointSchema;
import io.swagger.client.model.FecPropertiesPac;
import io.swagger.client.model.FrequencyConstraint;
import io.swagger.client.model.GetConnectionDetailsRPCInputSchema;
import io.swagger.client.model.GetConnectionDetailsRPCOutputSchema;
import io.swagger.client.model.GetConnectionEndPointDetailsRPCInputSchema;
import io.swagger.client.model.GetConnectionEndPointDetailsRPCOutputSchema;
import io.swagger.client.model.GetConnectivityServiceDetailsRPCInputSchema;
import io.swagger.client.model.GetConnectivityServiceDetailsRPCOutputSchema;
import io.swagger.client.model.GetConnectivityServiceListRPCOutputSchema;
import io.swagger.client.model.GetLinkDetailsRPCInputSchema;
import io.swagger.client.model.GetLinkDetailsRPCOutputSchema;
import io.swagger.client.model.GetNodeDetailsRPCInputSchema;
import io.swagger.client.model.GetNodeDetailsRPCOutputSchema;
import io.swagger.client.model.GetNodeEdgePointDetailsRPCInputSchema;
import io.swagger.client.model.GetNodeEdgePointDetailsRPCOutputSchema;
import io.swagger.client.model.GetServiceInterfacePointDetailsRPCInputSchema;
import io.swagger.client.model.GetServiceInterfacePointDetailsRPCOutputSchema;
import io.swagger.client.model.GetServiceInterfacePointListRPCOutputSchema;
import io.swagger.client.model.GetTopologyDetailsRPCInputSchema;
import io.swagger.client.model.GetTopologyDetailsRPCOutputSchema;
import io.swagger.client.model.GetTopologyListRPCOutputSchema;
import io.swagger.client.model.InterRuleGroup;
import io.swagger.client.model.LaserPropertiesPac;
import io.swagger.client.model.LatencyCharacteristic;
import io.swagger.client.model.Link;
import io.swagger.client.model.LinkRef;
import io.swagger.client.model.MediaChannelAssemblySpec;
import io.swagger.client.model.MediaChannelConnectionEndPointSpec;
import io.swagger.client.model.MediaChannelNodeEdgePointSpec;
import io.swagger.client.model.MediaChannelPoolCapabilityPac;
import io.swagger.client.model.MediaChannelPropertiesPac;
import io.swagger.client.model.MediaChannelServiceInterfacePointSpec;
import io.swagger.client.model.ModeIdSchema;
import io.swagger.client.model.ModelSwitch;
import io.swagger.client.model.NameAndValue;
import io.swagger.client.model.NetworkTopologyService;
import io.swagger.client.model.Node;
import io.swagger.client.model.NodeEdgePointRef;
import io.swagger.client.model.NodeRuleGroup;
import io.swagger.client.model.NodeRuleGroupRef;
import io.swagger.client.model.OtsConnectionEndPointSpec;
import io.swagger.client.model.OtsiAssemblyConnectionEndPointSpec;
import io.swagger.client.model.OtsiCapabilityPac;
import io.swagger.client.model.OtsiConnectionEndPointSpec;
import io.swagger.client.model.OtsiConnectivityServiceEndPointSpec;
import io.swagger.client.model.OtsiGserverAdaptationPac;
import io.swagger.client.model.OtsiServiceInterfacePointSpec;
import io.swagger.client.model.OtsiTerminationConfigPac;
import io.swagger.client.model.OtsiTerminationPac;
import io.swagger.client.model.OwnedNodeEdgePointSchema;
import io.swagger.client.model.Path;
import io.swagger.client.model.PathComputationContext;
import io.swagger.client.model.PathComputationService;
import io.swagger.client.model.PathObjectiveFunction;
import io.swagger.client.model.PathOptimizationConstraint;
import io.swagger.client.model.PathRef;
import io.swagger.client.model.PathServiceEndPoint;
import io.swagger.client.model.PowerPropertiesPac;
import io.swagger.client.model.ResilienceType;
import io.swagger.client.model.RiskCharacteristic;
import io.swagger.client.model.Route;
import io.swagger.client.model.RouteRef;
import io.swagger.client.model.RoutingConstraint;
import io.swagger.client.model.Rule;
import io.swagger.client.model.SdmConnectionEndPointSpec;
import io.swagger.client.model.SdmCorePac;
import io.swagger.client.model.SdmModePac;
import io.swagger.client.model.SdmNodeEdgePointSpec;
import io.swagger.client.model.SdmPoolCapabilityPac;
import io.swagger.client.model.SdmPropertiesPac;
import io.swagger.client.model.SdmServiceInterfacePointSpec;
import io.swagger.client.model.ServiceInterfacePointRef;
import io.swagger.client.model.ServiceInterfacePointSchema;
import io.swagger.client.model.SpectrumBand;
import io.swagger.client.model.SupportedBandwidthSchema;
import io.swagger.client.model.SwitchControl;
import io.swagger.client.model.SwitchControlRef;
import io.swagger.client.model.TimeRange;
import io.swagger.client.model.Topology;
import io.swagger.client.model.TopologyConstraint;
import io.swagger.client.model.TopologyContext;
import io.swagger.client.model.TopologyRef;
import io.swagger.client.model.TotalPowerThresholdPac;
import io.swagger.client.model.UpdateConnectivityServiceRPCInputSchema;
import io.swagger.client.model.UpdateConnectivityServiceRPCOutputSchema;
import io.swagger.client.model.UpdateServiceInterfacePointRPCInputSchema;
import io.swagger.client.model.ValidationMechanism;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Ignore
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    
    /**
     * Create context by ID
     *
     * Create operation of resource: context
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextByIdTest() throws ApiException {
        ContextSchema context = null;
        api.createContextById(context);

        // TODO: test validations
    }
    
    /**
     * Create connection-end-point by ID
     *
     * Create operation of resource: connection-end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectionConnectionEndPointConnectionEndPointByIdTest() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        ConnectionEndPointSchema connectionEndPoint = null;
        api.createContextConnectivityContextConnectionConnectionEndPointConnectionEndPointById(uuid, connectionEndPointUuid, connectionEndPoint);

        // TODO: test validations
    }
    
    /**
     * Create media-channel-assembly-spec by ID
     *
     * Create operation of resource: media-channel-assembly-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectionConnectionEndPointMediaChannelAssemblySpecMediaChannelAssemblySpecByIdTest() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        MediaChannelAssemblySpec mediaChannelAssemblySpec = null;
        api.createContextConnectivityContextConnectionConnectionEndPointMediaChannelAssemblySpecMediaChannelAssemblySpecById(uuid, connectionEndPointUuid, mediaChannelAssemblySpec);

        // TODO: test validations
    }
    
    /**
     * Create media-channel-connection-end-point-spec by ID
     *
     * Create operation of resource: media-channel-connection-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectionConnectionEndPointMediaChannelConnectionEndPointSpecMediaChannelConnectionEndPointSpecByIdTest() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        MediaChannelConnectionEndPointSpec mediaChannelConnectionEndPointSpec = null;
        api.createContextConnectivityContextConnectionConnectionEndPointMediaChannelConnectionEndPointSpecMediaChannelConnectionEndPointSpecById(uuid, connectionEndPointUuid, mediaChannelConnectionEndPointSpec);

        // TODO: test validations
    }
    
    /**
     * Create name by ID
     *
     * Create operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectionConnectionEndPointNameNameByIdTest() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        String valueName = null;
        NameAndValue name = null;
        api.createContextConnectivityContextConnectionConnectionEndPointNameNameById(uuid, connectionEndPointUuid, valueName, name);

        // TODO: test validations
    }
    
    /**
     * Create ots-connection-end-point-spec by ID
     *
     * Create operation of resource: ots-connection-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectionConnectionEndPointOtsConnectionEndPointSpecOtsConnectionEndPointSpecByIdTest() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        OtsConnectionEndPointSpec otsConnectionEndPointSpec = null;
        api.createContextConnectivityContextConnectionConnectionEndPointOtsConnectionEndPointSpecOtsConnectionEndPointSpecById(uuid, connectionEndPointUuid, otsConnectionEndPointSpec);

        // TODO: test validations
    }
    
    /**
     * Create otsi-assembly-connection-end-point-spec by ID
     *
     * Create operation of resource: otsi-assembly-connection-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectionConnectionEndPointOtsiAssemblyConnectionEndPointSpecOtsiAssemblyConnectionEndPointSpecByIdTest() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        OtsiAssemblyConnectionEndPointSpec otsiAssemblyConnectionEndPointSpec = null;
        api.createContextConnectivityContextConnectionConnectionEndPointOtsiAssemblyConnectionEndPointSpecOtsiAssemblyConnectionEndPointSpecById(uuid, connectionEndPointUuid, otsiAssemblyConnectionEndPointSpec);

        // TODO: test validations
    }
    
    /**
     * Create otsi-connection-end-point-spec by ID
     *
     * Create operation of resource: otsi-connection-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectionConnectionEndPointOtsiConnectionEndPointSpecOtsiConnectionEndPointSpecByIdTest() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        OtsiConnectionEndPointSpec otsiConnectionEndPointSpec = null;
        api.createContextConnectivityContextConnectionConnectionEndPointOtsiConnectionEndPointSpecOtsiConnectionEndPointSpecById(uuid, connectionEndPointUuid, otsiConnectionEndPointSpec);

        // TODO: test validations
    }
    
    /**
     * Create sdm-connection-end-point-spec by ID
     *
     * Create operation of resource: sdm-connection-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectionConnectionEndPointSdmConnectionEndPointSpecSdmConnectionEndPointSpecByIdTest() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        SdmConnectionEndPointSpec sdmConnectionEndPointSpec = null;
        api.createContextConnectivityContextConnectionConnectionEndPointSdmConnectionEndPointSpecSdmConnectionEndPointSpecById(uuid, connectionEndPointUuid, sdmConnectionEndPointSpec);

        // TODO: test validations
    }
    
    /**
     * Create connection-end-point by ID
     *
     * Create operation of resource: connection-end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        ConnectionEndPointSchema connectionEndPoint = null;
        api.createContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointById(uuid, localId, connectionEndPointUuid, connectionEndPoint);

        // TODO: test validations
    }
    
    /**
     * Create media-channel-assembly-spec by ID
     *
     * Create operation of resource: media-channel-assembly-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectionRouteConnectionEndPointMediaChannelAssemblySpecMediaChannelAssemblySpecByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        MediaChannelAssemblySpec mediaChannelAssemblySpec = null;
        api.createContextConnectivityContextConnectionRouteConnectionEndPointMediaChannelAssemblySpecMediaChannelAssemblySpecById(uuid, localId, connectionEndPointUuid, mediaChannelAssemblySpec);

        // TODO: test validations
    }
    
    /**
     * Create media-channel-connection-end-point-spec by ID
     *
     * Create operation of resource: media-channel-connection-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectionRouteConnectionEndPointMediaChannelConnectionEndPointSpecMediaChannelConnectionEndPointSpecByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        MediaChannelConnectionEndPointSpec mediaChannelConnectionEndPointSpec = null;
        api.createContextConnectivityContextConnectionRouteConnectionEndPointMediaChannelConnectionEndPointSpecMediaChannelConnectionEndPointSpecById(uuid, localId, connectionEndPointUuid, mediaChannelConnectionEndPointSpec);

        // TODO: test validations
    }
    
    /**
     * Create name by ID
     *
     * Create operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectionRouteConnectionEndPointNameNameByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        String valueName = null;
        NameAndValue name = null;
        api.createContextConnectivityContextConnectionRouteConnectionEndPointNameNameById(uuid, localId, connectionEndPointUuid, valueName, name);

        // TODO: test validations
    }
    
    /**
     * Create ots-connection-end-point-spec by ID
     *
     * Create operation of resource: ots-connection-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectionRouteConnectionEndPointOtsConnectionEndPointSpecOtsConnectionEndPointSpecByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        OtsConnectionEndPointSpec otsConnectionEndPointSpec = null;
        api.createContextConnectivityContextConnectionRouteConnectionEndPointOtsConnectionEndPointSpecOtsConnectionEndPointSpecById(uuid, localId, connectionEndPointUuid, otsConnectionEndPointSpec);

        // TODO: test validations
    }
    
    /**
     * Create otsi-assembly-connection-end-point-spec by ID
     *
     * Create operation of resource: otsi-assembly-connection-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectionRouteConnectionEndPointOtsiAssemblyConnectionEndPointSpecOtsiAssemblyConnectionEndPointSpecByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        OtsiAssemblyConnectionEndPointSpec otsiAssemblyConnectionEndPointSpec = null;
        api.createContextConnectivityContextConnectionRouteConnectionEndPointOtsiAssemblyConnectionEndPointSpecOtsiAssemblyConnectionEndPointSpecById(uuid, localId, connectionEndPointUuid, otsiAssemblyConnectionEndPointSpec);

        // TODO: test validations
    }
    
    /**
     * Create otsi-connection-end-point-spec by ID
     *
     * Create operation of resource: otsi-connection-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectionRouteConnectionEndPointOtsiConnectionEndPointSpecOtsiConnectionEndPointSpecByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        OtsiConnectionEndPointSpec otsiConnectionEndPointSpec = null;
        api.createContextConnectivityContextConnectionRouteConnectionEndPointOtsiConnectionEndPointSpecOtsiConnectionEndPointSpecById(uuid, localId, connectionEndPointUuid, otsiConnectionEndPointSpec);

        // TODO: test validations
    }
    
    /**
     * Create sdm-connection-end-point-spec by ID
     *
     * Create operation of resource: sdm-connection-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectionRouteConnectionEndPointSdmConnectionEndPointSpecSdmConnectionEndPointSpecByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        SdmConnectionEndPointSpec sdmConnectionEndPointSpec = null;
        api.createContextConnectivityContextConnectionRouteConnectionEndPointSdmConnectionEndPointSpecSdmConnectionEndPointSpecById(uuid, localId, connectionEndPointUuid, sdmConnectionEndPointSpec);

        // TODO: test validations
    }
    
    /**
     * Create connectivity-context by ID
     *
     * Create operation of resource: connectivity-context
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectivityContextByIdTest() throws ApiException {
        ConnectivityContext connectivityContext = null;
        api.createContextConnectivityContextConnectivityContextById(connectivityContext);

        // TODO: test validations
    }
    
    /**
     * Create connectivity-service by ID
     *
     * Create operation of resource: connectivity-service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectivityServiceConnectivityServiceByIdTest() throws ApiException {
        String uuid = null;
        ConnectivityServiceSchema connectivityService = null;
        api.createContextConnectivityContextConnectivityServiceConnectivityServiceById(uuid, connectivityService);

        // TODO: test validations
    }
    
    /**
     * Create coroute-inclusion by ID
     *
     * Create operation of resource: coroute-inclusion
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectivityServiceCorouteInclusionCorouteInclusionByIdTest() throws ApiException {
        String uuid = null;
        ConnectivityServiceRef corouteInclusion = null;
        api.createContextConnectivityContextConnectivityServiceCorouteInclusionCorouteInclusionById(uuid, corouteInclusion);

        // TODO: test validations
    }
    
    /**
     * Create cost-characteristic by ID
     *
     * Create operation of resource: cost-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String costName = null;
        CostCharacteristic costCharacteristic = null;
        api.createContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicById(uuid, costName, costCharacteristic);

        // TODO: test validations
    }
    
    /**
     * Create diversity-exclusion by ID
     *
     * Create operation of resource: diversity-exclusion
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionByIdTest() throws ApiException {
        String uuid = null;
        String connectivityServiceUuid = null;
        ConnectivityServiceRef diversityExclusion = null;
        api.createContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionById(uuid, connectivityServiceUuid, diversityExclusion);

        // TODO: test validations
    }
    
    /**
     * Create bandwidth-profile by ID
     *
     * Create operation of resource: bandwidth-profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        BandwidthProfile bandwidthProfile = null;
        api.createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileById(uuid, localId, bandwidthProfile);

        // TODO: test validations
    }
    
    /**
     * Create committed-burst-size by ID
     *
     * Create operation of resource: committed-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        CapacityValue committedBurstSize = null;
        api.createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById(uuid, localId, committedBurstSize);

        // TODO: test validations
    }
    
    /**
     * Create committed-information-rate by ID
     *
     * Create operation of resource: committed-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        CapacityValue committedInformationRate = null;
        api.createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById(uuid, localId, committedInformationRate);

        // TODO: test validations
    }
    
    /**
     * Create peak-burst-size by ID
     *
     * Create operation of resource: peak-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        CapacityValue peakBurstSize = null;
        api.createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById(uuid, localId, peakBurstSize);

        // TODO: test validations
    }
    
    /**
     * Create peak-information-rate by ID
     *
     * Create operation of resource: peak-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        CapacityValue peakInformationRate = null;
        api.createContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateById(uuid, localId, peakInformationRate);

        // TODO: test validations
    }
    
    /**
     * Create capacity by ID
     *
     * Create operation of resource: capacity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectivityServiceEndPointCapacityCapacityByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        Capacity capacity = null;
        api.createContextConnectivityContextConnectivityServiceEndPointCapacityCapacityById(uuid, localId, capacity);

        // TODO: test validations
    }
    
    /**
     * Create total-size by ID
     *
     * Create operation of resource: total-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        CapacityValue totalSize = null;
        api.createContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeById(uuid, localId, totalSize);

        // TODO: test validations
    }
    
    /**
     * Create connection-end-point by ID
     *
     * Create operation of resource: connection-end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        ConnectionEndPointSchema connectionEndPoint = null;
        api.createContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointById(uuid, localId, connectionEndPointUuid, connectionEndPoint);

        // TODO: test validations
    }
    
    /**
     * Create media-channel-assembly-spec by ID
     *
     * Create operation of resource: media-channel-assembly-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectivityServiceEndPointConnectionEndPointMediaChannelAssemblySpecMediaChannelAssemblySpecByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        MediaChannelAssemblySpec mediaChannelAssemblySpec = null;
        api.createContextConnectivityContextConnectivityServiceEndPointConnectionEndPointMediaChannelAssemblySpecMediaChannelAssemblySpecById(uuid, localId, connectionEndPointUuid, mediaChannelAssemblySpec);

        // TODO: test validations
    }
    
    /**
     * Create media-channel-connection-end-point-spec by ID
     *
     * Create operation of resource: media-channel-connection-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectivityServiceEndPointConnectionEndPointMediaChannelConnectionEndPointSpecMediaChannelConnectionEndPointSpecByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        MediaChannelConnectionEndPointSpec mediaChannelConnectionEndPointSpec = null;
        api.createContextConnectivityContextConnectivityServiceEndPointConnectionEndPointMediaChannelConnectionEndPointSpecMediaChannelConnectionEndPointSpecById(uuid, localId, connectionEndPointUuid, mediaChannelConnectionEndPointSpec);

        // TODO: test validations
    }
    
    /**
     * Create name by ID
     *
     * Create operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectivityServiceEndPointConnectionEndPointNameNameByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        String valueName = null;
        NameAndValue name = null;
        api.createContextConnectivityContextConnectivityServiceEndPointConnectionEndPointNameNameById(uuid, localId, connectionEndPointUuid, valueName, name);

        // TODO: test validations
    }
    
    /**
     * Create ots-connection-end-point-spec by ID
     *
     * Create operation of resource: ots-connection-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectivityServiceEndPointConnectionEndPointOtsConnectionEndPointSpecOtsConnectionEndPointSpecByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        OtsConnectionEndPointSpec otsConnectionEndPointSpec = null;
        api.createContextConnectivityContextConnectivityServiceEndPointConnectionEndPointOtsConnectionEndPointSpecOtsConnectionEndPointSpecById(uuid, localId, connectionEndPointUuid, otsConnectionEndPointSpec);

        // TODO: test validations
    }
    
    /**
     * Create otsi-assembly-connection-end-point-spec by ID
     *
     * Create operation of resource: otsi-assembly-connection-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectivityServiceEndPointConnectionEndPointOtsiAssemblyConnectionEndPointSpecOtsiAssemblyConnectionEndPointSpecByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        OtsiAssemblyConnectionEndPointSpec otsiAssemblyConnectionEndPointSpec = null;
        api.createContextConnectivityContextConnectivityServiceEndPointConnectionEndPointOtsiAssemblyConnectionEndPointSpecOtsiAssemblyConnectionEndPointSpecById(uuid, localId, connectionEndPointUuid, otsiAssemblyConnectionEndPointSpec);

        // TODO: test validations
    }
    
    /**
     * Create otsi-connection-end-point-spec by ID
     *
     * Create operation of resource: otsi-connection-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectivityServiceEndPointConnectionEndPointOtsiConnectionEndPointSpecOtsiConnectionEndPointSpecByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        OtsiConnectionEndPointSpec otsiConnectionEndPointSpec = null;
        api.createContextConnectivityContextConnectivityServiceEndPointConnectionEndPointOtsiConnectionEndPointSpecOtsiConnectionEndPointSpecById(uuid, localId, connectionEndPointUuid, otsiConnectionEndPointSpec);

        // TODO: test validations
    }
    
    /**
     * Create sdm-connection-end-point-spec by ID
     *
     * Create operation of resource: sdm-connection-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectivityServiceEndPointConnectionEndPointSdmConnectionEndPointSpecSdmConnectionEndPointSpecByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        SdmConnectionEndPointSpec sdmConnectionEndPointSpec = null;
        api.createContextConnectivityContextConnectivityServiceEndPointConnectionEndPointSdmConnectionEndPointSpecSdmConnectionEndPointSpecById(uuid, localId, connectionEndPointUuid, sdmConnectionEndPointSpec);

        // TODO: test validations
    }
    
    /**
     * Create end-point by ID
     *
     * Create operation of resource: end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectivityServiceEndPointEndPointByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        EndPointSchema endPoint = null;
        api.createContextConnectivityContextConnectivityServiceEndPointEndPointById(uuid, localId, endPoint);

        // TODO: test validations
    }
    
    /**
     * Create media-channel-service-interface-point-spec by ID
     *
     * Create operation of resource: media-channel-service-interface-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectivityServiceEndPointMediaChannelServiceInterfacePointSpecMediaChannelServiceInterfacePointSpecByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        MediaChannelServiceInterfacePointSpec mediaChannelServiceInterfacePointSpec = null;
        api.createContextConnectivityContextConnectivityServiceEndPointMediaChannelServiceInterfacePointSpecMediaChannelServiceInterfacePointSpecById(uuid, localId, mediaChannelServiceInterfacePointSpec);

        // TODO: test validations
    }
    
    /**
     * Create name by ID
     *
     * Create operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectivityServiceEndPointNameNameByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String valueName = null;
        NameAndValue name = null;
        api.createContextConnectivityContextConnectivityServiceEndPointNameNameById(uuid, localId, valueName, name);

        // TODO: test validations
    }
    
    /**
     * Create application-identifier by ID
     *
     * Create operation of resource: application-identifier
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectivityServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigApplicationIdentifierApplicationIdentifierByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        ApplicationIdentifier applicationIdentifier = null;
        api.createContextConnectivityContextConnectivityServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigApplicationIdentifierApplicationIdentifierById(uuid, localId, applicationIdentifier);

        // TODO: test validations
    }
    
    /**
     * Create central-frequency by ID
     *
     * Create operation of resource: central-frequency
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectivityServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigCentralFrequencyCentralFrequencyByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        CentralFrequency centralFrequency = null;
        api.createContextConnectivityContextConnectivityServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigCentralFrequencyCentralFrequencyById(uuid, localId, centralFrequency);

        // TODO: test validations
    }
    
    /**
     * Create frequency-constraint by ID
     *
     * Create operation of resource: frequency-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectivityServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigCentralFrequencyFrequencyConstraintFrequencyConstraintByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        FrequencyConstraint frequencyConstraint = null;
        api.createContextConnectivityContextConnectivityServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigCentralFrequencyFrequencyConstraintFrequencyConstraintById(uuid, localId, frequencyConstraint);

        // TODO: test validations
    }
    
    /**
     * Create otsi-config by ID
     *
     * Create operation of resource: otsi-config
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectivityServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigOtsiConfigByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        OtsiTerminationConfigPac otsiConfig = null;
        api.createContextConnectivityContextConnectivityServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigOtsiConfigById(uuid, localId, otsiConfig);

        // TODO: test validations
    }
    
    /**
     * Create frequency-constraint by ID
     *
     * Create operation of resource: frequency-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectivityServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigSpectrumFrequencyConstraintFrequencyConstraintByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        FrequencyConstraint frequencyConstraint = null;
        api.createContextConnectivityContextConnectivityServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigSpectrumFrequencyConstraintFrequencyConstraintById(uuid, localId, frequencyConstraint);

        // TODO: test validations
    }
    
    /**
     * Create spectrum by ID
     *
     * Create operation of resource: spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectivityServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigSpectrumSpectrumByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        SpectrumBand spectrum = null;
        api.createContextConnectivityContextConnectivityServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigSpectrumSpectrumById(uuid, localId, spectrum);

        // TODO: test validations
    }
    
    /**
     * Create transmit-power by ID
     *
     * Create operation of resource: transmit-power
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectivityServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigTransmitPowerTransmitPowerByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        PowerPropertiesPac transmitPower = null;
        api.createContextConnectivityContextConnectivityServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigTransmitPowerTransmitPowerById(uuid, localId, transmitPower);

        // TODO: test validations
    }
    
    /**
     * Create otsi-connectivity-service-end-point-spec by ID
     *
     * Create operation of resource: otsi-connectivity-service-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectivityServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConnectivityServiceEndPointSpecByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        OtsiConnectivityServiceEndPointSpec otsiConnectivityServiceEndPointSpec = null;
        api.createContextConnectivityContextConnectivityServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConnectivityServiceEndPointSpecById(uuid, localId, otsiConnectivityServiceEndPointSpec);

        // TODO: test validations
    }
    
    /**
     * Create sdm-service-interface-point-spec by ID
     *
     * Create operation of resource: sdm-service-interface-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectivityServiceEndPointSdmServiceInterfacePointSpecSdmServiceInterfacePointSpecByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        SdmServiceInterfacePointSpec sdmServiceInterfacePointSpec = null;
        api.createContextConnectivityContextConnectivityServiceEndPointSdmServiceInterfacePointSpecSdmServiceInterfacePointSpecById(uuid, localId, sdmServiceInterfacePointSpec);

        // TODO: test validations
    }
    
    /**
     * Create media-channel-service-interface-point-spec by ID
     *
     * Create operation of resource: media-channel-service-interface-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointMediaChannelServiceInterfacePointSpecMediaChannelServiceInterfacePointSpecByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        MediaChannelServiceInterfacePointSpec mediaChannelServiceInterfacePointSpec = null;
        api.createContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointMediaChannelServiceInterfacePointSpecMediaChannelServiceInterfacePointSpecById(uuid, localId, serviceInterfacePointUuid, mediaChannelServiceInterfacePointSpec);

        // TODO: test validations
    }
    
    /**
     * Create name by ID
     *
     * Create operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointNameNameByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        String valueName = null;
        NameAndValue name = null;
        api.createContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointNameNameById(uuid, localId, serviceInterfacePointUuid, valueName, name);

        // TODO: test validations
    }
    
    /**
     * Create otsi-service-interface-point-spec by ID
     *
     * Create operation of resource: otsi-service-interface-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointOtsiServiceInterfacePointSpecOtsiServiceInterfacePointSpecByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        OtsiServiceInterfacePointSpec otsiServiceInterfacePointSpec = null;
        api.createContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointOtsiServiceInterfacePointSpecOtsiServiceInterfacePointSpecById(uuid, localId, serviceInterfacePointUuid, otsiServiceInterfacePointSpec);

        // TODO: test validations
    }
    
    /**
     * Create sdm-service-interface-point-spec by ID
     *
     * Create operation of resource: sdm-service-interface-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmServiceInterfacePointSpecByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        SdmServiceInterfacePointSpec sdmServiceInterfacePointSpec = null;
        api.createContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmServiceInterfacePointSpecById(uuid, localId, serviceInterfacePointUuid, sdmServiceInterfacePointSpec);

        // TODO: test validations
    }
    
    /**
     * Create service-interface-point by ID
     *
     * Create operation of resource: service-interface-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        ServiceInterfacePointRef serviceInterfacePoint = null;
        api.createContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById(uuid, localId, serviceInterfacePoint);

        // TODO: test validations
    }
    
    /**
     * Create service-interface-point by ID
     *
     * Create operation of resource: service-interface-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById_0Test() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        ServiceInterfacePointSchema serviceInterfacePoint = null;
        api.createContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById_0(uuid, localId, serviceInterfacePointUuid, serviceInterfacePoint);

        // TODO: test validations
    }
    
    /**
     * Create include-core by ID
     *
     * Create operation of resource: include-core
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectivityServiceIncludeCoreIncludeCoreByIdTest() throws ApiException {
        String uuid = null;
        SdmPropertiesPac includeCore = null;
        api.createContextConnectivityContextConnectivityServiceIncludeCoreIncludeCoreById(uuid, includeCore);

        // TODO: test validations
    }
    
    /**
     * Create frequency-constraint by ID
     *
     * Create operation of resource: frequency-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectivityServiceIncludeCoreOccupiedSpectrumFrequencyConstraintFrequencyConstraintByIdTest() throws ApiException {
        String uuid = null;
        FrequencyConstraint frequencyConstraint = null;
        api.createContextConnectivityContextConnectivityServiceIncludeCoreOccupiedSpectrumFrequencyConstraintFrequencyConstraintById(uuid, frequencyConstraint);

        // TODO: test validations
    }
    
    /**
     * Create occupied-spectrum by ID
     *
     * Create operation of resource: occupied-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectivityServiceIncludeCoreOccupiedSpectrumOccupiedSpectrumByIdTest() throws ApiException {
        String uuid = null;
        SpectrumBand occupiedSpectrum = null;
        api.createContextConnectivityContextConnectivityServiceIncludeCoreOccupiedSpectrumOccupiedSpectrumById(uuid, occupiedSpectrum);

        // TODO: test validations
    }
    
    /**
     * Create latency-characteristic by ID
     *
     * Create operation of resource: latency-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String trafficPropertyName = null;
        LatencyCharacteristic latencyCharacteristic = null;
        api.createContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicById(uuid, trafficPropertyName, latencyCharacteristic);

        // TODO: test validations
    }
    
    /**
     * Create name by ID
     *
     * Create operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectivityServiceNameNameByIdTest() throws ApiException {
        String uuid = null;
        String valueName = null;
        NameAndValue name = null;
        api.createContextConnectivityContextConnectivityServiceNameNameById(uuid, valueName, name);

        // TODO: test validations
    }
    
    /**
     * Create bandwidth-profile by ID
     *
     * Create operation of resource: bandwidth-profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileByIdTest() throws ApiException {
        String uuid = null;
        BandwidthProfile bandwidthProfile = null;
        api.createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileById(uuid, bandwidthProfile);

        // TODO: test validations
    }
    
    /**
     * Create committed-burst-size by ID
     *
     * Create operation of resource: committed-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdTest() throws ApiException {
        String uuid = null;
        CapacityValue committedBurstSize = null;
        api.createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById(uuid, committedBurstSize);

        // TODO: test validations
    }
    
    /**
     * Create committed-information-rate by ID
     *
     * Create operation of resource: committed-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdTest() throws ApiException {
        String uuid = null;
        CapacityValue committedInformationRate = null;
        api.createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById(uuid, committedInformationRate);

        // TODO: test validations
    }
    
    /**
     * Create peak-burst-size by ID
     *
     * Create operation of resource: peak-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdTest() throws ApiException {
        String uuid = null;
        CapacityValue peakBurstSize = null;
        api.createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById(uuid, peakBurstSize);

        // TODO: test validations
    }
    
    /**
     * Create peak-information-rate by ID
     *
     * Create operation of resource: peak-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdTest() throws ApiException {
        String uuid = null;
        CapacityValue peakInformationRate = null;
        api.createContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateById(uuid, peakInformationRate);

        // TODO: test validations
    }
    
    /**
     * Create requested-capacity by ID
     *
     * Create operation of resource: requested-capacity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectivityServiceRequestedCapacityRequestedCapacityByIdTest() throws ApiException {
        String uuid = null;
        Capacity requestedCapacity = null;
        api.createContextConnectivityContextConnectivityServiceRequestedCapacityRequestedCapacityById(uuid, requestedCapacity);

        // TODO: test validations
    }
    
    /**
     * Create total-size by ID
     *
     * Create operation of resource: total-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeByIdTest() throws ApiException {
        String uuid = null;
        CapacityValue totalSize = null;
        api.createContextConnectivityContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeById(uuid, totalSize);

        // TODO: test validations
    }
    
    /**
     * Create resilience-type by ID
     *
     * Create operation of resource: resilience-type
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectivityServiceResilienceTypeResilienceTypeByIdTest() throws ApiException {
        String uuid = null;
        ResilienceType resilienceType = null;
        api.createContextConnectivityContextConnectivityServiceResilienceTypeResilienceTypeById(uuid, resilienceType);

        // TODO: test validations
    }
    
    /**
     * Create risk-diversity-characteristic by ID
     *
     * Create operation of resource: risk-diversity-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String riskCharacteristicName = null;
        RiskCharacteristic riskDiversityCharacteristic = null;
        api.createContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicById(uuid, riskCharacteristicName, riskDiversityCharacteristic);

        // TODO: test validations
    }
    
    /**
     * Create schedule by ID
     *
     * Create operation of resource: schedule
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextConnectivityContextConnectivityServiceScheduleScheduleByIdTest() throws ApiException {
        String uuid = null;
        TimeRange schedule = null;
        api.createContextConnectivityContextConnectivityServiceScheduleScheduleById(uuid, schedule);

        // TODO: test validations
    }
    
    /**
     * Create name by ID
     *
     * Create operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextNameNameByIdTest() throws ApiException {
        String valueName = null;
        NameAndValue name = null;
        api.createContextNameNameById(valueName, name);

        // TODO: test validations
    }
    
    /**
     * Create bandwidth-profile by ID
     *
     * Create operation of resource: bandwidth-profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        BandwidthProfile bandwidthProfile = null;
        api.createContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileBandwidthProfileById(uuid, localId, bandwidthProfile);

        // TODO: test validations
    }
    
    /**
     * Create committed-burst-size by ID
     *
     * Create operation of resource: committed-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        CapacityValue committedBurstSize = null;
        api.createContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById(uuid, localId, committedBurstSize);

        // TODO: test validations
    }
    
    /**
     * Create committed-information-rate by ID
     *
     * Create operation of resource: committed-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        CapacityValue committedInformationRate = null;
        api.createContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById(uuid, localId, committedInformationRate);

        // TODO: test validations
    }
    
    /**
     * Create peak-burst-size by ID
     *
     * Create operation of resource: peak-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        CapacityValue peakBurstSize = null;
        api.createContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById(uuid, localId, peakBurstSize);

        // TODO: test validations
    }
    
    /**
     * Create peak-information-rate by ID
     *
     * Create operation of resource: peak-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        CapacityValue peakInformationRate = null;
        api.createContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateById(uuid, localId, peakInformationRate);

        // TODO: test validations
    }
    
    /**
     * Create capacity by ID
     *
     * Create operation of resource: capacity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextPathComputationContextPathCompServiceEndPointCapacityCapacityByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        Capacity capacity = null;
        api.createContextPathComputationContextPathCompServiceEndPointCapacityCapacityById(uuid, localId, capacity);

        // TODO: test validations
    }
    
    /**
     * Create total-size by ID
     *
     * Create operation of resource: total-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextPathComputationContextPathCompServiceEndPointCapacityTotalSizeTotalSizeByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        CapacityValue totalSize = null;
        api.createContextPathComputationContextPathCompServiceEndPointCapacityTotalSizeTotalSizeById(uuid, localId, totalSize);

        // TODO: test validations
    }
    
    /**
     * Create connection-end-point by ID
     *
     * Create operation of resource: connection-end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextPathComputationContextPathCompServiceEndPointConnectionEndPointConnectionEndPointByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        ConnectionEndPointSchema connectionEndPoint = null;
        api.createContextPathComputationContextPathCompServiceEndPointConnectionEndPointConnectionEndPointById(uuid, localId, connectionEndPointUuid, connectionEndPoint);

        // TODO: test validations
    }
    
    /**
     * Create media-channel-assembly-spec by ID
     *
     * Create operation of resource: media-channel-assembly-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextPathComputationContextPathCompServiceEndPointConnectionEndPointMediaChannelAssemblySpecMediaChannelAssemblySpecByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        MediaChannelAssemblySpec mediaChannelAssemblySpec = null;
        api.createContextPathComputationContextPathCompServiceEndPointConnectionEndPointMediaChannelAssemblySpecMediaChannelAssemblySpecById(uuid, localId, connectionEndPointUuid, mediaChannelAssemblySpec);

        // TODO: test validations
    }
    
    /**
     * Create media-channel-connection-end-point-spec by ID
     *
     * Create operation of resource: media-channel-connection-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextPathComputationContextPathCompServiceEndPointConnectionEndPointMediaChannelConnectionEndPointSpecMediaChannelConnectionEndPointSpecByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        MediaChannelConnectionEndPointSpec mediaChannelConnectionEndPointSpec = null;
        api.createContextPathComputationContextPathCompServiceEndPointConnectionEndPointMediaChannelConnectionEndPointSpecMediaChannelConnectionEndPointSpecById(uuid, localId, connectionEndPointUuid, mediaChannelConnectionEndPointSpec);

        // TODO: test validations
    }
    
    /**
     * Create name by ID
     *
     * Create operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextPathComputationContextPathCompServiceEndPointConnectionEndPointNameNameByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        String valueName = null;
        NameAndValue name = null;
        api.createContextPathComputationContextPathCompServiceEndPointConnectionEndPointNameNameById(uuid, localId, connectionEndPointUuid, valueName, name);

        // TODO: test validations
    }
    
    /**
     * Create ots-connection-end-point-spec by ID
     *
     * Create operation of resource: ots-connection-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextPathComputationContextPathCompServiceEndPointConnectionEndPointOtsConnectionEndPointSpecOtsConnectionEndPointSpecByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        OtsConnectionEndPointSpec otsConnectionEndPointSpec = null;
        api.createContextPathComputationContextPathCompServiceEndPointConnectionEndPointOtsConnectionEndPointSpecOtsConnectionEndPointSpecById(uuid, localId, connectionEndPointUuid, otsConnectionEndPointSpec);

        // TODO: test validations
    }
    
    /**
     * Create otsi-assembly-connection-end-point-spec by ID
     *
     * Create operation of resource: otsi-assembly-connection-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextPathComputationContextPathCompServiceEndPointConnectionEndPointOtsiAssemblyConnectionEndPointSpecOtsiAssemblyConnectionEndPointSpecByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        OtsiAssemblyConnectionEndPointSpec otsiAssemblyConnectionEndPointSpec = null;
        api.createContextPathComputationContextPathCompServiceEndPointConnectionEndPointOtsiAssemblyConnectionEndPointSpecOtsiAssemblyConnectionEndPointSpecById(uuid, localId, connectionEndPointUuid, otsiAssemblyConnectionEndPointSpec);

        // TODO: test validations
    }
    
    /**
     * Create otsi-connection-end-point-spec by ID
     *
     * Create operation of resource: otsi-connection-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextPathComputationContextPathCompServiceEndPointConnectionEndPointOtsiConnectionEndPointSpecOtsiConnectionEndPointSpecByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        OtsiConnectionEndPointSpec otsiConnectionEndPointSpec = null;
        api.createContextPathComputationContextPathCompServiceEndPointConnectionEndPointOtsiConnectionEndPointSpecOtsiConnectionEndPointSpecById(uuid, localId, connectionEndPointUuid, otsiConnectionEndPointSpec);

        // TODO: test validations
    }
    
    /**
     * Create sdm-connection-end-point-spec by ID
     *
     * Create operation of resource: sdm-connection-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextPathComputationContextPathCompServiceEndPointConnectionEndPointSdmConnectionEndPointSpecSdmConnectionEndPointSpecByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        SdmConnectionEndPointSpec sdmConnectionEndPointSpec = null;
        api.createContextPathComputationContextPathCompServiceEndPointConnectionEndPointSdmConnectionEndPointSpecSdmConnectionEndPointSpecById(uuid, localId, connectionEndPointUuid, sdmConnectionEndPointSpec);

        // TODO: test validations
    }
    
    /**
     * Create end-point by ID
     *
     * Create operation of resource: end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextPathComputationContextPathCompServiceEndPointEndPointByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        PathServiceEndPoint endPoint = null;
        api.createContextPathComputationContextPathCompServiceEndPointEndPointById(uuid, localId, endPoint);

        // TODO: test validations
    }
    
    /**
     * Create media-channel-service-interface-point-spec by ID
     *
     * Create operation of resource: media-channel-service-interface-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextPathComputationContextPathCompServiceEndPointMediaChannelServiceInterfacePointSpecMediaChannelServiceInterfacePointSpecByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        MediaChannelServiceInterfacePointSpec mediaChannelServiceInterfacePointSpec = null;
        api.createContextPathComputationContextPathCompServiceEndPointMediaChannelServiceInterfacePointSpecMediaChannelServiceInterfacePointSpecById(uuid, localId, mediaChannelServiceInterfacePointSpec);

        // TODO: test validations
    }
    
    /**
     * Create name by ID
     *
     * Create operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextPathComputationContextPathCompServiceEndPointNameNameByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String valueName = null;
        NameAndValue name = null;
        api.createContextPathComputationContextPathCompServiceEndPointNameNameById(uuid, localId, valueName, name);

        // TODO: test validations
    }
    
    /**
     * Create application-identifier by ID
     *
     * Create operation of resource: application-identifier
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextPathComputationContextPathCompServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigApplicationIdentifierApplicationIdentifierByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        ApplicationIdentifier applicationIdentifier = null;
        api.createContextPathComputationContextPathCompServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigApplicationIdentifierApplicationIdentifierById(uuid, localId, applicationIdentifier);

        // TODO: test validations
    }
    
    /**
     * Create central-frequency by ID
     *
     * Create operation of resource: central-frequency
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextPathComputationContextPathCompServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigCentralFrequencyCentralFrequencyByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        CentralFrequency centralFrequency = null;
        api.createContextPathComputationContextPathCompServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigCentralFrequencyCentralFrequencyById(uuid, localId, centralFrequency);

        // TODO: test validations
    }
    
    /**
     * Create frequency-constraint by ID
     *
     * Create operation of resource: frequency-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextPathComputationContextPathCompServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigCentralFrequencyFrequencyConstraintFrequencyConstraintByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        FrequencyConstraint frequencyConstraint = null;
        api.createContextPathComputationContextPathCompServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigCentralFrequencyFrequencyConstraintFrequencyConstraintById(uuid, localId, frequencyConstraint);

        // TODO: test validations
    }
    
    /**
     * Create otsi-config by ID
     *
     * Create operation of resource: otsi-config
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextPathComputationContextPathCompServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigOtsiConfigByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        OtsiTerminationConfigPac otsiConfig = null;
        api.createContextPathComputationContextPathCompServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigOtsiConfigById(uuid, localId, otsiConfig);

        // TODO: test validations
    }
    
    /**
     * Create frequency-constraint by ID
     *
     * Create operation of resource: frequency-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextPathComputationContextPathCompServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigSpectrumFrequencyConstraintFrequencyConstraintByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        FrequencyConstraint frequencyConstraint = null;
        api.createContextPathComputationContextPathCompServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigSpectrumFrequencyConstraintFrequencyConstraintById(uuid, localId, frequencyConstraint);

        // TODO: test validations
    }
    
    /**
     * Create spectrum by ID
     *
     * Create operation of resource: spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextPathComputationContextPathCompServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigSpectrumSpectrumByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        SpectrumBand spectrum = null;
        api.createContextPathComputationContextPathCompServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigSpectrumSpectrumById(uuid, localId, spectrum);

        // TODO: test validations
    }
    
    /**
     * Create transmit-power by ID
     *
     * Create operation of resource: transmit-power
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextPathComputationContextPathCompServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigTransmitPowerTransmitPowerByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        PowerPropertiesPac transmitPower = null;
        api.createContextPathComputationContextPathCompServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigTransmitPowerTransmitPowerById(uuid, localId, transmitPower);

        // TODO: test validations
    }
    
    /**
     * Create otsi-connectivity-service-end-point-spec by ID
     *
     * Create operation of resource: otsi-connectivity-service-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextPathComputationContextPathCompServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConnectivityServiceEndPointSpecByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        OtsiConnectivityServiceEndPointSpec otsiConnectivityServiceEndPointSpec = null;
        api.createContextPathComputationContextPathCompServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConnectivityServiceEndPointSpecById(uuid, localId, otsiConnectivityServiceEndPointSpec);

        // TODO: test validations
    }
    
    /**
     * Create sdm-service-interface-point-spec by ID
     *
     * Create operation of resource: sdm-service-interface-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextPathComputationContextPathCompServiceEndPointSdmServiceInterfacePointSpecSdmServiceInterfacePointSpecByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        SdmServiceInterfacePointSpec sdmServiceInterfacePointSpec = null;
        api.createContextPathComputationContextPathCompServiceEndPointSdmServiceInterfacePointSpecSdmServiceInterfacePointSpecById(uuid, localId, sdmServiceInterfacePointSpec);

        // TODO: test validations
    }
    
    /**
     * Create media-channel-service-interface-point-spec by ID
     *
     * Create operation of resource: media-channel-service-interface-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextPathComputationContextPathCompServiceEndPointServiceInterfacePointMediaChannelServiceInterfacePointSpecMediaChannelServiceInterfacePointSpecByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        MediaChannelServiceInterfacePointSpec mediaChannelServiceInterfacePointSpec = null;
        api.createContextPathComputationContextPathCompServiceEndPointServiceInterfacePointMediaChannelServiceInterfacePointSpecMediaChannelServiceInterfacePointSpecById(uuid, localId, serviceInterfacePointUuid, mediaChannelServiceInterfacePointSpec);

        // TODO: test validations
    }
    
    /**
     * Create name by ID
     *
     * Create operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextPathComputationContextPathCompServiceEndPointServiceInterfacePointNameNameByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        String valueName = null;
        NameAndValue name = null;
        api.createContextPathComputationContextPathCompServiceEndPointServiceInterfacePointNameNameById(uuid, localId, serviceInterfacePointUuid, valueName, name);

        // TODO: test validations
    }
    
    /**
     * Create otsi-service-interface-point-spec by ID
     *
     * Create operation of resource: otsi-service-interface-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextPathComputationContextPathCompServiceEndPointServiceInterfacePointOtsiServiceInterfacePointSpecOtsiServiceInterfacePointSpecByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        OtsiServiceInterfacePointSpec otsiServiceInterfacePointSpec = null;
        api.createContextPathComputationContextPathCompServiceEndPointServiceInterfacePointOtsiServiceInterfacePointSpecOtsiServiceInterfacePointSpecById(uuid, localId, serviceInterfacePointUuid, otsiServiceInterfacePointSpec);

        // TODO: test validations
    }
    
    /**
     * Create sdm-service-interface-point-spec by ID
     *
     * Create operation of resource: sdm-service-interface-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextPathComputationContextPathCompServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmServiceInterfacePointSpecByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        SdmServiceInterfacePointSpec sdmServiceInterfacePointSpec = null;
        api.createContextPathComputationContextPathCompServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmServiceInterfacePointSpecById(uuid, localId, serviceInterfacePointUuid, sdmServiceInterfacePointSpec);

        // TODO: test validations
    }
    
    /**
     * Create service-interface-point by ID
     *
     * Create operation of resource: service-interface-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextPathComputationContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePointByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        ServiceInterfacePointRef serviceInterfacePoint = null;
        api.createContextPathComputationContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePointById(uuid, localId, serviceInterfacePoint);

        // TODO: test validations
    }
    
    /**
     * Create service-interface-point by ID
     *
     * Create operation of resource: service-interface-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextPathComputationContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePointById_0Test() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        ServiceInterfacePointSchema serviceInterfacePoint = null;
        api.createContextPathComputationContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePointById_0(uuid, localId, serviceInterfacePointUuid, serviceInterfacePoint);

        // TODO: test validations
    }
    
    /**
     * Create name by ID
     *
     * Create operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextPathComputationContextPathCompServiceNameNameByIdTest() throws ApiException {
        String uuid = null;
        String valueName = null;
        NameAndValue name = null;
        api.createContextPathComputationContextPathCompServiceNameNameById(uuid, valueName, name);

        // TODO: test validations
    }
    
    /**
     * Create name by ID
     *
     * Create operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextPathComputationContextPathCompServiceObjectiveFunctionNameNameByIdTest() throws ApiException {
        String uuid = null;
        String valueName = null;
        NameAndValue name = null;
        api.createContextPathComputationContextPathCompServiceObjectiveFunctionNameNameById(uuid, valueName, name);

        // TODO: test validations
    }
    
    /**
     * Create objective-function by ID
     *
     * Create operation of resource: objective-function
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextPathComputationContextPathCompServiceObjectiveFunctionObjectiveFunctionByIdTest() throws ApiException {
        String uuid = null;
        PathObjectiveFunction objectiveFunction = null;
        api.createContextPathComputationContextPathCompServiceObjectiveFunctionObjectiveFunctionById(uuid, objectiveFunction);

        // TODO: test validations
    }
    
    /**
     * Create name by ID
     *
     * Create operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextPathComputationContextPathCompServiceOptimizationConstraintNameNameByIdTest() throws ApiException {
        String uuid = null;
        String valueName = null;
        NameAndValue name = null;
        api.createContextPathComputationContextPathCompServiceOptimizationConstraintNameNameById(uuid, valueName, name);

        // TODO: test validations
    }
    
    /**
     * Create optimization-constraint by ID
     *
     * Create operation of resource: optimization-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextPathComputationContextPathCompServiceOptimizationConstraintOptimizationConstraintByIdTest() throws ApiException {
        String uuid = null;
        PathOptimizationConstraint optimizationConstraint = null;
        api.createContextPathComputationContextPathCompServiceOptimizationConstraintOptimizationConstraintById(uuid, optimizationConstraint);

        // TODO: test validations
    }
    
    /**
     * Create path-comp-service by ID
     *
     * Create operation of resource: path-comp-service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextPathComputationContextPathCompServicePathCompServiceByIdTest() throws ApiException {
        String uuid = null;
        PathComputationService pathCompService = null;
        api.createContextPathComputationContextPathCompServicePathCompServiceById(uuid, pathCompService);

        // TODO: test validations
    }
    
    /**
     * Create cost-characteristic by ID
     *
     * Create operation of resource: cost-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextPathComputationContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String costName = null;
        CostCharacteristic costCharacteristic = null;
        api.createContextPathComputationContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristicById(uuid, costName, costCharacteristic);

        // TODO: test validations
    }
    
    /**
     * Create latency-characteristic by ID
     *
     * Create operation of resource: latency-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextPathComputationContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String trafficPropertyName = null;
        LatencyCharacteristic latencyCharacteristic = null;
        api.createContextPathComputationContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristicById(uuid, trafficPropertyName, latencyCharacteristic);

        // TODO: test validations
    }
    
    /**
     * Create risk-diversity-characteristic by ID
     *
     * Create operation of resource: risk-diversity-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextPathComputationContextPathCompServiceRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String riskCharacteristicName = null;
        RiskCharacteristic riskDiversityCharacteristic = null;
        api.createContextPathComputationContextPathCompServiceRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristicById(uuid, riskCharacteristicName, riskDiversityCharacteristic);

        // TODO: test validations
    }
    
    /**
     * Create routing-constraint by ID
     *
     * Create operation of resource: routing-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextPathComputationContextPathCompServiceRoutingConstraintRoutingConstraintByIdTest() throws ApiException {
        String uuid = null;
        RoutingConstraint routingConstraint = null;
        api.createContextPathComputationContextPathCompServiceRoutingConstraintRoutingConstraintById(uuid, routingConstraint);

        // TODO: test validations
    }
    
    /**
     * Create topology-constraint by ID
     *
     * Create operation of resource: topology-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextPathComputationContextPathCompServiceTopologyConstraintTopologyConstraintByIdTest() throws ApiException {
        String uuid = null;
        TopologyConstraint topologyConstraint = null;
        api.createContextPathComputationContextPathCompServiceTopologyConstraintTopologyConstraintById(uuid, topologyConstraint);

        // TODO: test validations
    }
    
    /**
     * Create path-computation-context by ID
     *
     * Create operation of resource: path-computation-context
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextPathComputationContextPathComputationContextByIdTest() throws ApiException {
        PathComputationContext pathComputationContext = null;
        api.createContextPathComputationContextPathComputationContextById(pathComputationContext);

        // TODO: test validations
    }
    
    /**
     * Create media-channel-service-interface-point-spec by ID
     *
     * Create operation of resource: media-channel-service-interface-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextServiceInterfacePointMediaChannelServiceInterfacePointSpecMediaChannelServiceInterfacePointSpecByIdTest() throws ApiException {
        String uuid = null;
        MediaChannelServiceInterfacePointSpec mediaChannelServiceInterfacePointSpec = null;
        api.createContextServiceInterfacePointMediaChannelServiceInterfacePointSpecMediaChannelServiceInterfacePointSpecById(uuid, mediaChannelServiceInterfacePointSpec);

        // TODO: test validations
    }
    
    /**
     * Create name by ID
     *
     * Create operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextServiceInterfacePointNameNameByIdTest() throws ApiException {
        String uuid = null;
        String valueName = null;
        NameAndValue name = null;
        api.createContextServiceInterfacePointNameNameById(uuid, valueName, name);

        // TODO: test validations
    }
    
    /**
     * Create otsi-service-interface-point-spec by ID
     *
     * Create operation of resource: otsi-service-interface-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextServiceInterfacePointOtsiServiceInterfacePointSpecOtsiServiceInterfacePointSpecByIdTest() throws ApiException {
        String uuid = null;
        OtsiServiceInterfacePointSpec otsiServiceInterfacePointSpec = null;
        api.createContextServiceInterfacePointOtsiServiceInterfacePointSpecOtsiServiceInterfacePointSpecById(uuid, otsiServiceInterfacePointSpec);

        // TODO: test validations
    }
    
    /**
     * Create sdm-service-interface-point-spec by ID
     *
     * Create operation of resource: sdm-service-interface-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextServiceInterfacePointSdmServiceInterfacePointSpecSdmServiceInterfacePointSpecByIdTest() throws ApiException {
        String uuid = null;
        SdmServiceInterfacePointSpec sdmServiceInterfacePointSpec = null;
        api.createContextServiceInterfacePointSdmServiceInterfacePointSpecSdmServiceInterfacePointSpecById(uuid, sdmServiceInterfacePointSpec);

        // TODO: test validations
    }
    
    /**
     * Create service-interface-point by ID
     *
     * Create operation of resource: service-interface-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextServiceInterfacePointServiceInterfacePointByIdTest() throws ApiException {
        String uuid = null;
        ServiceInterfacePointSchema serviceInterfacePoint = null;
        api.createContextServiceInterfacePointServiceInterfacePointById(uuid, serviceInterfacePoint);

        // TODO: test validations
    }
    
    /**
     * Create topology-context by ID
     *
     * Create operation of resource: topology-context
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContextTopologyContextTopologyContextByIdTest() throws ApiException {
        TopologyContext topologyContext = null;
        api.createContextTopologyContextTopologyContextById(topologyContext);

        // TODO: test validations
    }
    
    /**
     * Create create-connectivity-service by ID
     *
     * Create operation of resource: create-connectivity-service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCreateConnectivityServiceByIdTest() throws ApiException {
        CreateConnectivityServiceRPCInputSchema createConnectivityService = null;
        CreateConnectivityServiceRPCOutputSchema response = api.createCreateConnectivityServiceById(createConnectivityService);

        // TODO: test validations
    }
    
    /**
     * Create delete-connectivity-service by ID
     *
     * Create operation of resource: delete-connectivity-service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createDeleteConnectivityServiceByIdTest() throws ApiException {
        DeleteConnectivityServiceRPCInputSchema deleteConnectivityService = null;
        api.createDeleteConnectivityServiceById(deleteConnectivityService);

        // TODO: test validations
    }
    
    /**
     * Create get-connection-details by ID
     *
     * Create operation of resource: get-connection-details
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createGetConnectionDetailsByIdTest() throws ApiException {
        GetConnectionDetailsRPCInputSchema getConnectionDetails = null;
        GetConnectionDetailsRPCOutputSchema response = api.createGetConnectionDetailsById(getConnectionDetails);

        // TODO: test validations
    }
    
    /**
     * Create get-connection-end-point-details by ID
     *
     * Create operation of resource: get-connection-end-point-details
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createGetConnectionEndPointDetailsByIdTest() throws ApiException {
        GetConnectionEndPointDetailsRPCInputSchema getConnectionEndPointDetails = null;
        GetConnectionEndPointDetailsRPCOutputSchema response = api.createGetConnectionEndPointDetailsById(getConnectionEndPointDetails);

        // TODO: test validations
    }
    
    /**
     * Create get-connectivity-service-details by ID
     *
     * Create operation of resource: get-connectivity-service-details
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createGetConnectivityServiceDetailsByIdTest() throws ApiException {
        GetConnectivityServiceDetailsRPCInputSchema getConnectivityServiceDetails = null;
        GetConnectivityServiceDetailsRPCOutputSchema response = api.createGetConnectivityServiceDetailsById(getConnectivityServiceDetails);

        // TODO: test validations
    }
    
    /**
     * Create get-connectivity-service-list by ID
     *
     * Create operation of resource: get-connectivity-service-list
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createGetConnectivityServiceListByIdTest() throws ApiException {
        GetConnectivityServiceListRPCOutputSchema response = api.createGetConnectivityServiceListById();

        // TODO: test validations
    }
    
    /**
     * Create get-link-details by ID
     *
     * Create operation of resource: get-link-details
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createGetLinkDetailsByIdTest() throws ApiException {
        GetLinkDetailsRPCInputSchema getLinkDetails = null;
        GetLinkDetailsRPCOutputSchema response = api.createGetLinkDetailsById(getLinkDetails);

        // TODO: test validations
    }
    
    /**
     * Create get-node-details by ID
     *
     * Create operation of resource: get-node-details
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createGetNodeDetailsByIdTest() throws ApiException {
        GetNodeDetailsRPCInputSchema getNodeDetails = null;
        GetNodeDetailsRPCOutputSchema response = api.createGetNodeDetailsById(getNodeDetails);

        // TODO: test validations
    }
    
    /**
     * Create get-node-edge-point-details by ID
     *
     * Create operation of resource: get-node-edge-point-details
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createGetNodeEdgePointDetailsByIdTest() throws ApiException {
        GetNodeEdgePointDetailsRPCInputSchema getNodeEdgePointDetails = null;
        GetNodeEdgePointDetailsRPCOutputSchema response = api.createGetNodeEdgePointDetailsById(getNodeEdgePointDetails);

        // TODO: test validations
    }
    
    /**
     * Create get-service-interface-point-details by ID
     *
     * Create operation of resource: get-service-interface-point-details
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createGetServiceInterfacePointDetailsByIdTest() throws ApiException {
        GetServiceInterfacePointDetailsRPCInputSchema getServiceInterfacePointDetails = null;
        GetServiceInterfacePointDetailsRPCOutputSchema response = api.createGetServiceInterfacePointDetailsById(getServiceInterfacePointDetails);

        // TODO: test validations
    }
    
    /**
     * Create get-service-interface-point-list by ID
     *
     * Create operation of resource: get-service-interface-point-list
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createGetServiceInterfacePointListByIdTest() throws ApiException {
        GetServiceInterfacePointListRPCOutputSchema response = api.createGetServiceInterfacePointListById();

        // TODO: test validations
    }
    
    /**
     * Create get-topology-details by ID
     *
     * Create operation of resource: get-topology-details
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createGetTopologyDetailsByIdTest() throws ApiException {
        GetTopologyDetailsRPCInputSchema getTopologyDetails = null;
        GetTopologyDetailsRPCOutputSchema response = api.createGetTopologyDetailsById(getTopologyDetails);

        // TODO: test validations
    }
    
    /**
     * Create get-topology-list by ID
     *
     * Create operation of resource: get-topology-list
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createGetTopologyListByIdTest() throws ApiException {
        GetTopologyListRPCOutputSchema response = api.createGetTopologyListById();

        // TODO: test validations
    }
    
    /**
     * Create update-connectivity-service by ID
     *
     * Create operation of resource: update-connectivity-service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createUpdateConnectivityServiceByIdTest() throws ApiException {
        UpdateConnectivityServiceRPCInputSchema updateConnectivityService = null;
        UpdateConnectivityServiceRPCOutputSchema response = api.createUpdateConnectivityServiceById(updateConnectivityService);

        // TODO: test validations
    }
    
    /**
     * Create update-service-interface-point by ID
     *
     * Create operation of resource: update-service-interface-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createUpdateServiceInterfacePointByIdTest() throws ApiException {
        UpdateServiceInterfacePointRPCInputSchema updateServiceInterfacePoint = null;
        api.createUpdateServiceInterfacePointById(updateServiceInterfacePoint);

        // TODO: test validations
    }
    
    /**
     * Delete context by ID
     *
     * Delete operation of resource: context
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextByIdTest() throws ApiException {
        api.deleteContextById();

        // TODO: test validations
    }
    
    /**
     * Delete connection-end-point by ID
     *
     * Delete operation of resource: connection-end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectionConnectionEndPointConnectionEndPointByIdTest() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        api.deleteContextConnectivityContextConnectionConnectionEndPointConnectionEndPointById(uuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Delete media-channel-assembly-spec by ID
     *
     * Delete operation of resource: media-channel-assembly-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectionConnectionEndPointMediaChannelAssemblySpecMediaChannelAssemblySpecByIdTest() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        api.deleteContextConnectivityContextConnectionConnectionEndPointMediaChannelAssemblySpecMediaChannelAssemblySpecById(uuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Delete media-channel-connection-end-point-spec by ID
     *
     * Delete operation of resource: media-channel-connection-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectionConnectionEndPointMediaChannelConnectionEndPointSpecMediaChannelConnectionEndPointSpecByIdTest() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        api.deleteContextConnectivityContextConnectionConnectionEndPointMediaChannelConnectionEndPointSpecMediaChannelConnectionEndPointSpecById(uuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Delete name by ID
     *
     * Delete operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectionConnectionEndPointNameNameByIdTest() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        String valueName = null;
        api.deleteContextConnectivityContextConnectionConnectionEndPointNameNameById(uuid, connectionEndPointUuid, valueName);

        // TODO: test validations
    }
    
    /**
     * Delete ots-connection-end-point-spec by ID
     *
     * Delete operation of resource: ots-connection-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectionConnectionEndPointOtsConnectionEndPointSpecOtsConnectionEndPointSpecByIdTest() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        api.deleteContextConnectivityContextConnectionConnectionEndPointOtsConnectionEndPointSpecOtsConnectionEndPointSpecById(uuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Delete otsi-assembly-connection-end-point-spec by ID
     *
     * Delete operation of resource: otsi-assembly-connection-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectionConnectionEndPointOtsiAssemblyConnectionEndPointSpecOtsiAssemblyConnectionEndPointSpecByIdTest() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        api.deleteContextConnectivityContextConnectionConnectionEndPointOtsiAssemblyConnectionEndPointSpecOtsiAssemblyConnectionEndPointSpecById(uuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Delete otsi-connection-end-point-spec by ID
     *
     * Delete operation of resource: otsi-connection-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectionConnectionEndPointOtsiConnectionEndPointSpecOtsiConnectionEndPointSpecByIdTest() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        api.deleteContextConnectivityContextConnectionConnectionEndPointOtsiConnectionEndPointSpecOtsiConnectionEndPointSpecById(uuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Delete sdm-connection-end-point-spec by ID
     *
     * Delete operation of resource: sdm-connection-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectionConnectionEndPointSdmConnectionEndPointSpecSdmConnectionEndPointSpecByIdTest() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        api.deleteContextConnectivityContextConnectionConnectionEndPointSdmConnectionEndPointSpecSdmConnectionEndPointSpecById(uuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Delete connection-end-point by ID
     *
     * Delete operation of resource: connection-end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        api.deleteContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointById(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Delete media-channel-assembly-spec by ID
     *
     * Delete operation of resource: media-channel-assembly-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectionRouteConnectionEndPointMediaChannelAssemblySpecMediaChannelAssemblySpecByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        api.deleteContextConnectivityContextConnectionRouteConnectionEndPointMediaChannelAssemblySpecMediaChannelAssemblySpecById(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Delete media-channel-connection-end-point-spec by ID
     *
     * Delete operation of resource: media-channel-connection-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectionRouteConnectionEndPointMediaChannelConnectionEndPointSpecMediaChannelConnectionEndPointSpecByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        api.deleteContextConnectivityContextConnectionRouteConnectionEndPointMediaChannelConnectionEndPointSpecMediaChannelConnectionEndPointSpecById(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Delete name by ID
     *
     * Delete operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectionRouteConnectionEndPointNameNameByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        String valueName = null;
        api.deleteContextConnectivityContextConnectionRouteConnectionEndPointNameNameById(uuid, localId, connectionEndPointUuid, valueName);

        // TODO: test validations
    }
    
    /**
     * Delete ots-connection-end-point-spec by ID
     *
     * Delete operation of resource: ots-connection-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectionRouteConnectionEndPointOtsConnectionEndPointSpecOtsConnectionEndPointSpecByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        api.deleteContextConnectivityContextConnectionRouteConnectionEndPointOtsConnectionEndPointSpecOtsConnectionEndPointSpecById(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Delete otsi-assembly-connection-end-point-spec by ID
     *
     * Delete operation of resource: otsi-assembly-connection-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectionRouteConnectionEndPointOtsiAssemblyConnectionEndPointSpecOtsiAssemblyConnectionEndPointSpecByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        api.deleteContextConnectivityContextConnectionRouteConnectionEndPointOtsiAssemblyConnectionEndPointSpecOtsiAssemblyConnectionEndPointSpecById(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Delete otsi-connection-end-point-spec by ID
     *
     * Delete operation of resource: otsi-connection-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectionRouteConnectionEndPointOtsiConnectionEndPointSpecOtsiConnectionEndPointSpecByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        api.deleteContextConnectivityContextConnectionRouteConnectionEndPointOtsiConnectionEndPointSpecOtsiConnectionEndPointSpecById(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Delete sdm-connection-end-point-spec by ID
     *
     * Delete operation of resource: sdm-connection-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectionRouteConnectionEndPointSdmConnectionEndPointSpecSdmConnectionEndPointSpecByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        api.deleteContextConnectivityContextConnectionRouteConnectionEndPointSdmConnectionEndPointSpecSdmConnectionEndPointSpecById(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Delete connectivity-context by ID
     *
     * Delete operation of resource: connectivity-context
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectivityContextByIdTest() throws ApiException {
        api.deleteContextConnectivityContextConnectivityContextById();

        // TODO: test validations
    }
    
    /**
     * Delete connectivity-service by ID
     *
     * Delete operation of resource: connectivity-service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectivityServiceConnectivityServiceByIdTest() throws ApiException {
        String uuid = null;
        api.deleteContextConnectivityContextConnectivityServiceConnectivityServiceById(uuid);

        // TODO: test validations
    }
    
    /**
     * Delete coroute-inclusion by ID
     *
     * Delete operation of resource: coroute-inclusion
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectivityServiceCorouteInclusionCorouteInclusionByIdTest() throws ApiException {
        String uuid = null;
        api.deleteContextConnectivityContextConnectivityServiceCorouteInclusionCorouteInclusionById(uuid);

        // TODO: test validations
    }
    
    /**
     * Delete cost-characteristic by ID
     *
     * Delete operation of resource: cost-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String costName = null;
        api.deleteContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicById(uuid, costName);

        // TODO: test validations
    }
    
    /**
     * Delete diversity-exclusion by ID
     *
     * Delete operation of resource: diversity-exclusion
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionByIdTest() throws ApiException {
        String uuid = null;
        String connectivityServiceUuid = null;
        api.deleteContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionById(uuid, connectivityServiceUuid);

        // TODO: test validations
    }
    
    /**
     * Delete bandwidth-profile by ID
     *
     * Delete operation of resource: bandwidth-profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        api.deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileById(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Delete committed-burst-size by ID
     *
     * Delete operation of resource: committed-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        api.deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Delete committed-information-rate by ID
     *
     * Delete operation of resource: committed-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        api.deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Delete peak-burst-size by ID
     *
     * Delete operation of resource: peak-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        api.deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Delete peak-information-rate by ID
     *
     * Delete operation of resource: peak-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        api.deleteContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateById(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Delete capacity by ID
     *
     * Delete operation of resource: capacity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectivityServiceEndPointCapacityCapacityByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        api.deleteContextConnectivityContextConnectivityServiceEndPointCapacityCapacityById(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Delete total-size by ID
     *
     * Delete operation of resource: total-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        api.deleteContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeById(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Delete connection-end-point by ID
     *
     * Delete operation of resource: connection-end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        api.deleteContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointById(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Delete media-channel-assembly-spec by ID
     *
     * Delete operation of resource: media-channel-assembly-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectivityServiceEndPointConnectionEndPointMediaChannelAssemblySpecMediaChannelAssemblySpecByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        api.deleteContextConnectivityContextConnectivityServiceEndPointConnectionEndPointMediaChannelAssemblySpecMediaChannelAssemblySpecById(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Delete media-channel-connection-end-point-spec by ID
     *
     * Delete operation of resource: media-channel-connection-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectivityServiceEndPointConnectionEndPointMediaChannelConnectionEndPointSpecMediaChannelConnectionEndPointSpecByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        api.deleteContextConnectivityContextConnectivityServiceEndPointConnectionEndPointMediaChannelConnectionEndPointSpecMediaChannelConnectionEndPointSpecById(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Delete name by ID
     *
     * Delete operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectivityServiceEndPointConnectionEndPointNameNameByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        String valueName = null;
        api.deleteContextConnectivityContextConnectivityServiceEndPointConnectionEndPointNameNameById(uuid, localId, connectionEndPointUuid, valueName);

        // TODO: test validations
    }
    
    /**
     * Delete ots-connection-end-point-spec by ID
     *
     * Delete operation of resource: ots-connection-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectivityServiceEndPointConnectionEndPointOtsConnectionEndPointSpecOtsConnectionEndPointSpecByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        api.deleteContextConnectivityContextConnectivityServiceEndPointConnectionEndPointOtsConnectionEndPointSpecOtsConnectionEndPointSpecById(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Delete otsi-assembly-connection-end-point-spec by ID
     *
     * Delete operation of resource: otsi-assembly-connection-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectivityServiceEndPointConnectionEndPointOtsiAssemblyConnectionEndPointSpecOtsiAssemblyConnectionEndPointSpecByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        api.deleteContextConnectivityContextConnectivityServiceEndPointConnectionEndPointOtsiAssemblyConnectionEndPointSpecOtsiAssemblyConnectionEndPointSpecById(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Delete otsi-connection-end-point-spec by ID
     *
     * Delete operation of resource: otsi-connection-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectivityServiceEndPointConnectionEndPointOtsiConnectionEndPointSpecOtsiConnectionEndPointSpecByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        api.deleteContextConnectivityContextConnectivityServiceEndPointConnectionEndPointOtsiConnectionEndPointSpecOtsiConnectionEndPointSpecById(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Delete sdm-connection-end-point-spec by ID
     *
     * Delete operation of resource: sdm-connection-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectivityServiceEndPointConnectionEndPointSdmConnectionEndPointSpecSdmConnectionEndPointSpecByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        api.deleteContextConnectivityContextConnectivityServiceEndPointConnectionEndPointSdmConnectionEndPointSpecSdmConnectionEndPointSpecById(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Delete end-point by ID
     *
     * Delete operation of resource: end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectivityServiceEndPointEndPointByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        api.deleteContextConnectivityContextConnectivityServiceEndPointEndPointById(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Delete media-channel-service-interface-point-spec by ID
     *
     * Delete operation of resource: media-channel-service-interface-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectivityServiceEndPointMediaChannelServiceInterfacePointSpecMediaChannelServiceInterfacePointSpecByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        api.deleteContextConnectivityContextConnectivityServiceEndPointMediaChannelServiceInterfacePointSpecMediaChannelServiceInterfacePointSpecById(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Delete name by ID
     *
     * Delete operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectivityServiceEndPointNameNameByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String valueName = null;
        api.deleteContextConnectivityContextConnectivityServiceEndPointNameNameById(uuid, localId, valueName);

        // TODO: test validations
    }
    
    /**
     * Delete application-identifier by ID
     *
     * Delete operation of resource: application-identifier
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectivityServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigApplicationIdentifierApplicationIdentifierByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        api.deleteContextConnectivityContextConnectivityServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigApplicationIdentifierApplicationIdentifierById(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Delete central-frequency by ID
     *
     * Delete operation of resource: central-frequency
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectivityServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigCentralFrequencyCentralFrequencyByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        api.deleteContextConnectivityContextConnectivityServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigCentralFrequencyCentralFrequencyById(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Delete frequency-constraint by ID
     *
     * Delete operation of resource: frequency-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectivityServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigCentralFrequencyFrequencyConstraintFrequencyConstraintByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        api.deleteContextConnectivityContextConnectivityServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigCentralFrequencyFrequencyConstraintFrequencyConstraintById(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Delete otsi-config by ID
     *
     * Delete operation of resource: otsi-config
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectivityServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigOtsiConfigByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        api.deleteContextConnectivityContextConnectivityServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigOtsiConfigById(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Delete frequency-constraint by ID
     *
     * Delete operation of resource: frequency-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectivityServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigSpectrumFrequencyConstraintFrequencyConstraintByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        api.deleteContextConnectivityContextConnectivityServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigSpectrumFrequencyConstraintFrequencyConstraintById(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Delete spectrum by ID
     *
     * Delete operation of resource: spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectivityServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigSpectrumSpectrumByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        api.deleteContextConnectivityContextConnectivityServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigSpectrumSpectrumById(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Delete transmit-power by ID
     *
     * Delete operation of resource: transmit-power
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectivityServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigTransmitPowerTransmitPowerByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        api.deleteContextConnectivityContextConnectivityServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigTransmitPowerTransmitPowerById(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Delete otsi-connectivity-service-end-point-spec by ID
     *
     * Delete operation of resource: otsi-connectivity-service-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectivityServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConnectivityServiceEndPointSpecByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        api.deleteContextConnectivityContextConnectivityServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConnectivityServiceEndPointSpecById(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Delete sdm-service-interface-point-spec by ID
     *
     * Delete operation of resource: sdm-service-interface-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectivityServiceEndPointSdmServiceInterfacePointSpecSdmServiceInterfacePointSpecByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        api.deleteContextConnectivityContextConnectivityServiceEndPointSdmServiceInterfacePointSpecSdmServiceInterfacePointSpecById(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Delete media-channel-service-interface-point-spec by ID
     *
     * Delete operation of resource: media-channel-service-interface-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointMediaChannelServiceInterfacePointSpecMediaChannelServiceInterfacePointSpecByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        api.deleteContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointMediaChannelServiceInterfacePointSpecMediaChannelServiceInterfacePointSpecById(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Delete name by ID
     *
     * Delete operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointNameNameByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        String valueName = null;
        api.deleteContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointNameNameById(uuid, localId, serviceInterfacePointUuid, valueName);

        // TODO: test validations
    }
    
    /**
     * Delete otsi-service-interface-point-spec by ID
     *
     * Delete operation of resource: otsi-service-interface-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointOtsiServiceInterfacePointSpecOtsiServiceInterfacePointSpecByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        api.deleteContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointOtsiServiceInterfacePointSpecOtsiServiceInterfacePointSpecById(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Delete sdm-service-interface-point-spec by ID
     *
     * Delete operation of resource: sdm-service-interface-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmServiceInterfacePointSpecByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        api.deleteContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmServiceInterfacePointSpecById(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Delete service-interface-point by ID
     *
     * Delete operation of resource: service-interface-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        api.deleteContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Delete service-interface-point by ID
     *
     * Delete operation of resource: service-interface-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById_0Test() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        api.deleteContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById_0(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Delete include-core by ID
     *
     * Delete operation of resource: include-core
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectivityServiceIncludeCoreIncludeCoreByIdTest() throws ApiException {
        String uuid = null;
        api.deleteContextConnectivityContextConnectivityServiceIncludeCoreIncludeCoreById(uuid);

        // TODO: test validations
    }
    
    /**
     * Delete frequency-constraint by ID
     *
     * Delete operation of resource: frequency-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectivityServiceIncludeCoreOccupiedSpectrumFrequencyConstraintFrequencyConstraintByIdTest() throws ApiException {
        String uuid = null;
        api.deleteContextConnectivityContextConnectivityServiceIncludeCoreOccupiedSpectrumFrequencyConstraintFrequencyConstraintById(uuid);

        // TODO: test validations
    }
    
    /**
     * Delete occupied-spectrum by ID
     *
     * Delete operation of resource: occupied-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectivityServiceIncludeCoreOccupiedSpectrumOccupiedSpectrumByIdTest() throws ApiException {
        String uuid = null;
        api.deleteContextConnectivityContextConnectivityServiceIncludeCoreOccupiedSpectrumOccupiedSpectrumById(uuid);

        // TODO: test validations
    }
    
    /**
     * Delete latency-characteristic by ID
     *
     * Delete operation of resource: latency-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String trafficPropertyName = null;
        api.deleteContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicById(uuid, trafficPropertyName);

        // TODO: test validations
    }
    
    /**
     * Delete name by ID
     *
     * Delete operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectivityServiceNameNameByIdTest() throws ApiException {
        String uuid = null;
        String valueName = null;
        api.deleteContextConnectivityContextConnectivityServiceNameNameById(uuid, valueName);

        // TODO: test validations
    }
    
    /**
     * Delete bandwidth-profile by ID
     *
     * Delete operation of resource: bandwidth-profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileByIdTest() throws ApiException {
        String uuid = null;
        api.deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileById(uuid);

        // TODO: test validations
    }
    
    /**
     * Delete committed-burst-size by ID
     *
     * Delete operation of resource: committed-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdTest() throws ApiException {
        String uuid = null;
        api.deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById(uuid);

        // TODO: test validations
    }
    
    /**
     * Delete committed-information-rate by ID
     *
     * Delete operation of resource: committed-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdTest() throws ApiException {
        String uuid = null;
        api.deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById(uuid);

        // TODO: test validations
    }
    
    /**
     * Delete peak-burst-size by ID
     *
     * Delete operation of resource: peak-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdTest() throws ApiException {
        String uuid = null;
        api.deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById(uuid);

        // TODO: test validations
    }
    
    /**
     * Delete peak-information-rate by ID
     *
     * Delete operation of resource: peak-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdTest() throws ApiException {
        String uuid = null;
        api.deleteContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateById(uuid);

        // TODO: test validations
    }
    
    /**
     * Delete requested-capacity by ID
     *
     * Delete operation of resource: requested-capacity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectivityServiceRequestedCapacityRequestedCapacityByIdTest() throws ApiException {
        String uuid = null;
        api.deleteContextConnectivityContextConnectivityServiceRequestedCapacityRequestedCapacityById(uuid);

        // TODO: test validations
    }
    
    /**
     * Delete total-size by ID
     *
     * Delete operation of resource: total-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeByIdTest() throws ApiException {
        String uuid = null;
        api.deleteContextConnectivityContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeById(uuid);

        // TODO: test validations
    }
    
    /**
     * Delete resilience-type by ID
     *
     * Delete operation of resource: resilience-type
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectivityServiceResilienceTypeResilienceTypeByIdTest() throws ApiException {
        String uuid = null;
        api.deleteContextConnectivityContextConnectivityServiceResilienceTypeResilienceTypeById(uuid);

        // TODO: test validations
    }
    
    /**
     * Delete risk-diversity-characteristic by ID
     *
     * Delete operation of resource: risk-diversity-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String riskCharacteristicName = null;
        api.deleteContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicById(uuid, riskCharacteristicName);

        // TODO: test validations
    }
    
    /**
     * Delete schedule by ID
     *
     * Delete operation of resource: schedule
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextConnectivityContextConnectivityServiceScheduleScheduleByIdTest() throws ApiException {
        String uuid = null;
        api.deleteContextConnectivityContextConnectivityServiceScheduleScheduleById(uuid);

        // TODO: test validations
    }
    
    /**
     * Delete name by ID
     *
     * Delete operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextNameNameByIdTest() throws ApiException {
        String valueName = null;
        api.deleteContextNameNameById(valueName);

        // TODO: test validations
    }
    
    /**
     * Delete bandwidth-profile by ID
     *
     * Delete operation of resource: bandwidth-profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        api.deleteContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileBandwidthProfileById(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Delete committed-burst-size by ID
     *
     * Delete operation of resource: committed-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        api.deleteContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Delete committed-information-rate by ID
     *
     * Delete operation of resource: committed-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        api.deleteContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Delete peak-burst-size by ID
     *
     * Delete operation of resource: peak-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        api.deleteContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Delete peak-information-rate by ID
     *
     * Delete operation of resource: peak-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        api.deleteContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateById(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Delete capacity by ID
     *
     * Delete operation of resource: capacity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextPathComputationContextPathCompServiceEndPointCapacityCapacityByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        api.deleteContextPathComputationContextPathCompServiceEndPointCapacityCapacityById(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Delete total-size by ID
     *
     * Delete operation of resource: total-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextPathComputationContextPathCompServiceEndPointCapacityTotalSizeTotalSizeByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        api.deleteContextPathComputationContextPathCompServiceEndPointCapacityTotalSizeTotalSizeById(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Delete connection-end-point by ID
     *
     * Delete operation of resource: connection-end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextPathComputationContextPathCompServiceEndPointConnectionEndPointConnectionEndPointByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        api.deleteContextPathComputationContextPathCompServiceEndPointConnectionEndPointConnectionEndPointById(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Delete media-channel-assembly-spec by ID
     *
     * Delete operation of resource: media-channel-assembly-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextPathComputationContextPathCompServiceEndPointConnectionEndPointMediaChannelAssemblySpecMediaChannelAssemblySpecByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        api.deleteContextPathComputationContextPathCompServiceEndPointConnectionEndPointMediaChannelAssemblySpecMediaChannelAssemblySpecById(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Delete media-channel-connection-end-point-spec by ID
     *
     * Delete operation of resource: media-channel-connection-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextPathComputationContextPathCompServiceEndPointConnectionEndPointMediaChannelConnectionEndPointSpecMediaChannelConnectionEndPointSpecByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        api.deleteContextPathComputationContextPathCompServiceEndPointConnectionEndPointMediaChannelConnectionEndPointSpecMediaChannelConnectionEndPointSpecById(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Delete name by ID
     *
     * Delete operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextPathComputationContextPathCompServiceEndPointConnectionEndPointNameNameByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        String valueName = null;
        api.deleteContextPathComputationContextPathCompServiceEndPointConnectionEndPointNameNameById(uuid, localId, connectionEndPointUuid, valueName);

        // TODO: test validations
    }
    
    /**
     * Delete ots-connection-end-point-spec by ID
     *
     * Delete operation of resource: ots-connection-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextPathComputationContextPathCompServiceEndPointConnectionEndPointOtsConnectionEndPointSpecOtsConnectionEndPointSpecByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        api.deleteContextPathComputationContextPathCompServiceEndPointConnectionEndPointOtsConnectionEndPointSpecOtsConnectionEndPointSpecById(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Delete otsi-assembly-connection-end-point-spec by ID
     *
     * Delete operation of resource: otsi-assembly-connection-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextPathComputationContextPathCompServiceEndPointConnectionEndPointOtsiAssemblyConnectionEndPointSpecOtsiAssemblyConnectionEndPointSpecByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        api.deleteContextPathComputationContextPathCompServiceEndPointConnectionEndPointOtsiAssemblyConnectionEndPointSpecOtsiAssemblyConnectionEndPointSpecById(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Delete otsi-connection-end-point-spec by ID
     *
     * Delete operation of resource: otsi-connection-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextPathComputationContextPathCompServiceEndPointConnectionEndPointOtsiConnectionEndPointSpecOtsiConnectionEndPointSpecByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        api.deleteContextPathComputationContextPathCompServiceEndPointConnectionEndPointOtsiConnectionEndPointSpecOtsiConnectionEndPointSpecById(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Delete sdm-connection-end-point-spec by ID
     *
     * Delete operation of resource: sdm-connection-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextPathComputationContextPathCompServiceEndPointConnectionEndPointSdmConnectionEndPointSpecSdmConnectionEndPointSpecByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        api.deleteContextPathComputationContextPathCompServiceEndPointConnectionEndPointSdmConnectionEndPointSpecSdmConnectionEndPointSpecById(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Delete end-point by ID
     *
     * Delete operation of resource: end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextPathComputationContextPathCompServiceEndPointEndPointByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        api.deleteContextPathComputationContextPathCompServiceEndPointEndPointById(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Delete media-channel-service-interface-point-spec by ID
     *
     * Delete operation of resource: media-channel-service-interface-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextPathComputationContextPathCompServiceEndPointMediaChannelServiceInterfacePointSpecMediaChannelServiceInterfacePointSpecByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        api.deleteContextPathComputationContextPathCompServiceEndPointMediaChannelServiceInterfacePointSpecMediaChannelServiceInterfacePointSpecById(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Delete name by ID
     *
     * Delete operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextPathComputationContextPathCompServiceEndPointNameNameByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String valueName = null;
        api.deleteContextPathComputationContextPathCompServiceEndPointNameNameById(uuid, localId, valueName);

        // TODO: test validations
    }
    
    /**
     * Delete application-identifier by ID
     *
     * Delete operation of resource: application-identifier
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextPathComputationContextPathCompServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigApplicationIdentifierApplicationIdentifierByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        api.deleteContextPathComputationContextPathCompServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigApplicationIdentifierApplicationIdentifierById(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Delete central-frequency by ID
     *
     * Delete operation of resource: central-frequency
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextPathComputationContextPathCompServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigCentralFrequencyCentralFrequencyByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        api.deleteContextPathComputationContextPathCompServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigCentralFrequencyCentralFrequencyById(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Delete frequency-constraint by ID
     *
     * Delete operation of resource: frequency-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextPathComputationContextPathCompServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigCentralFrequencyFrequencyConstraintFrequencyConstraintByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        api.deleteContextPathComputationContextPathCompServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigCentralFrequencyFrequencyConstraintFrequencyConstraintById(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Delete otsi-config by ID
     *
     * Delete operation of resource: otsi-config
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextPathComputationContextPathCompServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigOtsiConfigByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        api.deleteContextPathComputationContextPathCompServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigOtsiConfigById(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Delete frequency-constraint by ID
     *
     * Delete operation of resource: frequency-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextPathComputationContextPathCompServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigSpectrumFrequencyConstraintFrequencyConstraintByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        api.deleteContextPathComputationContextPathCompServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigSpectrumFrequencyConstraintFrequencyConstraintById(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Delete spectrum by ID
     *
     * Delete operation of resource: spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextPathComputationContextPathCompServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigSpectrumSpectrumByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        api.deleteContextPathComputationContextPathCompServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigSpectrumSpectrumById(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Delete transmit-power by ID
     *
     * Delete operation of resource: transmit-power
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextPathComputationContextPathCompServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigTransmitPowerTransmitPowerByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        api.deleteContextPathComputationContextPathCompServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigTransmitPowerTransmitPowerById(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Delete otsi-connectivity-service-end-point-spec by ID
     *
     * Delete operation of resource: otsi-connectivity-service-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextPathComputationContextPathCompServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConnectivityServiceEndPointSpecByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        api.deleteContextPathComputationContextPathCompServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConnectivityServiceEndPointSpecById(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Delete sdm-service-interface-point-spec by ID
     *
     * Delete operation of resource: sdm-service-interface-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextPathComputationContextPathCompServiceEndPointSdmServiceInterfacePointSpecSdmServiceInterfacePointSpecByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        api.deleteContextPathComputationContextPathCompServiceEndPointSdmServiceInterfacePointSpecSdmServiceInterfacePointSpecById(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Delete media-channel-service-interface-point-spec by ID
     *
     * Delete operation of resource: media-channel-service-interface-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextPathComputationContextPathCompServiceEndPointServiceInterfacePointMediaChannelServiceInterfacePointSpecMediaChannelServiceInterfacePointSpecByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        api.deleteContextPathComputationContextPathCompServiceEndPointServiceInterfacePointMediaChannelServiceInterfacePointSpecMediaChannelServiceInterfacePointSpecById(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Delete name by ID
     *
     * Delete operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextPathComputationContextPathCompServiceEndPointServiceInterfacePointNameNameByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        String valueName = null;
        api.deleteContextPathComputationContextPathCompServiceEndPointServiceInterfacePointNameNameById(uuid, localId, serviceInterfacePointUuid, valueName);

        // TODO: test validations
    }
    
    /**
     * Delete otsi-service-interface-point-spec by ID
     *
     * Delete operation of resource: otsi-service-interface-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextPathComputationContextPathCompServiceEndPointServiceInterfacePointOtsiServiceInterfacePointSpecOtsiServiceInterfacePointSpecByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        api.deleteContextPathComputationContextPathCompServiceEndPointServiceInterfacePointOtsiServiceInterfacePointSpecOtsiServiceInterfacePointSpecById(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Delete sdm-service-interface-point-spec by ID
     *
     * Delete operation of resource: sdm-service-interface-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextPathComputationContextPathCompServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmServiceInterfacePointSpecByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        api.deleteContextPathComputationContextPathCompServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmServiceInterfacePointSpecById(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Delete service-interface-point by ID
     *
     * Delete operation of resource: service-interface-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextPathComputationContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePointByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        api.deleteContextPathComputationContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePointById(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Delete service-interface-point by ID
     *
     * Delete operation of resource: service-interface-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextPathComputationContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePointById_0Test() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        api.deleteContextPathComputationContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePointById_0(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Delete name by ID
     *
     * Delete operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextPathComputationContextPathCompServiceNameNameByIdTest() throws ApiException {
        String uuid = null;
        String valueName = null;
        api.deleteContextPathComputationContextPathCompServiceNameNameById(uuid, valueName);

        // TODO: test validations
    }
    
    /**
     * Delete name by ID
     *
     * Delete operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextPathComputationContextPathCompServiceObjectiveFunctionNameNameByIdTest() throws ApiException {
        String uuid = null;
        String valueName = null;
        api.deleteContextPathComputationContextPathCompServiceObjectiveFunctionNameNameById(uuid, valueName);

        // TODO: test validations
    }
    
    /**
     * Delete objective-function by ID
     *
     * Delete operation of resource: objective-function
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextPathComputationContextPathCompServiceObjectiveFunctionObjectiveFunctionByIdTest() throws ApiException {
        String uuid = null;
        api.deleteContextPathComputationContextPathCompServiceObjectiveFunctionObjectiveFunctionById(uuid);

        // TODO: test validations
    }
    
    /**
     * Delete name by ID
     *
     * Delete operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextPathComputationContextPathCompServiceOptimizationConstraintNameNameByIdTest() throws ApiException {
        String uuid = null;
        String valueName = null;
        api.deleteContextPathComputationContextPathCompServiceOptimizationConstraintNameNameById(uuid, valueName);

        // TODO: test validations
    }
    
    /**
     * Delete optimization-constraint by ID
     *
     * Delete operation of resource: optimization-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextPathComputationContextPathCompServiceOptimizationConstraintOptimizationConstraintByIdTest() throws ApiException {
        String uuid = null;
        api.deleteContextPathComputationContextPathCompServiceOptimizationConstraintOptimizationConstraintById(uuid);

        // TODO: test validations
    }
    
    /**
     * Delete path-comp-service by ID
     *
     * Delete operation of resource: path-comp-service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextPathComputationContextPathCompServicePathCompServiceByIdTest() throws ApiException {
        String uuid = null;
        api.deleteContextPathComputationContextPathCompServicePathCompServiceById(uuid);

        // TODO: test validations
    }
    
    /**
     * Delete cost-characteristic by ID
     *
     * Delete operation of resource: cost-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextPathComputationContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String costName = null;
        api.deleteContextPathComputationContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristicById(uuid, costName);

        // TODO: test validations
    }
    
    /**
     * Delete latency-characteristic by ID
     *
     * Delete operation of resource: latency-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextPathComputationContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String trafficPropertyName = null;
        api.deleteContextPathComputationContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristicById(uuid, trafficPropertyName);

        // TODO: test validations
    }
    
    /**
     * Delete risk-diversity-characteristic by ID
     *
     * Delete operation of resource: risk-diversity-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextPathComputationContextPathCompServiceRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String riskCharacteristicName = null;
        api.deleteContextPathComputationContextPathCompServiceRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristicById(uuid, riskCharacteristicName);

        // TODO: test validations
    }
    
    /**
     * Delete routing-constraint by ID
     *
     * Delete operation of resource: routing-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextPathComputationContextPathCompServiceRoutingConstraintRoutingConstraintByIdTest() throws ApiException {
        String uuid = null;
        api.deleteContextPathComputationContextPathCompServiceRoutingConstraintRoutingConstraintById(uuid);

        // TODO: test validations
    }
    
    /**
     * Delete topology-constraint by ID
     *
     * Delete operation of resource: topology-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextPathComputationContextPathCompServiceTopologyConstraintTopologyConstraintByIdTest() throws ApiException {
        String uuid = null;
        api.deleteContextPathComputationContextPathCompServiceTopologyConstraintTopologyConstraintById(uuid);

        // TODO: test validations
    }
    
    /**
     * Delete path-computation-context by ID
     *
     * Delete operation of resource: path-computation-context
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextPathComputationContextPathComputationContextByIdTest() throws ApiException {
        api.deleteContextPathComputationContextPathComputationContextById();

        // TODO: test validations
    }
    
    /**
     * Delete media-channel-service-interface-point-spec by ID
     *
     * Delete operation of resource: media-channel-service-interface-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextServiceInterfacePointMediaChannelServiceInterfacePointSpecMediaChannelServiceInterfacePointSpecByIdTest() throws ApiException {
        String uuid = null;
        api.deleteContextServiceInterfacePointMediaChannelServiceInterfacePointSpecMediaChannelServiceInterfacePointSpecById(uuid);

        // TODO: test validations
    }
    
    /**
     * Delete name by ID
     *
     * Delete operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextServiceInterfacePointNameNameByIdTest() throws ApiException {
        String uuid = null;
        String valueName = null;
        api.deleteContextServiceInterfacePointNameNameById(uuid, valueName);

        // TODO: test validations
    }
    
    /**
     * Delete otsi-service-interface-point-spec by ID
     *
     * Delete operation of resource: otsi-service-interface-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextServiceInterfacePointOtsiServiceInterfacePointSpecOtsiServiceInterfacePointSpecByIdTest() throws ApiException {
        String uuid = null;
        api.deleteContextServiceInterfacePointOtsiServiceInterfacePointSpecOtsiServiceInterfacePointSpecById(uuid);

        // TODO: test validations
    }
    
    /**
     * Delete sdm-service-interface-point-spec by ID
     *
     * Delete operation of resource: sdm-service-interface-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextServiceInterfacePointSdmServiceInterfacePointSpecSdmServiceInterfacePointSpecByIdTest() throws ApiException {
        String uuid = null;
        api.deleteContextServiceInterfacePointSdmServiceInterfacePointSpecSdmServiceInterfacePointSpecById(uuid);

        // TODO: test validations
    }
    
    /**
     * Delete service-interface-point by ID
     *
     * Delete operation of resource: service-interface-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextServiceInterfacePointServiceInterfacePointByIdTest() throws ApiException {
        String uuid = null;
        api.deleteContextServiceInterfacePointServiceInterfacePointById(uuid);

        // TODO: test validations
    }
    
    /**
     * Delete topology-context by ID
     *
     * Delete operation of resource: topology-context
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextTopologyContextTopologyContextByIdTest() throws ApiException {
        api.deleteContextTopologyContextTopologyContextById();

        // TODO: test validations
    }
    
    /**
     * Retrieve context
     *
     * Retrieve operation of resource: context
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTest() throws ApiException {
        ContextSchema response = api.retrieveContext();

        // TODO: test validations
    }
    
    /**
     * Retrieve connection
     *
     * Retrieve operation of resource: connection
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionConnectionTest() throws ApiException {
        List<String> response = api.retrieveContextConnectivityContextConnectionConnection();

        // TODO: test validations
    }
    
    /**
     * Retrieve connection by ID
     *
     * Retrieve operation of resource: connection
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionConnectionByIdTest() throws ApiException {
        String uuid = null;
        Connection response = api.retrieveContextConnectivityContextConnectionConnectionById(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve aggregated-connection-end-point
     *
     * Retrieve operation of resource: aggregated-connection-end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointTest() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        List<String> response = api.retrieveContextConnectivityContextConnectionConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPoint(uuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve aggregated-connection-end-point by ID
     *
     * Retrieve operation of resource: aggregated-connection-end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointByIdTest() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        String topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid = null;
        ConnectionEndPointRef response = api.retrieveContextConnectivityContextConnectionConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointById(uuid, connectionEndPointUuid, topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve client-node-edge-point
     *
     * Retrieve operation of resource: client-node-edge-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionConnectionEndPointClientNodeEdgePointClientNodeEdgePointTest() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        List<String> response = api.retrieveContextConnectivityContextConnectionConnectionEndPointClientNodeEdgePointClientNodeEdgePoint(uuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve client-node-edge-point by ID
     *
     * Retrieve operation of resource: client-node-edge-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionConnectionEndPointClientNodeEdgePointClientNodeEdgePointByIdTest() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        String topologyUuidNodeUuidNodeEdgePointUuid = null;
        NodeEdgePointRef response = api.retrieveContextConnectivityContextConnectionConnectionEndPointClientNodeEdgePointClientNodeEdgePointById(uuid, connectionEndPointUuid, topologyUuidNodeUuidNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve connection-end-point
     *
     * Retrieve operation of resource: connection-end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionConnectionEndPointConnectionEndPointTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextConnectivityContextConnectionConnectionEndPointConnectionEndPoint(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve connection-end-point by ID
     *
     * Retrieve operation of resource: connection-end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionConnectionEndPointConnectionEndPointByIdTest() throws ApiException {
        String uuid = null;
        String topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid = null;
        ConnectionEndPointRef response = api.retrieveContextConnectivityContextConnectionConnectionEndPointConnectionEndPointById(uuid, topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve connection-end-point by ID
     *
     * Retrieve operation of resource: connection-end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionConnectionEndPointConnectionEndPointById_0Test() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        ConnectionEndPointSchema response = api.retrieveContextConnectivityContextConnectionConnectionEndPointConnectionEndPointById_0(uuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve media-channel-assembly-spec
     *
     * Retrieve operation of resource: media-channel-assembly-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionConnectionEndPointMediaChannelAssemblySpecMediaChannelAssemblySpecTest() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        MediaChannelAssemblySpec response = api.retrieveContextConnectivityContextConnectionConnectionEndPointMediaChannelAssemblySpecMediaChannelAssemblySpec(uuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve media-channel-connection-end-point-spec
     *
     * Retrieve operation of resource: media-channel-connection-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionConnectionEndPointMediaChannelConnectionEndPointSpecMediaChannelConnectionEndPointSpecTest() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        MediaChannelConnectionEndPointSpec response = api.retrieveContextConnectivityContextConnectionConnectionEndPointMediaChannelConnectionEndPointSpecMediaChannelConnectionEndPointSpec(uuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve measured-power-egress
     *
     * Retrieve operation of resource: measured-power-egress
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionConnectionEndPointMediaChannelConnectionEndPointSpecMediaChannelMeasuredPowerEgressMeasuredPowerEgressTest() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        PowerPropertiesPac response = api.retrieveContextConnectivityContextConnectionConnectionEndPointMediaChannelConnectionEndPointSpecMediaChannelMeasuredPowerEgressMeasuredPowerEgress(uuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve measured-power-ingress
     *
     * Retrieve operation of resource: measured-power-ingress
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionConnectionEndPointMediaChannelConnectionEndPointSpecMediaChannelMeasuredPowerIngressMeasuredPowerIngressTest() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        PowerPropertiesPac response = api.retrieveContextConnectivityContextConnectionConnectionEndPointMediaChannelConnectionEndPointSpecMediaChannelMeasuredPowerIngressMeasuredPowerIngress(uuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve media-channel
     *
     * Retrieve operation of resource: media-channel
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionConnectionEndPointMediaChannelConnectionEndPointSpecMediaChannelMediaChannelTest() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        MediaChannelPropertiesPac response = api.retrieveContextConnectivityContextConnectionConnectionEndPointMediaChannelConnectionEndPointSpecMediaChannelMediaChannel(uuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve frequency-constraint
     *
     * Retrieve operation of resource: frequency-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionConnectionEndPointMediaChannelConnectionEndPointSpecMediaChannelOccupiedSpectrumFrequencyConstraintFrequencyConstraintTest() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        FrequencyConstraint response = api.retrieveContextConnectivityContextConnectionConnectionEndPointMediaChannelConnectionEndPointSpecMediaChannelOccupiedSpectrumFrequencyConstraintFrequencyConstraint(uuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve occupied-spectrum
     *
     * Retrieve operation of resource: occupied-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionConnectionEndPointMediaChannelConnectionEndPointSpecMediaChannelOccupiedSpectrumOccupiedSpectrumTest() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        SpectrumBand response = api.retrieveContextConnectivityContextConnectionConnectionEndPointMediaChannelConnectionEndPointSpecMediaChannelOccupiedSpectrumOccupiedSpectrum(uuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionConnectionEndPointNameNameTest() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        List<String> response = api.retrieveContextConnectivityContextConnectionConnectionEndPointNameName(uuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name by ID
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionConnectionEndPointNameNameByIdTest() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        String valueName = null;
        NameAndValue response = api.retrieveContextConnectivityContextConnectionConnectionEndPointNameNameById(uuid, connectionEndPointUuid, valueName);

        // TODO: test validations
    }
    
    /**
     * Retrieve ots-connection-end-point-spec
     *
     * Retrieve operation of resource: ots-connection-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionConnectionEndPointOtsConnectionEndPointSpecOtsConnectionEndPointSpecTest() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        OtsConnectionEndPointSpec response = api.retrieveContextConnectivityContextConnectionConnectionEndPointOtsConnectionEndPointSpecOtsConnectionEndPointSpec(uuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve measured-power-egress
     *
     * Retrieve operation of resource: measured-power-egress
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionConnectionEndPointOtsConnectionEndPointSpecOtsMediaChannelMeasuredPowerEgressMeasuredPowerEgressTest() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        PowerPropertiesPac response = api.retrieveContextConnectivityContextConnectionConnectionEndPointOtsConnectionEndPointSpecOtsMediaChannelMeasuredPowerEgressMeasuredPowerEgress(uuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve measured-power-ingress
     *
     * Retrieve operation of resource: measured-power-ingress
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionConnectionEndPointOtsConnectionEndPointSpecOtsMediaChannelMeasuredPowerIngressMeasuredPowerIngressTest() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        PowerPropertiesPac response = api.retrieveContextConnectivityContextConnectionConnectionEndPointOtsConnectionEndPointSpecOtsMediaChannelMeasuredPowerIngressMeasuredPowerIngress(uuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve frequency-constraint
     *
     * Retrieve operation of resource: frequency-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionConnectionEndPointOtsConnectionEndPointSpecOtsMediaChannelOccupiedSpectrumFrequencyConstraintFrequencyConstraintTest() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        FrequencyConstraint response = api.retrieveContextConnectivityContextConnectionConnectionEndPointOtsConnectionEndPointSpecOtsMediaChannelOccupiedSpectrumFrequencyConstraintFrequencyConstraint(uuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve occupied-spectrum
     *
     * Retrieve operation of resource: occupied-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionConnectionEndPointOtsConnectionEndPointSpecOtsMediaChannelOccupiedSpectrumOccupiedSpectrumTest() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        SpectrumBand response = api.retrieveContextConnectivityContextConnectionConnectionEndPointOtsConnectionEndPointSpecOtsMediaChannelOccupiedSpectrumOccupiedSpectrum(uuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve ots-media-channel
     *
     * Retrieve operation of resource: ots-media-channel
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionConnectionEndPointOtsConnectionEndPointSpecOtsMediaChannelOtsMediaChannelTest() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        MediaChannelPropertiesPac response = api.retrieveContextConnectivityContextConnectionConnectionEndPointOtsConnectionEndPointSpecOtsMediaChannelOtsMediaChannel(uuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve fec-parameters
     *
     * Retrieve operation of resource: fec-parameters
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionConnectionEndPointOtsiAssemblyConnectionEndPointSpecFecParametersFecParametersTest() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        FecPropertiesPac response = api.retrieveContextConnectivityContextConnectionConnectionEndPointOtsiAssemblyConnectionEndPointSpecFecParametersFecParameters(uuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve otsi-adapter
     *
     * Retrieve operation of resource: otsi-adapter
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionConnectionEndPointOtsiAssemblyConnectionEndPointSpecOtsiAdapterOtsiAdapterTest() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        OtsiGserverAdaptationPac response = api.retrieveContextConnectivityContextConnectionConnectionEndPointOtsiAssemblyConnectionEndPointSpecOtsiAdapterOtsiAdapter(uuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve otsi-assembly-connection-end-point-spec
     *
     * Retrieve operation of resource: otsi-assembly-connection-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionConnectionEndPointOtsiAssemblyConnectionEndPointSpecOtsiAssemblyConnectionEndPointSpecTest() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        OtsiAssemblyConnectionEndPointSpec response = api.retrieveContextConnectivityContextConnectionConnectionEndPointOtsiAssemblyConnectionEndPointSpecOtsiAssemblyConnectionEndPointSpec(uuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve otsi-connection-end-point-spec
     *
     * Retrieve operation of resource: otsi-connection-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionConnectionEndPointOtsiConnectionEndPointSpecOtsiConnectionEndPointSpecTest() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        OtsiConnectionEndPointSpec response = api.retrieveContextConnectivityContextConnectionConnectionEndPointOtsiConnectionEndPointSpecOtsiConnectionEndPointSpec(uuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve laser-properties
     *
     * Retrieve operation of resource: laser-properties
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionConnectionEndPointOtsiConnectionEndPointSpecOtsiTerminationLaserPropertiesLaserPropertiesTest() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        LaserPropertiesPac response = api.retrieveContextConnectivityContextConnectionConnectionEndPointOtsiConnectionEndPointSpecOtsiTerminationLaserPropertiesLaserProperties(uuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve otsi-termination
     *
     * Retrieve operation of resource: otsi-termination
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionConnectionEndPointOtsiConnectionEndPointSpecOtsiTerminationOtsiTerminationTest() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        OtsiTerminationPac response = api.retrieveContextConnectivityContextConnectionConnectionEndPointOtsiConnectionEndPointSpecOtsiTerminationOtsiTermination(uuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve received-power
     *
     * Retrieve operation of resource: received-power
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionConnectionEndPointOtsiConnectionEndPointSpecOtsiTerminationReceivedPowerReceivedPowerTest() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        PowerPropertiesPac response = api.retrieveContextConnectivityContextConnectionConnectionEndPointOtsiConnectionEndPointSpecOtsiTerminationReceivedPowerReceivedPower(uuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve selected-application-identifier
     *
     * Retrieve operation of resource: selected-application-identifier
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionConnectionEndPointOtsiConnectionEndPointSpecOtsiTerminationSelectedApplicationIdentifierSelectedApplicationIdentifierTest() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        ApplicationIdentifier response = api.retrieveContextConnectivityContextConnectionConnectionEndPointOtsiConnectionEndPointSpecOtsiTerminationSelectedApplicationIdentifierSelectedApplicationIdentifier(uuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve frequency-constraint
     *
     * Retrieve operation of resource: frequency-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionConnectionEndPointOtsiConnectionEndPointSpecOtsiTerminationSelectedCentralFrequencyFrequencyConstraintFrequencyConstraintTest() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        FrequencyConstraint response = api.retrieveContextConnectivityContextConnectionConnectionEndPointOtsiConnectionEndPointSpecOtsiTerminationSelectedCentralFrequencyFrequencyConstraintFrequencyConstraint(uuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve selected-central-frequency
     *
     * Retrieve operation of resource: selected-central-frequency
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionConnectionEndPointOtsiConnectionEndPointSpecOtsiTerminationSelectedCentralFrequencySelectedCentralFrequencyTest() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        CentralFrequency response = api.retrieveContextConnectivityContextConnectionConnectionEndPointOtsiConnectionEndPointSpecOtsiTerminationSelectedCentralFrequencySelectedCentralFrequency(uuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve frequency-constraint
     *
     * Retrieve operation of resource: frequency-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionConnectionEndPointOtsiConnectionEndPointSpecOtsiTerminationSelectedSpectrumFrequencyConstraintFrequencyConstraintTest() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        FrequencyConstraint response = api.retrieveContextConnectivityContextConnectionConnectionEndPointOtsiConnectionEndPointSpecOtsiTerminationSelectedSpectrumFrequencyConstraintFrequencyConstraint(uuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve selected-spectrum
     *
     * Retrieve operation of resource: selected-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionConnectionEndPointOtsiConnectionEndPointSpecOtsiTerminationSelectedSpectrumSelectedSpectrumTest() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        SpectrumBand response = api.retrieveContextConnectivityContextConnectionConnectionEndPointOtsiConnectionEndPointSpecOtsiTerminationSelectedSpectrumSelectedSpectrum(uuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve transmited-power
     *
     * Retrieve operation of resource: transmited-power
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionConnectionEndPointOtsiConnectionEndPointSpecOtsiTerminationTransmitedPowerTransmitedPowerTest() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        PowerPropertiesPac response = api.retrieveContextConnectivityContextConnectionConnectionEndPointOtsiConnectionEndPointSpecOtsiTerminationTransmitedPowerTransmitedPower(uuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve parent-node-edge-point
     *
     * Retrieve operation of resource: parent-node-edge-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionConnectionEndPointParentNodeEdgePointParentNodeEdgePointTest() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        NodeEdgePointRef response = api.retrieveContextConnectivityContextConnectionConnectionEndPointParentNodeEdgePointParentNodeEdgePoint(uuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve sdm-connection-end-point-spec
     *
     * Retrieve operation of resource: sdm-connection-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionConnectionEndPointSdmConnectionEndPointSpecSdmConnectionEndPointSpecTest() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        SdmConnectionEndPointSpec response = api.retrieveContextConnectivityContextConnectionConnectionEndPointSdmConnectionEndPointSpecSdmConnectionEndPointSpec(uuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve frequency-constraint
     *
     * Retrieve operation of resource: frequency-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionConnectionEndPointSdmConnectionEndPointSpecSdmOccupiedSpectrumFrequencyConstraintFrequencyConstraintTest() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        FrequencyConstraint response = api.retrieveContextConnectivityContextConnectionConnectionEndPointSdmConnectionEndPointSpecSdmOccupiedSpectrumFrequencyConstraintFrequencyConstraint(uuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve occupied-spectrum
     *
     * Retrieve operation of resource: occupied-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionConnectionEndPointSdmConnectionEndPointSpecSdmOccupiedSpectrumOccupiedSpectrumTest() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        SpectrumBand response = api.retrieveContextConnectivityContextConnectionConnectionEndPointSdmConnectionEndPointSpecSdmOccupiedSpectrumOccupiedSpectrum(uuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve sdm
     *
     * Retrieve operation of resource: sdm
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionConnectionEndPointSdmConnectionEndPointSpecSdmSdmTest() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        SdmPropertiesPac response = api.retrieveContextConnectivityContextConnectionConnectionEndPointSdmConnectionEndPointSpecSdmSdm(uuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve lower-connection
     *
     * Retrieve operation of resource: lower-connection
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionLowerConnectionLowerConnectionTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextConnectivityContextConnectionLowerConnectionLowerConnection(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve lower-connection by ID
     *
     * Retrieve operation of resource: lower-connection
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionLowerConnectionLowerConnectionByIdTest() throws ApiException {
        String uuid = null;
        String connectionUuid = null;
        ConnectionRef response = api.retrieveContextConnectivityContextConnectionLowerConnectionLowerConnectionById(uuid, connectionUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionNameNameTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextConnectivityContextConnectionNameName(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name by ID
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionNameNameByIdTest() throws ApiException {
        String uuid = null;
        String valueName = null;
        NameAndValue response = api.retrieveContextConnectivityContextConnectionNameNameById(uuid, valueName);

        // TODO: test validations
    }
    
    /**
     * Retrieve aggregated-connection-end-point
     *
     * Retrieve operation of resource: aggregated-connection-end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionRouteConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        List<String> response = api.retrieveContextConnectivityContextConnectionRouteConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPoint(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve aggregated-connection-end-point by ID
     *
     * Retrieve operation of resource: aggregated-connection-end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionRouteConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        String topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid = null;
        ConnectionEndPointRef response = api.retrieveContextConnectivityContextConnectionRouteConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointById(uuid, localId, connectionEndPointUuid, topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve client-node-edge-point
     *
     * Retrieve operation of resource: client-node-edge-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionRouteConnectionEndPointClientNodeEdgePointClientNodeEdgePointTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        List<String> response = api.retrieveContextConnectivityContextConnectionRouteConnectionEndPointClientNodeEdgePointClientNodeEdgePoint(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve client-node-edge-point by ID
     *
     * Retrieve operation of resource: client-node-edge-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionRouteConnectionEndPointClientNodeEdgePointClientNodeEdgePointByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        String topologyUuidNodeUuidNodeEdgePointUuid = null;
        NodeEdgePointRef response = api.retrieveContextConnectivityContextConnectionRouteConnectionEndPointClientNodeEdgePointClientNodeEdgePointById(uuid, localId, connectionEndPointUuid, topologyUuidNodeUuidNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve connection-end-point
     *
     * Retrieve operation of resource: connection-end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointTest() throws ApiException {
        String uuid = null;
        String localId = null;
        List<String> response = api.retrieveContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPoint(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve connection-end-point by ID
     *
     * Retrieve operation of resource: connection-end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid = null;
        ConnectionEndPointRef response = api.retrieveContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointById(uuid, localId, topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve connection-end-point by ID
     *
     * Retrieve operation of resource: connection-end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointById_0Test() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        ConnectionEndPointSchema response = api.retrieveContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointById_0(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve media-channel-assembly-spec
     *
     * Retrieve operation of resource: media-channel-assembly-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionRouteConnectionEndPointMediaChannelAssemblySpecMediaChannelAssemblySpecTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        MediaChannelAssemblySpec response = api.retrieveContextConnectivityContextConnectionRouteConnectionEndPointMediaChannelAssemblySpecMediaChannelAssemblySpec(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve media-channel-connection-end-point-spec
     *
     * Retrieve operation of resource: media-channel-connection-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionRouteConnectionEndPointMediaChannelConnectionEndPointSpecMediaChannelConnectionEndPointSpecTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        MediaChannelConnectionEndPointSpec response = api.retrieveContextConnectivityContextConnectionRouteConnectionEndPointMediaChannelConnectionEndPointSpecMediaChannelConnectionEndPointSpec(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve measured-power-egress
     *
     * Retrieve operation of resource: measured-power-egress
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionRouteConnectionEndPointMediaChannelConnectionEndPointSpecMediaChannelMeasuredPowerEgressMeasuredPowerEgressTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        PowerPropertiesPac response = api.retrieveContextConnectivityContextConnectionRouteConnectionEndPointMediaChannelConnectionEndPointSpecMediaChannelMeasuredPowerEgressMeasuredPowerEgress(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve measured-power-ingress
     *
     * Retrieve operation of resource: measured-power-ingress
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionRouteConnectionEndPointMediaChannelConnectionEndPointSpecMediaChannelMeasuredPowerIngressMeasuredPowerIngressTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        PowerPropertiesPac response = api.retrieveContextConnectivityContextConnectionRouteConnectionEndPointMediaChannelConnectionEndPointSpecMediaChannelMeasuredPowerIngressMeasuredPowerIngress(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve media-channel
     *
     * Retrieve operation of resource: media-channel
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionRouteConnectionEndPointMediaChannelConnectionEndPointSpecMediaChannelMediaChannelTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        MediaChannelPropertiesPac response = api.retrieveContextConnectivityContextConnectionRouteConnectionEndPointMediaChannelConnectionEndPointSpecMediaChannelMediaChannel(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve frequency-constraint
     *
     * Retrieve operation of resource: frequency-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionRouteConnectionEndPointMediaChannelConnectionEndPointSpecMediaChannelOccupiedSpectrumFrequencyConstraintFrequencyConstraintTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        FrequencyConstraint response = api.retrieveContextConnectivityContextConnectionRouteConnectionEndPointMediaChannelConnectionEndPointSpecMediaChannelOccupiedSpectrumFrequencyConstraintFrequencyConstraint(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve occupied-spectrum
     *
     * Retrieve operation of resource: occupied-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionRouteConnectionEndPointMediaChannelConnectionEndPointSpecMediaChannelOccupiedSpectrumOccupiedSpectrumTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        SpectrumBand response = api.retrieveContextConnectivityContextConnectionRouteConnectionEndPointMediaChannelConnectionEndPointSpecMediaChannelOccupiedSpectrumOccupiedSpectrum(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionRouteConnectionEndPointNameNameTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        List<String> response = api.retrieveContextConnectivityContextConnectionRouteConnectionEndPointNameName(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name by ID
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionRouteConnectionEndPointNameNameByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        String valueName = null;
        NameAndValue response = api.retrieveContextConnectivityContextConnectionRouteConnectionEndPointNameNameById(uuid, localId, connectionEndPointUuid, valueName);

        // TODO: test validations
    }
    
    /**
     * Retrieve ots-connection-end-point-spec
     *
     * Retrieve operation of resource: ots-connection-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionRouteConnectionEndPointOtsConnectionEndPointSpecOtsConnectionEndPointSpecTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        OtsConnectionEndPointSpec response = api.retrieveContextConnectivityContextConnectionRouteConnectionEndPointOtsConnectionEndPointSpecOtsConnectionEndPointSpec(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve measured-power-egress
     *
     * Retrieve operation of resource: measured-power-egress
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionRouteConnectionEndPointOtsConnectionEndPointSpecOtsMediaChannelMeasuredPowerEgressMeasuredPowerEgressTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        PowerPropertiesPac response = api.retrieveContextConnectivityContextConnectionRouteConnectionEndPointOtsConnectionEndPointSpecOtsMediaChannelMeasuredPowerEgressMeasuredPowerEgress(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve measured-power-ingress
     *
     * Retrieve operation of resource: measured-power-ingress
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionRouteConnectionEndPointOtsConnectionEndPointSpecOtsMediaChannelMeasuredPowerIngressMeasuredPowerIngressTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        PowerPropertiesPac response = api.retrieveContextConnectivityContextConnectionRouteConnectionEndPointOtsConnectionEndPointSpecOtsMediaChannelMeasuredPowerIngressMeasuredPowerIngress(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve frequency-constraint
     *
     * Retrieve operation of resource: frequency-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionRouteConnectionEndPointOtsConnectionEndPointSpecOtsMediaChannelOccupiedSpectrumFrequencyConstraintFrequencyConstraintTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        FrequencyConstraint response = api.retrieveContextConnectivityContextConnectionRouteConnectionEndPointOtsConnectionEndPointSpecOtsMediaChannelOccupiedSpectrumFrequencyConstraintFrequencyConstraint(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve occupied-spectrum
     *
     * Retrieve operation of resource: occupied-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionRouteConnectionEndPointOtsConnectionEndPointSpecOtsMediaChannelOccupiedSpectrumOccupiedSpectrumTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        SpectrumBand response = api.retrieveContextConnectivityContextConnectionRouteConnectionEndPointOtsConnectionEndPointSpecOtsMediaChannelOccupiedSpectrumOccupiedSpectrum(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve ots-media-channel
     *
     * Retrieve operation of resource: ots-media-channel
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionRouteConnectionEndPointOtsConnectionEndPointSpecOtsMediaChannelOtsMediaChannelTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        MediaChannelPropertiesPac response = api.retrieveContextConnectivityContextConnectionRouteConnectionEndPointOtsConnectionEndPointSpecOtsMediaChannelOtsMediaChannel(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve fec-parameters
     *
     * Retrieve operation of resource: fec-parameters
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionRouteConnectionEndPointOtsiAssemblyConnectionEndPointSpecFecParametersFecParametersTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        FecPropertiesPac response = api.retrieveContextConnectivityContextConnectionRouteConnectionEndPointOtsiAssemblyConnectionEndPointSpecFecParametersFecParameters(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve otsi-adapter
     *
     * Retrieve operation of resource: otsi-adapter
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionRouteConnectionEndPointOtsiAssemblyConnectionEndPointSpecOtsiAdapterOtsiAdapterTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        OtsiGserverAdaptationPac response = api.retrieveContextConnectivityContextConnectionRouteConnectionEndPointOtsiAssemblyConnectionEndPointSpecOtsiAdapterOtsiAdapter(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve otsi-assembly-connection-end-point-spec
     *
     * Retrieve operation of resource: otsi-assembly-connection-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionRouteConnectionEndPointOtsiAssemblyConnectionEndPointSpecOtsiAssemblyConnectionEndPointSpecTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        OtsiAssemblyConnectionEndPointSpec response = api.retrieveContextConnectivityContextConnectionRouteConnectionEndPointOtsiAssemblyConnectionEndPointSpecOtsiAssemblyConnectionEndPointSpec(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve otsi-connection-end-point-spec
     *
     * Retrieve operation of resource: otsi-connection-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionRouteConnectionEndPointOtsiConnectionEndPointSpecOtsiConnectionEndPointSpecTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        OtsiConnectionEndPointSpec response = api.retrieveContextConnectivityContextConnectionRouteConnectionEndPointOtsiConnectionEndPointSpecOtsiConnectionEndPointSpec(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve laser-properties
     *
     * Retrieve operation of resource: laser-properties
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionRouteConnectionEndPointOtsiConnectionEndPointSpecOtsiTerminationLaserPropertiesLaserPropertiesTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        LaserPropertiesPac response = api.retrieveContextConnectivityContextConnectionRouteConnectionEndPointOtsiConnectionEndPointSpecOtsiTerminationLaserPropertiesLaserProperties(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve otsi-termination
     *
     * Retrieve operation of resource: otsi-termination
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionRouteConnectionEndPointOtsiConnectionEndPointSpecOtsiTerminationOtsiTerminationTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        OtsiTerminationPac response = api.retrieveContextConnectivityContextConnectionRouteConnectionEndPointOtsiConnectionEndPointSpecOtsiTerminationOtsiTermination(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve received-power
     *
     * Retrieve operation of resource: received-power
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionRouteConnectionEndPointOtsiConnectionEndPointSpecOtsiTerminationReceivedPowerReceivedPowerTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        PowerPropertiesPac response = api.retrieveContextConnectivityContextConnectionRouteConnectionEndPointOtsiConnectionEndPointSpecOtsiTerminationReceivedPowerReceivedPower(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve selected-application-identifier
     *
     * Retrieve operation of resource: selected-application-identifier
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionRouteConnectionEndPointOtsiConnectionEndPointSpecOtsiTerminationSelectedApplicationIdentifierSelectedApplicationIdentifierTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        ApplicationIdentifier response = api.retrieveContextConnectivityContextConnectionRouteConnectionEndPointOtsiConnectionEndPointSpecOtsiTerminationSelectedApplicationIdentifierSelectedApplicationIdentifier(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve frequency-constraint
     *
     * Retrieve operation of resource: frequency-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionRouteConnectionEndPointOtsiConnectionEndPointSpecOtsiTerminationSelectedCentralFrequencyFrequencyConstraintFrequencyConstraintTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        FrequencyConstraint response = api.retrieveContextConnectivityContextConnectionRouteConnectionEndPointOtsiConnectionEndPointSpecOtsiTerminationSelectedCentralFrequencyFrequencyConstraintFrequencyConstraint(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve selected-central-frequency
     *
     * Retrieve operation of resource: selected-central-frequency
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionRouteConnectionEndPointOtsiConnectionEndPointSpecOtsiTerminationSelectedCentralFrequencySelectedCentralFrequencyTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        CentralFrequency response = api.retrieveContextConnectivityContextConnectionRouteConnectionEndPointOtsiConnectionEndPointSpecOtsiTerminationSelectedCentralFrequencySelectedCentralFrequency(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve frequency-constraint
     *
     * Retrieve operation of resource: frequency-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionRouteConnectionEndPointOtsiConnectionEndPointSpecOtsiTerminationSelectedSpectrumFrequencyConstraintFrequencyConstraintTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        FrequencyConstraint response = api.retrieveContextConnectivityContextConnectionRouteConnectionEndPointOtsiConnectionEndPointSpecOtsiTerminationSelectedSpectrumFrequencyConstraintFrequencyConstraint(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve selected-spectrum
     *
     * Retrieve operation of resource: selected-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionRouteConnectionEndPointOtsiConnectionEndPointSpecOtsiTerminationSelectedSpectrumSelectedSpectrumTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        SpectrumBand response = api.retrieveContextConnectivityContextConnectionRouteConnectionEndPointOtsiConnectionEndPointSpecOtsiTerminationSelectedSpectrumSelectedSpectrum(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve transmited-power
     *
     * Retrieve operation of resource: transmited-power
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionRouteConnectionEndPointOtsiConnectionEndPointSpecOtsiTerminationTransmitedPowerTransmitedPowerTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        PowerPropertiesPac response = api.retrieveContextConnectivityContextConnectionRouteConnectionEndPointOtsiConnectionEndPointSpecOtsiTerminationTransmitedPowerTransmitedPower(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve parent-node-edge-point
     *
     * Retrieve operation of resource: parent-node-edge-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionRouteConnectionEndPointParentNodeEdgePointParentNodeEdgePointTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        NodeEdgePointRef response = api.retrieveContextConnectivityContextConnectionRouteConnectionEndPointParentNodeEdgePointParentNodeEdgePoint(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve sdm-connection-end-point-spec
     *
     * Retrieve operation of resource: sdm-connection-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionRouteConnectionEndPointSdmConnectionEndPointSpecSdmConnectionEndPointSpecTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        SdmConnectionEndPointSpec response = api.retrieveContextConnectivityContextConnectionRouteConnectionEndPointSdmConnectionEndPointSpecSdmConnectionEndPointSpec(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve frequency-constraint
     *
     * Retrieve operation of resource: frequency-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionRouteConnectionEndPointSdmConnectionEndPointSpecSdmOccupiedSpectrumFrequencyConstraintFrequencyConstraintTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        FrequencyConstraint response = api.retrieveContextConnectivityContextConnectionRouteConnectionEndPointSdmConnectionEndPointSpecSdmOccupiedSpectrumFrequencyConstraintFrequencyConstraint(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve occupied-spectrum
     *
     * Retrieve operation of resource: occupied-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionRouteConnectionEndPointSdmConnectionEndPointSpecSdmOccupiedSpectrumOccupiedSpectrumTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        SpectrumBand response = api.retrieveContextConnectivityContextConnectionRouteConnectionEndPointSdmConnectionEndPointSpecSdmOccupiedSpectrumOccupiedSpectrum(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve sdm
     *
     * Retrieve operation of resource: sdm
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionRouteConnectionEndPointSdmConnectionEndPointSpecSdmSdmTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        SdmPropertiesPac response = api.retrieveContextConnectivityContextConnectionRouteConnectionEndPointSdmConnectionEndPointSpecSdmSdm(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionRouteNameNameTest() throws ApiException {
        String uuid = null;
        String localId = null;
        List<String> response = api.retrieveContextConnectivityContextConnectionRouteNameName(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve name by ID
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionRouteNameNameByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String valueName = null;
        NameAndValue response = api.retrieveContextConnectivityContextConnectionRouteNameNameById(uuid, localId, valueName);

        // TODO: test validations
    }
    
    /**
     * Retrieve route
     *
     * Retrieve operation of resource: route
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionRouteRouteTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextConnectivityContextConnectionRouteRoute(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve route by ID
     *
     * Retrieve operation of resource: route
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionRouteRouteByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        Route response = api.retrieveContextConnectivityContextConnectionRouteRouteById(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve supported-client-link
     *
     * Retrieve operation of resource: supported-client-link
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionSupportedClientLinkSupportedClientLinkTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextConnectivityContextConnectionSupportedClientLinkSupportedClientLink(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve supported-client-link by ID
     *
     * Retrieve operation of resource: supported-client-link
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionSupportedClientLinkSupportedClientLinkByIdTest() throws ApiException {
        String uuid = null;
        String topologyUuidLinkUuid = null;
        LinkRef response = api.retrieveContextConnectivityContextConnectionSupportedClientLinkSupportedClientLinkById(uuid, topologyUuidLinkUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionSwitchControlNameNameTest() throws ApiException {
        String uuid = null;
        String switchControlUuid = null;
        List<String> response = api.retrieveContextConnectivityContextConnectionSwitchControlNameName(uuid, switchControlUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name by ID
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionSwitchControlNameNameByIdTest() throws ApiException {
        String uuid = null;
        String switchControlUuid = null;
        String valueName = null;
        NameAndValue response = api.retrieveContextConnectivityContextConnectionSwitchControlNameNameById(uuid, switchControlUuid, valueName);

        // TODO: test validations
    }
    
    /**
     * Retrieve resilience-type
     *
     * Retrieve operation of resource: resilience-type
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionSwitchControlResilienceTypeResilienceTypeTest() throws ApiException {
        String uuid = null;
        String switchControlUuid = null;
        ResilienceType response = api.retrieveContextConnectivityContextConnectionSwitchControlResilienceTypeResilienceType(uuid, switchControlUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve sub-switch-control
     *
     * Retrieve operation of resource: sub-switch-control
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionSwitchControlSubSwitchControlSubSwitchControlTest() throws ApiException {
        String uuid = null;
        String switchControlUuid = null;
        List<String> response = api.retrieveContextConnectivityContextConnectionSwitchControlSubSwitchControlSubSwitchControl(uuid, switchControlUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve sub-switch-control by ID
     *
     * Retrieve operation of resource: sub-switch-control
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionSwitchControlSubSwitchControlSubSwitchControlByIdTest() throws ApiException {
        String uuid = null;
        String switchControlUuid = null;
        String connectionUuidSwitchControlUuid = null;
        SwitchControlRef response = api.retrieveContextConnectivityContextConnectionSwitchControlSubSwitchControlSubSwitchControlById(uuid, switchControlUuid, connectionUuidSwitchControlUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve switch-control
     *
     * Retrieve operation of resource: switch-control
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionSwitchControlSwitchControlTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextConnectivityContextConnectionSwitchControlSwitchControl(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve switch-control by ID
     *
     * Retrieve operation of resource: switch-control
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionSwitchControlSwitchControlByIdTest() throws ApiException {
        String uuid = null;
        String switchControlUuid = null;
        SwitchControl response = api.retrieveContextConnectivityContextConnectionSwitchControlSwitchControlById(uuid, switchControlUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionSwitchControlSwitchNameNameTest() throws ApiException {
        String uuid = null;
        String switchControlUuid = null;
        String localId = null;
        List<String> response = api.retrieveContextConnectivityContextConnectionSwitchControlSwitchNameName(uuid, switchControlUuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve name by ID
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionSwitchControlSwitchNameNameByIdTest() throws ApiException {
        String uuid = null;
        String switchControlUuid = null;
        String localId = null;
        String valueName = null;
        NameAndValue response = api.retrieveContextConnectivityContextConnectionSwitchControlSwitchNameNameById(uuid, switchControlUuid, localId, valueName);

        // TODO: test validations
    }
    
    /**
     * Retrieve selected-connection-end-point
     *
     * Retrieve operation of resource: selected-connection-end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedConnectionEndPointSelectedConnectionEndPointTest() throws ApiException {
        String uuid = null;
        String switchControlUuid = null;
        String localId = null;
        List<String> response = api.retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedConnectionEndPointSelectedConnectionEndPoint(uuid, switchControlUuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve selected-connection-end-point by ID
     *
     * Retrieve operation of resource: selected-connection-end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedConnectionEndPointSelectedConnectionEndPointByIdTest() throws ApiException {
        String uuid = null;
        String switchControlUuid = null;
        String localId = null;
        String topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid = null;
        ConnectionEndPointRef response = api.retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedConnectionEndPointSelectedConnectionEndPointById(uuid, switchControlUuid, localId, topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve selected-route
     *
     * Retrieve operation of resource: selected-route
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedRouteSelectedRouteTest() throws ApiException {
        String uuid = null;
        String switchControlUuid = null;
        String localId = null;
        List<String> response = api.retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedRouteSelectedRoute(uuid, switchControlUuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve selected-route by ID
     *
     * Retrieve operation of resource: selected-route
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedRouteSelectedRouteByIdTest() throws ApiException {
        String uuid = null;
        String switchControlUuid = null;
        String localId = null;
        String connectionUuidRouteLocalId = null;
        RouteRef response = api.retrieveContextConnectivityContextConnectionSwitchControlSwitchSelectedRouteSelectedRouteById(uuid, switchControlUuid, localId, connectionUuidRouteLocalId);

        // TODO: test validations
    }
    
    /**
     * Retrieve switch
     *
     * Retrieve operation of resource: switch
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionSwitchControlSwitchSwitchTest() throws ApiException {
        String uuid = null;
        String switchControlUuid = null;
        List<String> response = api.retrieveContextConnectivityContextConnectionSwitchControlSwitchSwitch(uuid, switchControlUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve switch by ID
     *
     * Retrieve operation of resource: switch
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectionSwitchControlSwitchSwitchByIdTest() throws ApiException {
        String uuid = null;
        String switchControlUuid = null;
        String localId = null;
        ModelSwitch response = api.retrieveContextConnectivityContextConnectionSwitchControlSwitchSwitchById(uuid, switchControlUuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve connectivity-context
     *
     * Retrieve operation of resource: connectivity-context
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityContextTest() throws ApiException {
        ConnectivityContext response = api.retrieveContextConnectivityContextConnectivityContext();

        // TODO: test validations
    }
    
    /**
     * Retrieve connection
     *
     * Retrieve operation of resource: connection
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceConnectionConnectionTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextConnectivityContextConnectivityServiceConnectionConnection(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve connection by ID
     *
     * Retrieve operation of resource: connection
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceConnectionConnectionByIdTest() throws ApiException {
        String uuid = null;
        String connectionUuid = null;
        ConnectionRef response = api.retrieveContextConnectivityContextConnectivityServiceConnectionConnectionById(uuid, connectionUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve connectivity-service
     *
     * Retrieve operation of resource: connectivity-service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceConnectivityServiceTest() throws ApiException {
        List<String> response = api.retrieveContextConnectivityContextConnectivityServiceConnectivityService();

        // TODO: test validations
    }
    
    /**
     * Retrieve connectivity-service by ID
     *
     * Retrieve operation of resource: connectivity-service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceConnectivityServiceByIdTest() throws ApiException {
        String uuid = null;
        ConnectivityServiceSchema response = api.retrieveContextConnectivityContextConnectivityServiceConnectivityServiceById(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve coroute-inclusion
     *
     * Retrieve operation of resource: coroute-inclusion
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceCorouteInclusionCorouteInclusionTest() throws ApiException {
        String uuid = null;
        ConnectivityServiceRef response = api.retrieveContextConnectivityContextConnectivityServiceCorouteInclusionCorouteInclusion(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve cost-characteristic
     *
     * Retrieve operation of resource: cost-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristic(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve cost-characteristic by ID
     *
     * Retrieve operation of resource: cost-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String costName = null;
        CostCharacteristic response = api.retrieveContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicById(uuid, costName);

        // TODO: test validations
    }
    
    /**
     * Retrieve diversity-exclusion
     *
     * Retrieve operation of resource: diversity-exclusion
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusion(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve diversity-exclusion by ID
     *
     * Retrieve operation of resource: diversity-exclusion
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionByIdTest() throws ApiException {
        String uuid = null;
        String connectivityServiceUuid = null;
        ConnectivityServiceRef response = api.retrieveContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionById(uuid, connectivityServiceUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve bandwidth-profile
     *
     * Retrieve operation of resource: bandwidth-profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileTest() throws ApiException {
        String uuid = null;
        String localId = null;
        BandwidthProfile response = api.retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfile(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-burst-size
     *
     * Retrieve operation of resource: committed-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeTest() throws ApiException {
        String uuid = null;
        String localId = null;
        CapacityValue response = api.retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-information-rate
     *
     * Retrieve operation of resource: committed-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateTest() throws ApiException {
        String uuid = null;
        String localId = null;
        CapacityValue response = api.retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-burst-size
     *
     * Retrieve operation of resource: peak-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeTest() throws ApiException {
        String uuid = null;
        String localId = null;
        CapacityValue response = api.retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSize(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-information-rate
     *
     * Retrieve operation of resource: peak-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateTest() throws ApiException {
        String uuid = null;
        String localId = null;
        CapacityValue response = api.retrieveContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRate(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve capacity
     *
     * Retrieve operation of resource: capacity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointCapacityCapacityTest() throws ApiException {
        String uuid = null;
        String localId = null;
        Capacity response = api.retrieveContextConnectivityContextConnectivityServiceEndPointCapacityCapacity(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve total-size
     *
     * Retrieve operation of resource: total-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeTest() throws ApiException {
        String uuid = null;
        String localId = null;
        CapacityValue response = api.retrieveContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSize(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve aggregated-connection-end-point
     *
     * Retrieve operation of resource: aggregated-connection-end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        List<String> response = api.retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPoint(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve aggregated-connection-end-point by ID
     *
     * Retrieve operation of resource: aggregated-connection-end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        String topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid = null;
        ConnectionEndPointRef response = api.retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointById(uuid, localId, connectionEndPointUuid, topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve client-node-edge-point
     *
     * Retrieve operation of resource: client-node-edge-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointClientNodeEdgePointClientNodeEdgePointTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        List<String> response = api.retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointClientNodeEdgePointClientNodeEdgePoint(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve client-node-edge-point by ID
     *
     * Retrieve operation of resource: client-node-edge-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointClientNodeEdgePointClientNodeEdgePointByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        String topologyUuidNodeUuidNodeEdgePointUuid = null;
        NodeEdgePointRef response = api.retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointClientNodeEdgePointClientNodeEdgePointById(uuid, localId, connectionEndPointUuid, topologyUuidNodeUuidNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve connection-end-point
     *
     * Retrieve operation of resource: connection-end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointTest() throws ApiException {
        String uuid = null;
        String localId = null;
        List<String> response = api.retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPoint(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve connection-end-point by ID
     *
     * Retrieve operation of resource: connection-end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid = null;
        ConnectionEndPointRef response = api.retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointById(uuid, localId, topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve connection-end-point by ID
     *
     * Retrieve operation of resource: connection-end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointById_0Test() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        ConnectionEndPointSchema response = api.retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointById_0(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve media-channel-assembly-spec
     *
     * Retrieve operation of resource: media-channel-assembly-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointMediaChannelAssemblySpecMediaChannelAssemblySpecTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        MediaChannelAssemblySpec response = api.retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointMediaChannelAssemblySpecMediaChannelAssemblySpec(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve media-channel-connection-end-point-spec
     *
     * Retrieve operation of resource: media-channel-connection-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointMediaChannelConnectionEndPointSpecMediaChannelConnectionEndPointSpecTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        MediaChannelConnectionEndPointSpec response = api.retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointMediaChannelConnectionEndPointSpecMediaChannelConnectionEndPointSpec(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve measured-power-egress
     *
     * Retrieve operation of resource: measured-power-egress
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointMediaChannelConnectionEndPointSpecMediaChannelMeasuredPowerEgressMeasuredPowerEgressTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        PowerPropertiesPac response = api.retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointMediaChannelConnectionEndPointSpecMediaChannelMeasuredPowerEgressMeasuredPowerEgress(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve measured-power-ingress
     *
     * Retrieve operation of resource: measured-power-ingress
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointMediaChannelConnectionEndPointSpecMediaChannelMeasuredPowerIngressMeasuredPowerIngressTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        PowerPropertiesPac response = api.retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointMediaChannelConnectionEndPointSpecMediaChannelMeasuredPowerIngressMeasuredPowerIngress(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve media-channel
     *
     * Retrieve operation of resource: media-channel
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointMediaChannelConnectionEndPointSpecMediaChannelMediaChannelTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        MediaChannelPropertiesPac response = api.retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointMediaChannelConnectionEndPointSpecMediaChannelMediaChannel(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve frequency-constraint
     *
     * Retrieve operation of resource: frequency-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointMediaChannelConnectionEndPointSpecMediaChannelOccupiedSpectrumFrequencyConstraintFrequencyConstraintTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        FrequencyConstraint response = api.retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointMediaChannelConnectionEndPointSpecMediaChannelOccupiedSpectrumFrequencyConstraintFrequencyConstraint(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve occupied-spectrum
     *
     * Retrieve operation of resource: occupied-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointMediaChannelConnectionEndPointSpecMediaChannelOccupiedSpectrumOccupiedSpectrumTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        SpectrumBand response = api.retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointMediaChannelConnectionEndPointSpecMediaChannelOccupiedSpectrumOccupiedSpectrum(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointNameNameTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        List<String> response = api.retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointNameName(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name by ID
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointNameNameByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        String valueName = null;
        NameAndValue response = api.retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointNameNameById(uuid, localId, connectionEndPointUuid, valueName);

        // TODO: test validations
    }
    
    /**
     * Retrieve ots-connection-end-point-spec
     *
     * Retrieve operation of resource: ots-connection-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointOtsConnectionEndPointSpecOtsConnectionEndPointSpecTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        OtsConnectionEndPointSpec response = api.retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointOtsConnectionEndPointSpecOtsConnectionEndPointSpec(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve measured-power-egress
     *
     * Retrieve operation of resource: measured-power-egress
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointOtsConnectionEndPointSpecOtsMediaChannelMeasuredPowerEgressMeasuredPowerEgressTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        PowerPropertiesPac response = api.retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointOtsConnectionEndPointSpecOtsMediaChannelMeasuredPowerEgressMeasuredPowerEgress(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve measured-power-ingress
     *
     * Retrieve operation of resource: measured-power-ingress
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointOtsConnectionEndPointSpecOtsMediaChannelMeasuredPowerIngressMeasuredPowerIngressTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        PowerPropertiesPac response = api.retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointOtsConnectionEndPointSpecOtsMediaChannelMeasuredPowerIngressMeasuredPowerIngress(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve frequency-constraint
     *
     * Retrieve operation of resource: frequency-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointOtsConnectionEndPointSpecOtsMediaChannelOccupiedSpectrumFrequencyConstraintFrequencyConstraintTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        FrequencyConstraint response = api.retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointOtsConnectionEndPointSpecOtsMediaChannelOccupiedSpectrumFrequencyConstraintFrequencyConstraint(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve occupied-spectrum
     *
     * Retrieve operation of resource: occupied-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointOtsConnectionEndPointSpecOtsMediaChannelOccupiedSpectrumOccupiedSpectrumTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        SpectrumBand response = api.retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointOtsConnectionEndPointSpecOtsMediaChannelOccupiedSpectrumOccupiedSpectrum(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve ots-media-channel
     *
     * Retrieve operation of resource: ots-media-channel
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointOtsConnectionEndPointSpecOtsMediaChannelOtsMediaChannelTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        MediaChannelPropertiesPac response = api.retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointOtsConnectionEndPointSpecOtsMediaChannelOtsMediaChannel(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve fec-parameters
     *
     * Retrieve operation of resource: fec-parameters
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointOtsiAssemblyConnectionEndPointSpecFecParametersFecParametersTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        FecPropertiesPac response = api.retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointOtsiAssemblyConnectionEndPointSpecFecParametersFecParameters(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve otsi-adapter
     *
     * Retrieve operation of resource: otsi-adapter
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointOtsiAssemblyConnectionEndPointSpecOtsiAdapterOtsiAdapterTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        OtsiGserverAdaptationPac response = api.retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointOtsiAssemblyConnectionEndPointSpecOtsiAdapterOtsiAdapter(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve otsi-assembly-connection-end-point-spec
     *
     * Retrieve operation of resource: otsi-assembly-connection-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointOtsiAssemblyConnectionEndPointSpecOtsiAssemblyConnectionEndPointSpecTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        OtsiAssemblyConnectionEndPointSpec response = api.retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointOtsiAssemblyConnectionEndPointSpecOtsiAssemblyConnectionEndPointSpec(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve otsi-connection-end-point-spec
     *
     * Retrieve operation of resource: otsi-connection-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointOtsiConnectionEndPointSpecOtsiConnectionEndPointSpecTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        OtsiConnectionEndPointSpec response = api.retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointOtsiConnectionEndPointSpecOtsiConnectionEndPointSpec(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve laser-properties
     *
     * Retrieve operation of resource: laser-properties
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointOtsiConnectionEndPointSpecOtsiTerminationLaserPropertiesLaserPropertiesTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        LaserPropertiesPac response = api.retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointOtsiConnectionEndPointSpecOtsiTerminationLaserPropertiesLaserProperties(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve otsi-termination
     *
     * Retrieve operation of resource: otsi-termination
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointOtsiConnectionEndPointSpecOtsiTerminationOtsiTerminationTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        OtsiTerminationPac response = api.retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointOtsiConnectionEndPointSpecOtsiTerminationOtsiTermination(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve received-power
     *
     * Retrieve operation of resource: received-power
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointOtsiConnectionEndPointSpecOtsiTerminationReceivedPowerReceivedPowerTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        PowerPropertiesPac response = api.retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointOtsiConnectionEndPointSpecOtsiTerminationReceivedPowerReceivedPower(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve selected-application-identifier
     *
     * Retrieve operation of resource: selected-application-identifier
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointOtsiConnectionEndPointSpecOtsiTerminationSelectedApplicationIdentifierSelectedApplicationIdentifierTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        ApplicationIdentifier response = api.retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointOtsiConnectionEndPointSpecOtsiTerminationSelectedApplicationIdentifierSelectedApplicationIdentifier(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve frequency-constraint
     *
     * Retrieve operation of resource: frequency-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointOtsiConnectionEndPointSpecOtsiTerminationSelectedCentralFrequencyFrequencyConstraintFrequencyConstraintTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        FrequencyConstraint response = api.retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointOtsiConnectionEndPointSpecOtsiTerminationSelectedCentralFrequencyFrequencyConstraintFrequencyConstraint(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve selected-central-frequency
     *
     * Retrieve operation of resource: selected-central-frequency
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointOtsiConnectionEndPointSpecOtsiTerminationSelectedCentralFrequencySelectedCentralFrequencyTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        CentralFrequency response = api.retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointOtsiConnectionEndPointSpecOtsiTerminationSelectedCentralFrequencySelectedCentralFrequency(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve frequency-constraint
     *
     * Retrieve operation of resource: frequency-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointOtsiConnectionEndPointSpecOtsiTerminationSelectedSpectrumFrequencyConstraintFrequencyConstraintTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        FrequencyConstraint response = api.retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointOtsiConnectionEndPointSpecOtsiTerminationSelectedSpectrumFrequencyConstraintFrequencyConstraint(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve selected-spectrum
     *
     * Retrieve operation of resource: selected-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointOtsiConnectionEndPointSpecOtsiTerminationSelectedSpectrumSelectedSpectrumTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        SpectrumBand response = api.retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointOtsiConnectionEndPointSpecOtsiTerminationSelectedSpectrumSelectedSpectrum(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve transmited-power
     *
     * Retrieve operation of resource: transmited-power
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointOtsiConnectionEndPointSpecOtsiTerminationTransmitedPowerTransmitedPowerTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        PowerPropertiesPac response = api.retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointOtsiConnectionEndPointSpecOtsiTerminationTransmitedPowerTransmitedPower(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve parent-node-edge-point
     *
     * Retrieve operation of resource: parent-node-edge-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointParentNodeEdgePointParentNodeEdgePointTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        NodeEdgePointRef response = api.retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointParentNodeEdgePointParentNodeEdgePoint(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve sdm-connection-end-point-spec
     *
     * Retrieve operation of resource: sdm-connection-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointSdmConnectionEndPointSpecSdmConnectionEndPointSpecTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        SdmConnectionEndPointSpec response = api.retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointSdmConnectionEndPointSpecSdmConnectionEndPointSpec(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve frequency-constraint
     *
     * Retrieve operation of resource: frequency-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointSdmConnectionEndPointSpecSdmOccupiedSpectrumFrequencyConstraintFrequencyConstraintTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        FrequencyConstraint response = api.retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointSdmConnectionEndPointSpecSdmOccupiedSpectrumFrequencyConstraintFrequencyConstraint(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve occupied-spectrum
     *
     * Retrieve operation of resource: occupied-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointSdmConnectionEndPointSpecSdmOccupiedSpectrumOccupiedSpectrumTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        SpectrumBand response = api.retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointSdmConnectionEndPointSpecSdmOccupiedSpectrumOccupiedSpectrum(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve sdm
     *
     * Retrieve operation of resource: sdm
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointSdmConnectionEndPointSpecSdmSdmTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        SdmPropertiesPac response = api.retrieveContextConnectivityContextConnectivityServiceEndPointConnectionEndPointSdmConnectionEndPointSpecSdmSdm(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve end-point
     *
     * Retrieve operation of resource: end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointEndPointTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextConnectivityContextConnectivityServiceEndPointEndPoint(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve end-point by ID
     *
     * Retrieve operation of resource: end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointEndPointByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        EndPointSchema response = api.retrieveContextConnectivityContextConnectivityServiceEndPointEndPointById(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve available-spectrum
     *
     * Retrieve operation of resource: available-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointMediaChannelServiceInterfacePointSpecMcPoolAvailableSpectrumAvailableSpectrumTest() throws ApiException {
        String uuid = null;
        String localId = null;
        List<String> response = api.retrieveContextConnectivityContextConnectivityServiceEndPointMediaChannelServiceInterfacePointSpecMcPoolAvailableSpectrumAvailableSpectrum(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve available-spectrum by ID
     *
     * Retrieve operation of resource: available-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointMediaChannelServiceInterfacePointSpecMcPoolAvailableSpectrumAvailableSpectrumByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String upperFrequencyLowerFrequency = null;
        SpectrumBand response = api.retrieveContextConnectivityContextConnectivityServiceEndPointMediaChannelServiceInterfacePointSpecMcPoolAvailableSpectrumAvailableSpectrumById(uuid, localId, upperFrequencyLowerFrequency);

        // TODO: test validations
    }
    
    /**
     * Retrieve frequency-constraint
     *
     * Retrieve operation of resource: frequency-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointMediaChannelServiceInterfacePointSpecMcPoolAvailableSpectrumFrequencyConstraintFrequencyConstraintTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String upperFrequencyLowerFrequency = null;
        FrequencyConstraint response = api.retrieveContextConnectivityContextConnectivityServiceEndPointMediaChannelServiceInterfacePointSpecMcPoolAvailableSpectrumFrequencyConstraintFrequencyConstraint(uuid, localId, upperFrequencyLowerFrequency);

        // TODO: test validations
    }
    
    /**
     * Retrieve mc-pool
     *
     * Retrieve operation of resource: mc-pool
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointMediaChannelServiceInterfacePointSpecMcPoolMcPoolTest() throws ApiException {
        String uuid = null;
        String localId = null;
        MediaChannelPoolCapabilityPac response = api.retrieveContextConnectivityContextConnectivityServiceEndPointMediaChannelServiceInterfacePointSpecMcPoolMcPool(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve frequency-constraint
     *
     * Retrieve operation of resource: frequency-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointMediaChannelServiceInterfacePointSpecMcPoolOccupiedSpectrumFrequencyConstraintFrequencyConstraintTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String upperFrequencyLowerFrequency = null;
        FrequencyConstraint response = api.retrieveContextConnectivityContextConnectivityServiceEndPointMediaChannelServiceInterfacePointSpecMcPoolOccupiedSpectrumFrequencyConstraintFrequencyConstraint(uuid, localId, upperFrequencyLowerFrequency);

        // TODO: test validations
    }
    
    /**
     * Retrieve occupied-spectrum
     *
     * Retrieve operation of resource: occupied-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointMediaChannelServiceInterfacePointSpecMcPoolOccupiedSpectrumOccupiedSpectrumTest() throws ApiException {
        String uuid = null;
        String localId = null;
        List<String> response = api.retrieveContextConnectivityContextConnectivityServiceEndPointMediaChannelServiceInterfacePointSpecMcPoolOccupiedSpectrumOccupiedSpectrum(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve occupied-spectrum by ID
     *
     * Retrieve operation of resource: occupied-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointMediaChannelServiceInterfacePointSpecMcPoolOccupiedSpectrumOccupiedSpectrumByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String upperFrequencyLowerFrequency = null;
        SpectrumBand response = api.retrieveContextConnectivityContextConnectivityServiceEndPointMediaChannelServiceInterfacePointSpecMcPoolOccupiedSpectrumOccupiedSpectrumById(uuid, localId, upperFrequencyLowerFrequency);

        // TODO: test validations
    }
    
    /**
     * Retrieve frequency-constraint
     *
     * Retrieve operation of resource: frequency-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointMediaChannelServiceInterfacePointSpecMcPoolSupportableSpectrumFrequencyConstraintFrequencyConstraintTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String upperFrequencyLowerFrequency = null;
        FrequencyConstraint response = api.retrieveContextConnectivityContextConnectivityServiceEndPointMediaChannelServiceInterfacePointSpecMcPoolSupportableSpectrumFrequencyConstraintFrequencyConstraint(uuid, localId, upperFrequencyLowerFrequency);

        // TODO: test validations
    }
    
    /**
     * Retrieve supportable-spectrum
     *
     * Retrieve operation of resource: supportable-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointMediaChannelServiceInterfacePointSpecMcPoolSupportableSpectrumSupportableSpectrumTest() throws ApiException {
        String uuid = null;
        String localId = null;
        List<String> response = api.retrieveContextConnectivityContextConnectivityServiceEndPointMediaChannelServiceInterfacePointSpecMcPoolSupportableSpectrumSupportableSpectrum(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve supportable-spectrum by ID
     *
     * Retrieve operation of resource: supportable-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointMediaChannelServiceInterfacePointSpecMcPoolSupportableSpectrumSupportableSpectrumByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String upperFrequencyLowerFrequency = null;
        SpectrumBand response = api.retrieveContextConnectivityContextConnectivityServiceEndPointMediaChannelServiceInterfacePointSpecMcPoolSupportableSpectrumSupportableSpectrumById(uuid, localId, upperFrequencyLowerFrequency);

        // TODO: test validations
    }
    
    /**
     * Retrieve media-channel-service-interface-point-spec
     *
     * Retrieve operation of resource: media-channel-service-interface-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointMediaChannelServiceInterfacePointSpecMediaChannelServiceInterfacePointSpecTest() throws ApiException {
        String uuid = null;
        String localId = null;
        MediaChannelServiceInterfacePointSpec response = api.retrieveContextConnectivityContextConnectivityServiceEndPointMediaChannelServiceInterfacePointSpecMediaChannelServiceInterfacePointSpec(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve name
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointNameNameTest() throws ApiException {
        String uuid = null;
        String localId = null;
        List<String> response = api.retrieveContextConnectivityContextConnectivityServiceEndPointNameName(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve name by ID
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointNameNameByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String valueName = null;
        NameAndValue response = api.retrieveContextConnectivityContextConnectivityServiceEndPointNameNameById(uuid, localId, valueName);

        // TODO: test validations
    }
    
    /**
     * Retrieve application-identifier
     *
     * Retrieve operation of resource: application-identifier
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigApplicationIdentifierApplicationIdentifierTest() throws ApiException {
        String uuid = null;
        String localId = null;
        ApplicationIdentifier response = api.retrieveContextConnectivityContextConnectivityServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigApplicationIdentifierApplicationIdentifier(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve central-frequency
     *
     * Retrieve operation of resource: central-frequency
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigCentralFrequencyCentralFrequencyTest() throws ApiException {
        String uuid = null;
        String localId = null;
        CentralFrequency response = api.retrieveContextConnectivityContextConnectivityServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigCentralFrequencyCentralFrequency(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve frequency-constraint
     *
     * Retrieve operation of resource: frequency-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigCentralFrequencyFrequencyConstraintFrequencyConstraintTest() throws ApiException {
        String uuid = null;
        String localId = null;
        FrequencyConstraint response = api.retrieveContextConnectivityContextConnectivityServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigCentralFrequencyFrequencyConstraintFrequencyConstraint(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve otsi-config
     *
     * Retrieve operation of resource: otsi-config
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigOtsiConfigTest() throws ApiException {
        String uuid = null;
        String localId = null;
        OtsiTerminationConfigPac response = api.retrieveContextConnectivityContextConnectivityServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigOtsiConfig(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve frequency-constraint
     *
     * Retrieve operation of resource: frequency-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigSpectrumFrequencyConstraintFrequencyConstraintTest() throws ApiException {
        String uuid = null;
        String localId = null;
        FrequencyConstraint response = api.retrieveContextConnectivityContextConnectivityServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigSpectrumFrequencyConstraintFrequencyConstraint(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve spectrum
     *
     * Retrieve operation of resource: spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigSpectrumSpectrumTest() throws ApiException {
        String uuid = null;
        String localId = null;
        SpectrumBand response = api.retrieveContextConnectivityContextConnectivityServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigSpectrumSpectrum(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve transmit-power
     *
     * Retrieve operation of resource: transmit-power
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigTransmitPowerTransmitPowerTest() throws ApiException {
        String uuid = null;
        String localId = null;
        PowerPropertiesPac response = api.retrieveContextConnectivityContextConnectivityServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigTransmitPowerTransmitPower(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve otsi-connectivity-service-end-point-spec
     *
     * Retrieve operation of resource: otsi-connectivity-service-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConnectivityServiceEndPointSpecTest() throws ApiException {
        String uuid = null;
        String localId = null;
        OtsiConnectivityServiceEndPointSpec response = api.retrieveContextConnectivityContextConnectivityServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConnectivityServiceEndPointSpec(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve available-core
     *
     * Retrieve operation of resource: available-core
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableCoreTest() throws ApiException {
        String uuid = null;
        String localId = null;
        List<String> response = api.retrieveContextConnectivityContextConnectivityServiceEndPointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableCore(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve available-core by ID
     *
     * Retrieve operation of resource: available-core
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableCoreByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String coreId = null;
        SdmCorePac response = api.retrieveContextConnectivityContextConnectivityServiceEndPointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableCoreById(uuid, localId, coreId);

        // TODO: test validations
    }
    
    /**
     * Retrieve available-mode
     *
     * Retrieve operation of resource: available-mode
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeAvailableModeTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String coreId = null;
        List<String> response = api.retrieveContextConnectivityContextConnectivityServiceEndPointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeAvailableMode(uuid, localId, coreId);

        // TODO: test validations
    }
    
    /**
     * Retrieve available-mode by ID
     *
     * Retrieve operation of resource: available-mode
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeAvailableModeByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String coreId = null;
        String modeId = null;
        SdmModePac response = api.retrieveContextConnectivityContextConnectivityServiceEndPointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeAvailableModeById(uuid, localId, coreId, modeId);

        // TODO: test validations
    }
    
    /**
     * Retrieve available-spectrum
     *
     * Retrieve operation of resource: available-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeAvailableSpectrumAvailableSpectrumTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String coreId = null;
        String modeId = null;
        List<String> response = api.retrieveContextConnectivityContextConnectivityServiceEndPointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeAvailableSpectrumAvailableSpectrum(uuid, localId, coreId, modeId);

        // TODO: test validations
    }
    
    /**
     * Retrieve available-spectrum by ID
     *
     * Retrieve operation of resource: available-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeAvailableSpectrumAvailableSpectrumByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String coreId = null;
        String modeId = null;
        String upperFrequencyLowerFrequency = null;
        SpectrumBand response = api.retrieveContextConnectivityContextConnectivityServiceEndPointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeAvailableSpectrumAvailableSpectrumById(uuid, localId, coreId, modeId, upperFrequencyLowerFrequency);

        // TODO: test validations
    }
    
    /**
     * Retrieve frequency-constraint
     *
     * Retrieve operation of resource: frequency-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeAvailableSpectrumFrequencyConstraintFrequencyConstraintTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String coreId = null;
        String modeId = null;
        String upperFrequencyLowerFrequency = null;
        FrequencyConstraint response = api.retrieveContextConnectivityContextConnectivityServiceEndPointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeAvailableSpectrumFrequencyConstraintFrequencyConstraint(uuid, localId, coreId, modeId, upperFrequencyLowerFrequency);

        // TODO: test validations
    }
    
    /**
     * Retrieve frequency-constraint
     *
     * Retrieve operation of resource: frequency-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeOccupiedSpectrumFrequencyConstraintFrequencyConstraintTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String coreId = null;
        String modeId = null;
        String upperFrequencyLowerFrequency = null;
        FrequencyConstraint response = api.retrieveContextConnectivityContextConnectivityServiceEndPointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeOccupiedSpectrumFrequencyConstraintFrequencyConstraint(uuid, localId, coreId, modeId, upperFrequencyLowerFrequency);

        // TODO: test validations
    }
    
    /**
     * Retrieve occupied-spectrum
     *
     * Retrieve operation of resource: occupied-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeOccupiedSpectrumOccupiedSpectrumTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String coreId = null;
        String modeId = null;
        List<String> response = api.retrieveContextConnectivityContextConnectivityServiceEndPointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeOccupiedSpectrumOccupiedSpectrum(uuid, localId, coreId, modeId);

        // TODO: test validations
    }
    
    /**
     * Retrieve occupied-spectrum by ID
     *
     * Retrieve operation of resource: occupied-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeOccupiedSpectrumOccupiedSpectrumByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String coreId = null;
        String modeId = null;
        String upperFrequencyLowerFrequency = null;
        SpectrumBand response = api.retrieveContextConnectivityContextConnectivityServiceEndPointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeOccupiedSpectrumOccupiedSpectrumById(uuid, localId, coreId, modeId, upperFrequencyLowerFrequency);

        // TODO: test validations
    }
    
    /**
     * Retrieve frequency-constraint
     *
     * Retrieve operation of resource: frequency-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeSupportableSpectrumFrequencyConstraintFrequencyConstraintTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String coreId = null;
        String modeId = null;
        String upperFrequencyLowerFrequency = null;
        FrequencyConstraint response = api.retrieveContextConnectivityContextConnectivityServiceEndPointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeSupportableSpectrumFrequencyConstraintFrequencyConstraint(uuid, localId, coreId, modeId, upperFrequencyLowerFrequency);

        // TODO: test validations
    }
    
    /**
     * Retrieve supportable-spectrum
     *
     * Retrieve operation of resource: supportable-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeSupportableSpectrumSupportableSpectrumTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String coreId = null;
        String modeId = null;
        List<String> response = api.retrieveContextConnectivityContextConnectivityServiceEndPointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeSupportableSpectrumSupportableSpectrum(uuid, localId, coreId, modeId);

        // TODO: test validations
    }
    
    /**
     * Retrieve supportable-spectrum by ID
     *
     * Retrieve operation of resource: supportable-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeSupportableSpectrumSupportableSpectrumByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String coreId = null;
        String modeId = null;
        String upperFrequencyLowerFrequency = null;
        SpectrumBand response = api.retrieveContextConnectivityContextConnectivityServiceEndPointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeSupportableSpectrumSupportableSpectrumById(uuid, localId, coreId, modeId, upperFrequencyLowerFrequency);

        // TODO: test validations
    }
    
    /**
     * Retrieve available-transceiver
     *
     * Retrieve operation of resource: available-transceiver
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverAvailableTransceiverTest() throws ApiException {
        String uuid = null;
        String localId = null;
        AvailableTransceiver response = api.retrieveContextConnectivityContextConnectivityServiceEndPointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverAvailableTransceiver(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve core-id
     *
     * Retrieve operation of resource: core-id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverCoreModeRefCoreIdCoreIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String coreModeRef = null;
        List<String> response = api.retrieveContextConnectivityContextConnectivityServiceEndPointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverCoreModeRefCoreIdCoreId(uuid, localId, coreModeRef);

        // TODO: test validations
    }
    
    /**
     * Retrieve core-id by ID
     *
     * Retrieve operation of resource: core-id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverCoreModeRefCoreIdCoreIdByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String coreModeRef = null;
        String coreId = null;
        CoreIdSchema response = api.retrieveContextConnectivityContextConnectivityServiceEndPointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverCoreModeRefCoreIdCoreIdById(uuid, localId, coreModeRef, coreId);

        // TODO: test validations
    }
    
    /**
     * Retrieve core_mode_ref
     *
     * Retrieve operation of resource: core_mode_ref
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverCoreModeRefCoreModeRefTest() throws ApiException {
        String uuid = null;
        String localId = null;
        List<String> response = api.retrieveContextConnectivityContextConnectivityServiceEndPointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverCoreModeRefCoreModeRef(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve core_mode_ref by ID
     *
     * Retrieve operation of resource: core_mode_ref
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverCoreModeRefCoreModeRefByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String coreModeRef = null;
        CoreModeRefSchema response = api.retrieveContextConnectivityContextConnectivityServiceEndPointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverCoreModeRefCoreModeRefById(uuid, localId, coreModeRef);

        // TODO: test validations
    }
    
    /**
     * Retrieve mode-id
     *
     * Retrieve operation of resource: mode-id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverCoreModeRefModeIdModeIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String coreModeRef = null;
        List<String> response = api.retrieveContextConnectivityContextConnectivityServiceEndPointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverCoreModeRefModeIdModeId(uuid, localId, coreModeRef);

        // TODO: test validations
    }
    
    /**
     * Retrieve mode-id by ID
     *
     * Retrieve operation of resource: mode-id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverCoreModeRefModeIdModeIdByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String coreModeRef = null;
        String modeId = null;
        ModeIdSchema response = api.retrieveContextConnectivityContextConnectivityServiceEndPointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverCoreModeRefModeIdModeIdById(uuid, localId, coreModeRef, modeId);

        // TODO: test validations
    }
    
    /**
     * Retrieve frequency-constraint
     *
     * Retrieve operation of resource: frequency-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverSupportableSpectrumFrequencyConstraintFrequencyConstraintTest() throws ApiException {
        String uuid = null;
        String localId = null;
        FrequencyConstraint response = api.retrieveContextConnectivityContextConnectivityServiceEndPointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverSupportableSpectrumFrequencyConstraintFrequencyConstraint(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve supportable-spectrum
     *
     * Retrieve operation of resource: supportable-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverSupportableSpectrumSupportableSpectrumTest() throws ApiException {
        String uuid = null;
        String localId = null;
        SpectrumBand response = api.retrieveContextConnectivityContextConnectivityServiceEndPointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverSupportableSpectrumSupportableSpectrum(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve max-bw
     *
     * Retrieve operation of resource: max-bw
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverSupportedBandwidthMaxBwMaxBwTest() throws ApiException {
        String uuid = null;
        String localId = null;
        CapacityValue response = api.retrieveContextConnectivityContextConnectivityServiceEndPointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverSupportedBandwidthMaxBwMaxBw(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve min-bw
     *
     * Retrieve operation of resource: min-bw
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverSupportedBandwidthMinBwMinBwTest() throws ApiException {
        String uuid = null;
        String localId = null;
        CapacityValue response = api.retrieveContextConnectivityContextConnectivityServiceEndPointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverSupportedBandwidthMinBwMinBw(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve supported-bandwidth
     *
     * Retrieve operation of resource: supported-bandwidth
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverSupportedBandwidthSupportedBandwidthTest() throws ApiException {
        String uuid = null;
        String localId = null;
        SupportedBandwidthSchema response = api.retrieveContextConnectivityContextConnectivityServiceEndPointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverSupportedBandwidthSupportedBandwidth(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve sdm-pool
     *
     * Retrieve operation of resource: sdm-pool
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointSdmServiceInterfacePointSpecSdmPoolSdmPoolTest() throws ApiException {
        String uuid = null;
        String localId = null;
        SdmPoolCapabilityPac response = api.retrieveContextConnectivityContextConnectivityServiceEndPointSdmServiceInterfacePointSpecSdmPoolSdmPool(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve sdm-service-interface-point-spec
     *
     * Retrieve operation of resource: sdm-service-interface-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointSdmServiceInterfacePointSpecSdmServiceInterfacePointSpecTest() throws ApiException {
        String uuid = null;
        String localId = null;
        SdmServiceInterfacePointSpec response = api.retrieveContextConnectivityContextConnectivityServiceEndPointSdmServiceInterfacePointSpecSdmServiceInterfacePointSpec(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve available-capacity
     *
     * Retrieve operation of resource: available-capacity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityAvailableCapacityTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        Capacity response = api.retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityAvailableCapacity(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve bandwidth-profile
     *
     * Retrieve operation of resource: bandwidth-profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfileBandwidthProfileTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        BandwidthProfile response = api.retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfileBandwidthProfile(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-burst-size
     *
     * Retrieve operation of resource: committed-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        CapacityValue response = api.retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-information-rate
     *
     * Retrieve operation of resource: committed-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        CapacityValue response = api.retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-burst-size
     *
     * Retrieve operation of resource: peak-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        CapacityValue response = api.retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-information-rate
     *
     * Retrieve operation of resource: peak-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        CapacityValue response = api.retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve total-size
     *
     * Retrieve operation of resource: total-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityTotalSizeTotalSizeTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        CapacityValue response = api.retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointAvailableCapacityTotalSizeTotalSize(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve available-spectrum
     *
     * Retrieve operation of resource: available-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointMediaChannelServiceInterfacePointSpecMcPoolAvailableSpectrumAvailableSpectrumTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        List<String> response = api.retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointMediaChannelServiceInterfacePointSpecMcPoolAvailableSpectrumAvailableSpectrum(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve available-spectrum by ID
     *
     * Retrieve operation of resource: available-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointMediaChannelServiceInterfacePointSpecMcPoolAvailableSpectrumAvailableSpectrumByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        String upperFrequencyLowerFrequency = null;
        SpectrumBand response = api.retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointMediaChannelServiceInterfacePointSpecMcPoolAvailableSpectrumAvailableSpectrumById(uuid, localId, serviceInterfacePointUuid, upperFrequencyLowerFrequency);

        // TODO: test validations
    }
    
    /**
     * Retrieve frequency-constraint
     *
     * Retrieve operation of resource: frequency-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointMediaChannelServiceInterfacePointSpecMcPoolAvailableSpectrumFrequencyConstraintFrequencyConstraintTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        String upperFrequencyLowerFrequency = null;
        FrequencyConstraint response = api.retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointMediaChannelServiceInterfacePointSpecMcPoolAvailableSpectrumFrequencyConstraintFrequencyConstraint(uuid, localId, serviceInterfacePointUuid, upperFrequencyLowerFrequency);

        // TODO: test validations
    }
    
    /**
     * Retrieve mc-pool
     *
     * Retrieve operation of resource: mc-pool
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointMediaChannelServiceInterfacePointSpecMcPoolMcPoolTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        MediaChannelPoolCapabilityPac response = api.retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointMediaChannelServiceInterfacePointSpecMcPoolMcPool(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve frequency-constraint
     *
     * Retrieve operation of resource: frequency-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointMediaChannelServiceInterfacePointSpecMcPoolOccupiedSpectrumFrequencyConstraintFrequencyConstraintTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        String upperFrequencyLowerFrequency = null;
        FrequencyConstraint response = api.retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointMediaChannelServiceInterfacePointSpecMcPoolOccupiedSpectrumFrequencyConstraintFrequencyConstraint(uuid, localId, serviceInterfacePointUuid, upperFrequencyLowerFrequency);

        // TODO: test validations
    }
    
    /**
     * Retrieve occupied-spectrum
     *
     * Retrieve operation of resource: occupied-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointMediaChannelServiceInterfacePointSpecMcPoolOccupiedSpectrumOccupiedSpectrumTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        List<String> response = api.retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointMediaChannelServiceInterfacePointSpecMcPoolOccupiedSpectrumOccupiedSpectrum(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve occupied-spectrum by ID
     *
     * Retrieve operation of resource: occupied-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointMediaChannelServiceInterfacePointSpecMcPoolOccupiedSpectrumOccupiedSpectrumByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        String upperFrequencyLowerFrequency = null;
        SpectrumBand response = api.retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointMediaChannelServiceInterfacePointSpecMcPoolOccupiedSpectrumOccupiedSpectrumById(uuid, localId, serviceInterfacePointUuid, upperFrequencyLowerFrequency);

        // TODO: test validations
    }
    
    /**
     * Retrieve frequency-constraint
     *
     * Retrieve operation of resource: frequency-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointMediaChannelServiceInterfacePointSpecMcPoolSupportableSpectrumFrequencyConstraintFrequencyConstraintTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        String upperFrequencyLowerFrequency = null;
        FrequencyConstraint response = api.retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointMediaChannelServiceInterfacePointSpecMcPoolSupportableSpectrumFrequencyConstraintFrequencyConstraint(uuid, localId, serviceInterfacePointUuid, upperFrequencyLowerFrequency);

        // TODO: test validations
    }
    
    /**
     * Retrieve supportable-spectrum
     *
     * Retrieve operation of resource: supportable-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointMediaChannelServiceInterfacePointSpecMcPoolSupportableSpectrumSupportableSpectrumTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        List<String> response = api.retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointMediaChannelServiceInterfacePointSpecMcPoolSupportableSpectrumSupportableSpectrum(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve supportable-spectrum by ID
     *
     * Retrieve operation of resource: supportable-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointMediaChannelServiceInterfacePointSpecMcPoolSupportableSpectrumSupportableSpectrumByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        String upperFrequencyLowerFrequency = null;
        SpectrumBand response = api.retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointMediaChannelServiceInterfacePointSpecMcPoolSupportableSpectrumSupportableSpectrumById(uuid, localId, serviceInterfacePointUuid, upperFrequencyLowerFrequency);

        // TODO: test validations
    }
    
    /**
     * Retrieve media-channel-service-interface-point-spec
     *
     * Retrieve operation of resource: media-channel-service-interface-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointMediaChannelServiceInterfacePointSpecMediaChannelServiceInterfacePointSpecTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        MediaChannelServiceInterfacePointSpec response = api.retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointMediaChannelServiceInterfacePointSpecMediaChannelServiceInterfacePointSpec(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointNameNameTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        List<String> response = api.retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointNameName(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name by ID
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointNameNameByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        String valueName = null;
        NameAndValue response = api.retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointNameNameById(uuid, localId, serviceInterfacePointUuid, valueName);

        // TODO: test validations
    }
    
    /**
     * Retrieve otsi-capability
     *
     * Retrieve operation of resource: otsi-capability
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointOtsiServiceInterfacePointSpecOtsiCapabilityOtsiCapabilityTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        OtsiCapabilityPac response = api.retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointOtsiServiceInterfacePointSpecOtsiCapabilityOtsiCapability(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve supportable-application-identifier
     *
     * Retrieve operation of resource: supportable-application-identifier
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointOtsiServiceInterfacePointSpecOtsiCapabilitySupportableApplicationIdentifierSupportableApplicationIdentifierTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        List<String> response = api.retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointOtsiServiceInterfacePointSpecOtsiCapabilitySupportableApplicationIdentifierSupportableApplicationIdentifier(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve supportable-application-identifier by ID
     *
     * Retrieve operation of resource: supportable-application-identifier
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointOtsiServiceInterfacePointSpecOtsiCapabilitySupportableApplicationIdentifierSupportableApplicationIdentifierByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        String applicationCode = null;
        ApplicationIdentifier response = api.retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointOtsiServiceInterfacePointSpecOtsiCapabilitySupportableApplicationIdentifierSupportableApplicationIdentifierById(uuid, localId, serviceInterfacePointUuid, applicationCode);

        // TODO: test validations
    }
    
    /**
     * Retrieve frequency-constraint
     *
     * Retrieve operation of resource: frequency-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointOtsiServiceInterfacePointSpecOtsiCapabilitySupportableLowerCentralFrequencyFrequencyConstraintFrequencyConstraintTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        String centralFrequency = null;
        FrequencyConstraint response = api.retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointOtsiServiceInterfacePointSpecOtsiCapabilitySupportableLowerCentralFrequencyFrequencyConstraintFrequencyConstraint(uuid, localId, serviceInterfacePointUuid, centralFrequency);

        // TODO: test validations
    }
    
    /**
     * Retrieve supportable-lower-central-frequency
     *
     * Retrieve operation of resource: supportable-lower-central-frequency
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointOtsiServiceInterfacePointSpecOtsiCapabilitySupportableLowerCentralFrequencySupportableLowerCentralFrequencyTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        List<String> response = api.retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointOtsiServiceInterfacePointSpecOtsiCapabilitySupportableLowerCentralFrequencySupportableLowerCentralFrequency(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve supportable-lower-central-frequency by ID
     *
     * Retrieve operation of resource: supportable-lower-central-frequency
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointOtsiServiceInterfacePointSpecOtsiCapabilitySupportableLowerCentralFrequencySupportableLowerCentralFrequencyByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        String centralFrequency = null;
        CentralFrequency response = api.retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointOtsiServiceInterfacePointSpecOtsiCapabilitySupportableLowerCentralFrequencySupportableLowerCentralFrequencyById(uuid, localId, serviceInterfacePointUuid, centralFrequency);

        // TODO: test validations
    }
    
    /**
     * Retrieve frequency-constraint
     *
     * Retrieve operation of resource: frequency-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointOtsiServiceInterfacePointSpecOtsiCapabilitySupportableUpperCentralFrequencyFrequencyConstraintFrequencyConstraintTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        String centralFrequency = null;
        FrequencyConstraint response = api.retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointOtsiServiceInterfacePointSpecOtsiCapabilitySupportableUpperCentralFrequencyFrequencyConstraintFrequencyConstraint(uuid, localId, serviceInterfacePointUuid, centralFrequency);

        // TODO: test validations
    }
    
    /**
     * Retrieve supportable-upper-central-frequency
     *
     * Retrieve operation of resource: supportable-upper-central-frequency
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointOtsiServiceInterfacePointSpecOtsiCapabilitySupportableUpperCentralFrequencySupportableUpperCentralFrequencyTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        List<String> response = api.retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointOtsiServiceInterfacePointSpecOtsiCapabilitySupportableUpperCentralFrequencySupportableUpperCentralFrequency(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve supportable-upper-central-frequency by ID
     *
     * Retrieve operation of resource: supportable-upper-central-frequency
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointOtsiServiceInterfacePointSpecOtsiCapabilitySupportableUpperCentralFrequencySupportableUpperCentralFrequencyByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        String centralFrequency = null;
        CentralFrequency response = api.retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointOtsiServiceInterfacePointSpecOtsiCapabilitySupportableUpperCentralFrequencySupportableUpperCentralFrequencyById(uuid, localId, serviceInterfacePointUuid, centralFrequency);

        // TODO: test validations
    }
    
    /**
     * Retrieve total-power-warn-threshold
     *
     * Retrieve operation of resource: total-power-warn-threshold
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointOtsiServiceInterfacePointSpecOtsiCapabilityTotalPowerWarnThresholdTotalPowerWarnThresholdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        TotalPowerThresholdPac response = api.retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointOtsiServiceInterfacePointSpecOtsiCapabilityTotalPowerWarnThresholdTotalPowerWarnThreshold(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve otsi-service-interface-point-spec
     *
     * Retrieve operation of resource: otsi-service-interface-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointOtsiServiceInterfacePointSpecOtsiServiceInterfacePointSpecTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        OtsiServiceInterfacePointSpec response = api.retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointOtsiServiceInterfacePointSpecOtsiServiceInterfacePointSpec(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve available-core
     *
     * Retrieve operation of resource: available-core
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableCoreTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        List<String> response = api.retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableCore(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve available-core by ID
     *
     * Retrieve operation of resource: available-core
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableCoreByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        String coreId = null;
        SdmCorePac response = api.retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableCoreById(uuid, localId, serviceInterfacePointUuid, coreId);

        // TODO: test validations
    }
    
    /**
     * Retrieve available-mode
     *
     * Retrieve operation of resource: available-mode
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeAvailableModeTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        String coreId = null;
        List<String> response = api.retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeAvailableMode(uuid, localId, serviceInterfacePointUuid, coreId);

        // TODO: test validations
    }
    
    /**
     * Retrieve available-mode by ID
     *
     * Retrieve operation of resource: available-mode
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeAvailableModeByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        String coreId = null;
        String modeId = null;
        SdmModePac response = api.retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeAvailableModeById(uuid, localId, serviceInterfacePointUuid, coreId, modeId);

        // TODO: test validations
    }
    
    /**
     * Retrieve available-spectrum
     *
     * Retrieve operation of resource: available-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeAvailableSpectrumAvailableSpectrumTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        String coreId = null;
        String modeId = null;
        List<String> response = api.retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeAvailableSpectrumAvailableSpectrum(uuid, localId, serviceInterfacePointUuid, coreId, modeId);

        // TODO: test validations
    }
    
    /**
     * Retrieve available-spectrum by ID
     *
     * Retrieve operation of resource: available-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeAvailableSpectrumAvailableSpectrumByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        String coreId = null;
        String modeId = null;
        String upperFrequencyLowerFrequency = null;
        SpectrumBand response = api.retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeAvailableSpectrumAvailableSpectrumById(uuid, localId, serviceInterfacePointUuid, coreId, modeId, upperFrequencyLowerFrequency);

        // TODO: test validations
    }
    
    /**
     * Retrieve frequency-constraint
     *
     * Retrieve operation of resource: frequency-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeAvailableSpectrumFrequencyConstraintFrequencyConstraintTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        String coreId = null;
        String modeId = null;
        String upperFrequencyLowerFrequency = null;
        FrequencyConstraint response = api.retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeAvailableSpectrumFrequencyConstraintFrequencyConstraint(uuid, localId, serviceInterfacePointUuid, coreId, modeId, upperFrequencyLowerFrequency);

        // TODO: test validations
    }
    
    /**
     * Retrieve frequency-constraint
     *
     * Retrieve operation of resource: frequency-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeOccupiedSpectrumFrequencyConstraintFrequencyConstraintTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        String coreId = null;
        String modeId = null;
        String upperFrequencyLowerFrequency = null;
        FrequencyConstraint response = api.retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeOccupiedSpectrumFrequencyConstraintFrequencyConstraint(uuid, localId, serviceInterfacePointUuid, coreId, modeId, upperFrequencyLowerFrequency);

        // TODO: test validations
    }
    
    /**
     * Retrieve occupied-spectrum
     *
     * Retrieve operation of resource: occupied-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeOccupiedSpectrumOccupiedSpectrumTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        String coreId = null;
        String modeId = null;
        List<String> response = api.retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeOccupiedSpectrumOccupiedSpectrum(uuid, localId, serviceInterfacePointUuid, coreId, modeId);

        // TODO: test validations
    }
    
    /**
     * Retrieve occupied-spectrum by ID
     *
     * Retrieve operation of resource: occupied-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeOccupiedSpectrumOccupiedSpectrumByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        String coreId = null;
        String modeId = null;
        String upperFrequencyLowerFrequency = null;
        SpectrumBand response = api.retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeOccupiedSpectrumOccupiedSpectrumById(uuid, localId, serviceInterfacePointUuid, coreId, modeId, upperFrequencyLowerFrequency);

        // TODO: test validations
    }
    
    /**
     * Retrieve frequency-constraint
     *
     * Retrieve operation of resource: frequency-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeSupportableSpectrumFrequencyConstraintFrequencyConstraintTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        String coreId = null;
        String modeId = null;
        String upperFrequencyLowerFrequency = null;
        FrequencyConstraint response = api.retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeSupportableSpectrumFrequencyConstraintFrequencyConstraint(uuid, localId, serviceInterfacePointUuid, coreId, modeId, upperFrequencyLowerFrequency);

        // TODO: test validations
    }
    
    /**
     * Retrieve supportable-spectrum
     *
     * Retrieve operation of resource: supportable-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeSupportableSpectrumSupportableSpectrumTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        String coreId = null;
        String modeId = null;
        List<String> response = api.retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeSupportableSpectrumSupportableSpectrum(uuid, localId, serviceInterfacePointUuid, coreId, modeId);

        // TODO: test validations
    }
    
    /**
     * Retrieve supportable-spectrum by ID
     *
     * Retrieve operation of resource: supportable-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeSupportableSpectrumSupportableSpectrumByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        String coreId = null;
        String modeId = null;
        String upperFrequencyLowerFrequency = null;
        SpectrumBand response = api.retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeSupportableSpectrumSupportableSpectrumById(uuid, localId, serviceInterfacePointUuid, coreId, modeId, upperFrequencyLowerFrequency);

        // TODO: test validations
    }
    
    /**
     * Retrieve available-transceiver
     *
     * Retrieve operation of resource: available-transceiver
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverAvailableTransceiverTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        AvailableTransceiver response = api.retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverAvailableTransceiver(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve core-id
     *
     * Retrieve operation of resource: core-id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverCoreModeRefCoreIdCoreIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        String coreModeRef = null;
        List<String> response = api.retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverCoreModeRefCoreIdCoreId(uuid, localId, serviceInterfacePointUuid, coreModeRef);

        // TODO: test validations
    }
    
    /**
     * Retrieve core-id by ID
     *
     * Retrieve operation of resource: core-id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverCoreModeRefCoreIdCoreIdByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        String coreModeRef = null;
        String coreId = null;
        CoreIdSchema response = api.retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverCoreModeRefCoreIdCoreIdById(uuid, localId, serviceInterfacePointUuid, coreModeRef, coreId);

        // TODO: test validations
    }
    
    /**
     * Retrieve core_mode_ref
     *
     * Retrieve operation of resource: core_mode_ref
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverCoreModeRefCoreModeRefTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        List<String> response = api.retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverCoreModeRefCoreModeRef(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve core_mode_ref by ID
     *
     * Retrieve operation of resource: core_mode_ref
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverCoreModeRefCoreModeRefByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        String coreModeRef = null;
        CoreModeRefSchema response = api.retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverCoreModeRefCoreModeRefById(uuid, localId, serviceInterfacePointUuid, coreModeRef);

        // TODO: test validations
    }
    
    /**
     * Retrieve mode-id
     *
     * Retrieve operation of resource: mode-id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverCoreModeRefModeIdModeIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        String coreModeRef = null;
        List<String> response = api.retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverCoreModeRefModeIdModeId(uuid, localId, serviceInterfacePointUuid, coreModeRef);

        // TODO: test validations
    }
    
    /**
     * Retrieve mode-id by ID
     *
     * Retrieve operation of resource: mode-id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverCoreModeRefModeIdModeIdByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        String coreModeRef = null;
        String modeId = null;
        ModeIdSchema response = api.retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverCoreModeRefModeIdModeIdById(uuid, localId, serviceInterfacePointUuid, coreModeRef, modeId);

        // TODO: test validations
    }
    
    /**
     * Retrieve frequency-constraint
     *
     * Retrieve operation of resource: frequency-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverSupportableSpectrumFrequencyConstraintFrequencyConstraintTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        FrequencyConstraint response = api.retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverSupportableSpectrumFrequencyConstraintFrequencyConstraint(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve supportable-spectrum
     *
     * Retrieve operation of resource: supportable-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverSupportableSpectrumSupportableSpectrumTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        SpectrumBand response = api.retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverSupportableSpectrumSupportableSpectrum(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve max-bw
     *
     * Retrieve operation of resource: max-bw
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverSupportedBandwidthMaxBwMaxBwTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        CapacityValue response = api.retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverSupportedBandwidthMaxBwMaxBw(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve min-bw
     *
     * Retrieve operation of resource: min-bw
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverSupportedBandwidthMinBwMinBwTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        CapacityValue response = api.retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverSupportedBandwidthMinBwMinBw(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve supported-bandwidth
     *
     * Retrieve operation of resource: supported-bandwidth
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverSupportedBandwidthSupportedBandwidthTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        SupportedBandwidthSchema response = api.retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverSupportedBandwidthSupportedBandwidth(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve sdm-pool
     *
     * Retrieve operation of resource: sdm-pool
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolSdmPoolTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        SdmPoolCapabilityPac response = api.retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolSdmPool(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve sdm-service-interface-point-spec
     *
     * Retrieve operation of resource: sdm-service-interface-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmServiceInterfacePointSpecTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        SdmServiceInterfacePointSpec response = api.retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmServiceInterfacePointSpec(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve service-interface-point
     *
     * Retrieve operation of resource: service-interface-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointTest() throws ApiException {
        String uuid = null;
        String localId = null;
        ServiceInterfacePointRef response = api.retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePoint(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve service-interface-point by ID
     *
     * Retrieve operation of resource: service-interface-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        ServiceInterfacePointSchema response = api.retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve bandwidth-profile
     *
     * Retrieve operation of resource: bandwidth-profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfileBandwidthProfileTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        BandwidthProfile response = api.retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfileBandwidthProfile(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-burst-size
     *
     * Retrieve operation of resource: committed-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        CapacityValue response = api.retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-information-rate
     *
     * Retrieve operation of resource: committed-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        CapacityValue response = api.retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-burst-size
     *
     * Retrieve operation of resource: peak-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        CapacityValue response = api.retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-information-rate
     *
     * Retrieve operation of resource: peak-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        CapacityValue response = api.retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve total-potential-capacity
     *
     * Retrieve operation of resource: total-potential-capacity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityTotalPotentialCapacityTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        Capacity response = api.retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityTotalPotentialCapacity(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve total-size
     *
     * Retrieve operation of resource: total-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityTotalSizeTotalSizeTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        CapacityValue response = api.retrieveContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointTotalPotentialCapacityTotalSizeTotalSize(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve include-core
     *
     * Retrieve operation of resource: include-core
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceIncludeCoreIncludeCoreTest() throws ApiException {
        String uuid = null;
        SdmPropertiesPac response = api.retrieveContextConnectivityContextConnectivityServiceIncludeCoreIncludeCore(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve frequency-constraint
     *
     * Retrieve operation of resource: frequency-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceIncludeCoreOccupiedSpectrumFrequencyConstraintFrequencyConstraintTest() throws ApiException {
        String uuid = null;
        FrequencyConstraint response = api.retrieveContextConnectivityContextConnectivityServiceIncludeCoreOccupiedSpectrumFrequencyConstraintFrequencyConstraint(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve occupied-spectrum
     *
     * Retrieve operation of resource: occupied-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceIncludeCoreOccupiedSpectrumOccupiedSpectrumTest() throws ApiException {
        String uuid = null;
        SpectrumBand response = api.retrieveContextConnectivityContextConnectivityServiceIncludeCoreOccupiedSpectrumOccupiedSpectrum(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve latency-characteristic
     *
     * Retrieve operation of resource: latency-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristic(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve latency-characteristic by ID
     *
     * Retrieve operation of resource: latency-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String trafficPropertyName = null;
        LatencyCharacteristic response = api.retrieveContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicById(uuid, trafficPropertyName);

        // TODO: test validations
    }
    
    /**
     * Retrieve name
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceNameNameTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextConnectivityContextConnectivityServiceNameName(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name by ID
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceNameNameByIdTest() throws ApiException {
        String uuid = null;
        String valueName = null;
        NameAndValue response = api.retrieveContextConnectivityContextConnectivityServiceNameNameById(uuid, valueName);

        // TODO: test validations
    }
    
    /**
     * Retrieve bandwidth-profile
     *
     * Retrieve operation of resource: bandwidth-profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileTest() throws ApiException {
        String uuid = null;
        BandwidthProfile response = api.retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfile(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-burst-size
     *
     * Retrieve operation of resource: committed-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeTest() throws ApiException {
        String uuid = null;
        CapacityValue response = api.retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-information-rate
     *
     * Retrieve operation of resource: committed-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateTest() throws ApiException {
        String uuid = null;
        CapacityValue response = api.retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-burst-size
     *
     * Retrieve operation of resource: peak-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeTest() throws ApiException {
        String uuid = null;
        CapacityValue response = api.retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSize(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-information-rate
     *
     * Retrieve operation of resource: peak-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateTest() throws ApiException {
        String uuid = null;
        CapacityValue response = api.retrieveContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRate(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve requested-capacity
     *
     * Retrieve operation of resource: requested-capacity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceRequestedCapacityRequestedCapacityTest() throws ApiException {
        String uuid = null;
        Capacity response = api.retrieveContextConnectivityContextConnectivityServiceRequestedCapacityRequestedCapacity(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve total-size
     *
     * Retrieve operation of resource: total-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeTest() throws ApiException {
        String uuid = null;
        CapacityValue response = api.retrieveContextConnectivityContextConnectivityServiceRequestedCapacityTotalSizeTotalSize(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve resilience-type
     *
     * Retrieve operation of resource: resilience-type
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceResilienceTypeResilienceTypeTest() throws ApiException {
        String uuid = null;
        ResilienceType response = api.retrieveContextConnectivityContextConnectivityServiceResilienceTypeResilienceType(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve risk-diversity-characteristic
     *
     * Retrieve operation of resource: risk-diversity-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristic(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve risk-diversity-characteristic by ID
     *
     * Retrieve operation of resource: risk-diversity-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String riskCharacteristicName = null;
        RiskCharacteristic response = api.retrieveContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicById(uuid, riskCharacteristicName);

        // TODO: test validations
    }
    
    /**
     * Retrieve schedule
     *
     * Retrieve operation of resource: schedule
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextConnectivityContextConnectivityServiceScheduleScheduleTest() throws ApiException {
        String uuid = null;
        TimeRange response = api.retrieveContextConnectivityContextConnectivityServiceScheduleSchedule(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextNameNameTest() throws ApiException {
        List<String> response = api.retrieveContextNameName();

        // TODO: test validations
    }
    
    /**
     * Retrieve name by ID
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextNameNameByIdTest() throws ApiException {
        String valueName = null;
        NameAndValue response = api.retrieveContextNameNameById(valueName);

        // TODO: test validations
    }
    
    /**
     * Retrieve bandwidth-profile
     *
     * Retrieve operation of resource: bandwidth-profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileBandwidthProfileTest() throws ApiException {
        String uuid = null;
        String localId = null;
        BandwidthProfile response = api.retrieveContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileBandwidthProfile(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-burst-size
     *
     * Retrieve operation of resource: committed-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeTest() throws ApiException {
        String uuid = null;
        String localId = null;
        CapacityValue response = api.retrieveContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-information-rate
     *
     * Retrieve operation of resource: committed-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateTest() throws ApiException {
        String uuid = null;
        String localId = null;
        CapacityValue response = api.retrieveContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-burst-size
     *
     * Retrieve operation of resource: peak-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeTest() throws ApiException {
        String uuid = null;
        String localId = null;
        CapacityValue response = api.retrieveContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSize(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-information-rate
     *
     * Retrieve operation of resource: peak-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateTest() throws ApiException {
        String uuid = null;
        String localId = null;
        CapacityValue response = api.retrieveContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRate(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve capacity
     *
     * Retrieve operation of resource: capacity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointCapacityCapacityTest() throws ApiException {
        String uuid = null;
        String localId = null;
        Capacity response = api.retrieveContextPathComputationContextPathCompServiceEndPointCapacityCapacity(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve total-size
     *
     * Retrieve operation of resource: total-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointCapacityTotalSizeTotalSizeTest() throws ApiException {
        String uuid = null;
        String localId = null;
        CapacityValue response = api.retrieveContextPathComputationContextPathCompServiceEndPointCapacityTotalSizeTotalSize(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve aggregated-connection-end-point
     *
     * Retrieve operation of resource: aggregated-connection-end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        List<String> response = api.retrieveContextPathComputationContextPathCompServiceEndPointConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPoint(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve aggregated-connection-end-point by ID
     *
     * Retrieve operation of resource: aggregated-connection-end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        String topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid = null;
        ConnectionEndPointRef response = api.retrieveContextPathComputationContextPathCompServiceEndPointConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointById(uuid, localId, connectionEndPointUuid, topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve client-node-edge-point
     *
     * Retrieve operation of resource: client-node-edge-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointConnectionEndPointClientNodeEdgePointClientNodeEdgePointTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        List<String> response = api.retrieveContextPathComputationContextPathCompServiceEndPointConnectionEndPointClientNodeEdgePointClientNodeEdgePoint(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve client-node-edge-point by ID
     *
     * Retrieve operation of resource: client-node-edge-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointConnectionEndPointClientNodeEdgePointClientNodeEdgePointByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        String topologyUuidNodeUuidNodeEdgePointUuid = null;
        NodeEdgePointRef response = api.retrieveContextPathComputationContextPathCompServiceEndPointConnectionEndPointClientNodeEdgePointClientNodeEdgePointById(uuid, localId, connectionEndPointUuid, topologyUuidNodeUuidNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve connection-end-point
     *
     * Retrieve operation of resource: connection-end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointConnectionEndPointConnectionEndPointTest() throws ApiException {
        String uuid = null;
        String localId = null;
        List<String> response = api.retrieveContextPathComputationContextPathCompServiceEndPointConnectionEndPointConnectionEndPoint(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve connection-end-point by ID
     *
     * Retrieve operation of resource: connection-end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointConnectionEndPointConnectionEndPointByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid = null;
        ConnectionEndPointRef response = api.retrieveContextPathComputationContextPathCompServiceEndPointConnectionEndPointConnectionEndPointById(uuid, localId, topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve connection-end-point by ID
     *
     * Retrieve operation of resource: connection-end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointConnectionEndPointConnectionEndPointById_0Test() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        ConnectionEndPointSchema response = api.retrieveContextPathComputationContextPathCompServiceEndPointConnectionEndPointConnectionEndPointById_0(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve media-channel-assembly-spec
     *
     * Retrieve operation of resource: media-channel-assembly-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointConnectionEndPointMediaChannelAssemblySpecMediaChannelAssemblySpecTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        MediaChannelAssemblySpec response = api.retrieveContextPathComputationContextPathCompServiceEndPointConnectionEndPointMediaChannelAssemblySpecMediaChannelAssemblySpec(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve media-channel-connection-end-point-spec
     *
     * Retrieve operation of resource: media-channel-connection-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointConnectionEndPointMediaChannelConnectionEndPointSpecMediaChannelConnectionEndPointSpecTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        MediaChannelConnectionEndPointSpec response = api.retrieveContextPathComputationContextPathCompServiceEndPointConnectionEndPointMediaChannelConnectionEndPointSpecMediaChannelConnectionEndPointSpec(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve measured-power-egress
     *
     * Retrieve operation of resource: measured-power-egress
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointConnectionEndPointMediaChannelConnectionEndPointSpecMediaChannelMeasuredPowerEgressMeasuredPowerEgressTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        PowerPropertiesPac response = api.retrieveContextPathComputationContextPathCompServiceEndPointConnectionEndPointMediaChannelConnectionEndPointSpecMediaChannelMeasuredPowerEgressMeasuredPowerEgress(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve measured-power-ingress
     *
     * Retrieve operation of resource: measured-power-ingress
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointConnectionEndPointMediaChannelConnectionEndPointSpecMediaChannelMeasuredPowerIngressMeasuredPowerIngressTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        PowerPropertiesPac response = api.retrieveContextPathComputationContextPathCompServiceEndPointConnectionEndPointMediaChannelConnectionEndPointSpecMediaChannelMeasuredPowerIngressMeasuredPowerIngress(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve media-channel
     *
     * Retrieve operation of resource: media-channel
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointConnectionEndPointMediaChannelConnectionEndPointSpecMediaChannelMediaChannelTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        MediaChannelPropertiesPac response = api.retrieveContextPathComputationContextPathCompServiceEndPointConnectionEndPointMediaChannelConnectionEndPointSpecMediaChannelMediaChannel(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve frequency-constraint
     *
     * Retrieve operation of resource: frequency-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointConnectionEndPointMediaChannelConnectionEndPointSpecMediaChannelOccupiedSpectrumFrequencyConstraintFrequencyConstraintTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        FrequencyConstraint response = api.retrieveContextPathComputationContextPathCompServiceEndPointConnectionEndPointMediaChannelConnectionEndPointSpecMediaChannelOccupiedSpectrumFrequencyConstraintFrequencyConstraint(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve occupied-spectrum
     *
     * Retrieve operation of resource: occupied-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointConnectionEndPointMediaChannelConnectionEndPointSpecMediaChannelOccupiedSpectrumOccupiedSpectrumTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        SpectrumBand response = api.retrieveContextPathComputationContextPathCompServiceEndPointConnectionEndPointMediaChannelConnectionEndPointSpecMediaChannelOccupiedSpectrumOccupiedSpectrum(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointConnectionEndPointNameNameTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        List<String> response = api.retrieveContextPathComputationContextPathCompServiceEndPointConnectionEndPointNameName(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name by ID
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointConnectionEndPointNameNameByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        String valueName = null;
        NameAndValue response = api.retrieveContextPathComputationContextPathCompServiceEndPointConnectionEndPointNameNameById(uuid, localId, connectionEndPointUuid, valueName);

        // TODO: test validations
    }
    
    /**
     * Retrieve ots-connection-end-point-spec
     *
     * Retrieve operation of resource: ots-connection-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointConnectionEndPointOtsConnectionEndPointSpecOtsConnectionEndPointSpecTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        OtsConnectionEndPointSpec response = api.retrieveContextPathComputationContextPathCompServiceEndPointConnectionEndPointOtsConnectionEndPointSpecOtsConnectionEndPointSpec(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve measured-power-egress
     *
     * Retrieve operation of resource: measured-power-egress
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointConnectionEndPointOtsConnectionEndPointSpecOtsMediaChannelMeasuredPowerEgressMeasuredPowerEgressTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        PowerPropertiesPac response = api.retrieveContextPathComputationContextPathCompServiceEndPointConnectionEndPointOtsConnectionEndPointSpecOtsMediaChannelMeasuredPowerEgressMeasuredPowerEgress(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve measured-power-ingress
     *
     * Retrieve operation of resource: measured-power-ingress
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointConnectionEndPointOtsConnectionEndPointSpecOtsMediaChannelMeasuredPowerIngressMeasuredPowerIngressTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        PowerPropertiesPac response = api.retrieveContextPathComputationContextPathCompServiceEndPointConnectionEndPointOtsConnectionEndPointSpecOtsMediaChannelMeasuredPowerIngressMeasuredPowerIngress(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve frequency-constraint
     *
     * Retrieve operation of resource: frequency-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointConnectionEndPointOtsConnectionEndPointSpecOtsMediaChannelOccupiedSpectrumFrequencyConstraintFrequencyConstraintTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        FrequencyConstraint response = api.retrieveContextPathComputationContextPathCompServiceEndPointConnectionEndPointOtsConnectionEndPointSpecOtsMediaChannelOccupiedSpectrumFrequencyConstraintFrequencyConstraint(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve occupied-spectrum
     *
     * Retrieve operation of resource: occupied-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointConnectionEndPointOtsConnectionEndPointSpecOtsMediaChannelOccupiedSpectrumOccupiedSpectrumTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        SpectrumBand response = api.retrieveContextPathComputationContextPathCompServiceEndPointConnectionEndPointOtsConnectionEndPointSpecOtsMediaChannelOccupiedSpectrumOccupiedSpectrum(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve ots-media-channel
     *
     * Retrieve operation of resource: ots-media-channel
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointConnectionEndPointOtsConnectionEndPointSpecOtsMediaChannelOtsMediaChannelTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        MediaChannelPropertiesPac response = api.retrieveContextPathComputationContextPathCompServiceEndPointConnectionEndPointOtsConnectionEndPointSpecOtsMediaChannelOtsMediaChannel(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve fec-parameters
     *
     * Retrieve operation of resource: fec-parameters
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointConnectionEndPointOtsiAssemblyConnectionEndPointSpecFecParametersFecParametersTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        FecPropertiesPac response = api.retrieveContextPathComputationContextPathCompServiceEndPointConnectionEndPointOtsiAssemblyConnectionEndPointSpecFecParametersFecParameters(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve otsi-adapter
     *
     * Retrieve operation of resource: otsi-adapter
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointConnectionEndPointOtsiAssemblyConnectionEndPointSpecOtsiAdapterOtsiAdapterTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        OtsiGserverAdaptationPac response = api.retrieveContextPathComputationContextPathCompServiceEndPointConnectionEndPointOtsiAssemblyConnectionEndPointSpecOtsiAdapterOtsiAdapter(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve otsi-assembly-connection-end-point-spec
     *
     * Retrieve operation of resource: otsi-assembly-connection-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointConnectionEndPointOtsiAssemblyConnectionEndPointSpecOtsiAssemblyConnectionEndPointSpecTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        OtsiAssemblyConnectionEndPointSpec response = api.retrieveContextPathComputationContextPathCompServiceEndPointConnectionEndPointOtsiAssemblyConnectionEndPointSpecOtsiAssemblyConnectionEndPointSpec(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve otsi-connection-end-point-spec
     *
     * Retrieve operation of resource: otsi-connection-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointConnectionEndPointOtsiConnectionEndPointSpecOtsiConnectionEndPointSpecTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        OtsiConnectionEndPointSpec response = api.retrieveContextPathComputationContextPathCompServiceEndPointConnectionEndPointOtsiConnectionEndPointSpecOtsiConnectionEndPointSpec(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve laser-properties
     *
     * Retrieve operation of resource: laser-properties
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointConnectionEndPointOtsiConnectionEndPointSpecOtsiTerminationLaserPropertiesLaserPropertiesTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        LaserPropertiesPac response = api.retrieveContextPathComputationContextPathCompServiceEndPointConnectionEndPointOtsiConnectionEndPointSpecOtsiTerminationLaserPropertiesLaserProperties(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve otsi-termination
     *
     * Retrieve operation of resource: otsi-termination
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointConnectionEndPointOtsiConnectionEndPointSpecOtsiTerminationOtsiTerminationTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        OtsiTerminationPac response = api.retrieveContextPathComputationContextPathCompServiceEndPointConnectionEndPointOtsiConnectionEndPointSpecOtsiTerminationOtsiTermination(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve received-power
     *
     * Retrieve operation of resource: received-power
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointConnectionEndPointOtsiConnectionEndPointSpecOtsiTerminationReceivedPowerReceivedPowerTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        PowerPropertiesPac response = api.retrieveContextPathComputationContextPathCompServiceEndPointConnectionEndPointOtsiConnectionEndPointSpecOtsiTerminationReceivedPowerReceivedPower(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve selected-application-identifier
     *
     * Retrieve operation of resource: selected-application-identifier
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointConnectionEndPointOtsiConnectionEndPointSpecOtsiTerminationSelectedApplicationIdentifierSelectedApplicationIdentifierTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        ApplicationIdentifier response = api.retrieveContextPathComputationContextPathCompServiceEndPointConnectionEndPointOtsiConnectionEndPointSpecOtsiTerminationSelectedApplicationIdentifierSelectedApplicationIdentifier(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve frequency-constraint
     *
     * Retrieve operation of resource: frequency-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointConnectionEndPointOtsiConnectionEndPointSpecOtsiTerminationSelectedCentralFrequencyFrequencyConstraintFrequencyConstraintTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        FrequencyConstraint response = api.retrieveContextPathComputationContextPathCompServiceEndPointConnectionEndPointOtsiConnectionEndPointSpecOtsiTerminationSelectedCentralFrequencyFrequencyConstraintFrequencyConstraint(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve selected-central-frequency
     *
     * Retrieve operation of resource: selected-central-frequency
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointConnectionEndPointOtsiConnectionEndPointSpecOtsiTerminationSelectedCentralFrequencySelectedCentralFrequencyTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        CentralFrequency response = api.retrieveContextPathComputationContextPathCompServiceEndPointConnectionEndPointOtsiConnectionEndPointSpecOtsiTerminationSelectedCentralFrequencySelectedCentralFrequency(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve frequency-constraint
     *
     * Retrieve operation of resource: frequency-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointConnectionEndPointOtsiConnectionEndPointSpecOtsiTerminationSelectedSpectrumFrequencyConstraintFrequencyConstraintTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        FrequencyConstraint response = api.retrieveContextPathComputationContextPathCompServiceEndPointConnectionEndPointOtsiConnectionEndPointSpecOtsiTerminationSelectedSpectrumFrequencyConstraintFrequencyConstraint(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve selected-spectrum
     *
     * Retrieve operation of resource: selected-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointConnectionEndPointOtsiConnectionEndPointSpecOtsiTerminationSelectedSpectrumSelectedSpectrumTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        SpectrumBand response = api.retrieveContextPathComputationContextPathCompServiceEndPointConnectionEndPointOtsiConnectionEndPointSpecOtsiTerminationSelectedSpectrumSelectedSpectrum(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve transmited-power
     *
     * Retrieve operation of resource: transmited-power
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointConnectionEndPointOtsiConnectionEndPointSpecOtsiTerminationTransmitedPowerTransmitedPowerTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        PowerPropertiesPac response = api.retrieveContextPathComputationContextPathCompServiceEndPointConnectionEndPointOtsiConnectionEndPointSpecOtsiTerminationTransmitedPowerTransmitedPower(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve parent-node-edge-point
     *
     * Retrieve operation of resource: parent-node-edge-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointConnectionEndPointParentNodeEdgePointParentNodeEdgePointTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        NodeEdgePointRef response = api.retrieveContextPathComputationContextPathCompServiceEndPointConnectionEndPointParentNodeEdgePointParentNodeEdgePoint(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve sdm-connection-end-point-spec
     *
     * Retrieve operation of resource: sdm-connection-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointConnectionEndPointSdmConnectionEndPointSpecSdmConnectionEndPointSpecTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        SdmConnectionEndPointSpec response = api.retrieveContextPathComputationContextPathCompServiceEndPointConnectionEndPointSdmConnectionEndPointSpecSdmConnectionEndPointSpec(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve frequency-constraint
     *
     * Retrieve operation of resource: frequency-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointConnectionEndPointSdmConnectionEndPointSpecSdmOccupiedSpectrumFrequencyConstraintFrequencyConstraintTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        FrequencyConstraint response = api.retrieveContextPathComputationContextPathCompServiceEndPointConnectionEndPointSdmConnectionEndPointSpecSdmOccupiedSpectrumFrequencyConstraintFrequencyConstraint(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve occupied-spectrum
     *
     * Retrieve operation of resource: occupied-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointConnectionEndPointSdmConnectionEndPointSpecSdmOccupiedSpectrumOccupiedSpectrumTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        SpectrumBand response = api.retrieveContextPathComputationContextPathCompServiceEndPointConnectionEndPointSdmConnectionEndPointSpecSdmOccupiedSpectrumOccupiedSpectrum(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve sdm
     *
     * Retrieve operation of resource: sdm
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointConnectionEndPointSdmConnectionEndPointSpecSdmSdmTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        SdmPropertiesPac response = api.retrieveContextPathComputationContextPathCompServiceEndPointConnectionEndPointSdmConnectionEndPointSpecSdmSdm(uuid, localId, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve end-point
     *
     * Retrieve operation of resource: end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointEndPointTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextPathComputationContextPathCompServiceEndPointEndPoint(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve end-point by ID
     *
     * Retrieve operation of resource: end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointEndPointByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        PathServiceEndPoint response = api.retrieveContextPathComputationContextPathCompServiceEndPointEndPointById(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve available-spectrum
     *
     * Retrieve operation of resource: available-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointMediaChannelServiceInterfacePointSpecMcPoolAvailableSpectrumAvailableSpectrumTest() throws ApiException {
        String uuid = null;
        String localId = null;
        List<String> response = api.retrieveContextPathComputationContextPathCompServiceEndPointMediaChannelServiceInterfacePointSpecMcPoolAvailableSpectrumAvailableSpectrum(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve available-spectrum by ID
     *
     * Retrieve operation of resource: available-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointMediaChannelServiceInterfacePointSpecMcPoolAvailableSpectrumAvailableSpectrumByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String upperFrequencyLowerFrequency = null;
        SpectrumBand response = api.retrieveContextPathComputationContextPathCompServiceEndPointMediaChannelServiceInterfacePointSpecMcPoolAvailableSpectrumAvailableSpectrumById(uuid, localId, upperFrequencyLowerFrequency);

        // TODO: test validations
    }
    
    /**
     * Retrieve frequency-constraint
     *
     * Retrieve operation of resource: frequency-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointMediaChannelServiceInterfacePointSpecMcPoolAvailableSpectrumFrequencyConstraintFrequencyConstraintTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String upperFrequencyLowerFrequency = null;
        FrequencyConstraint response = api.retrieveContextPathComputationContextPathCompServiceEndPointMediaChannelServiceInterfacePointSpecMcPoolAvailableSpectrumFrequencyConstraintFrequencyConstraint(uuid, localId, upperFrequencyLowerFrequency);

        // TODO: test validations
    }
    
    /**
     * Retrieve mc-pool
     *
     * Retrieve operation of resource: mc-pool
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointMediaChannelServiceInterfacePointSpecMcPoolMcPoolTest() throws ApiException {
        String uuid = null;
        String localId = null;
        MediaChannelPoolCapabilityPac response = api.retrieveContextPathComputationContextPathCompServiceEndPointMediaChannelServiceInterfacePointSpecMcPoolMcPool(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve frequency-constraint
     *
     * Retrieve operation of resource: frequency-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointMediaChannelServiceInterfacePointSpecMcPoolOccupiedSpectrumFrequencyConstraintFrequencyConstraintTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String upperFrequencyLowerFrequency = null;
        FrequencyConstraint response = api.retrieveContextPathComputationContextPathCompServiceEndPointMediaChannelServiceInterfacePointSpecMcPoolOccupiedSpectrumFrequencyConstraintFrequencyConstraint(uuid, localId, upperFrequencyLowerFrequency);

        // TODO: test validations
    }
    
    /**
     * Retrieve occupied-spectrum
     *
     * Retrieve operation of resource: occupied-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointMediaChannelServiceInterfacePointSpecMcPoolOccupiedSpectrumOccupiedSpectrumTest() throws ApiException {
        String uuid = null;
        String localId = null;
        List<String> response = api.retrieveContextPathComputationContextPathCompServiceEndPointMediaChannelServiceInterfacePointSpecMcPoolOccupiedSpectrumOccupiedSpectrum(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve occupied-spectrum by ID
     *
     * Retrieve operation of resource: occupied-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointMediaChannelServiceInterfacePointSpecMcPoolOccupiedSpectrumOccupiedSpectrumByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String upperFrequencyLowerFrequency = null;
        SpectrumBand response = api.retrieveContextPathComputationContextPathCompServiceEndPointMediaChannelServiceInterfacePointSpecMcPoolOccupiedSpectrumOccupiedSpectrumById(uuid, localId, upperFrequencyLowerFrequency);

        // TODO: test validations
    }
    
    /**
     * Retrieve frequency-constraint
     *
     * Retrieve operation of resource: frequency-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointMediaChannelServiceInterfacePointSpecMcPoolSupportableSpectrumFrequencyConstraintFrequencyConstraintTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String upperFrequencyLowerFrequency = null;
        FrequencyConstraint response = api.retrieveContextPathComputationContextPathCompServiceEndPointMediaChannelServiceInterfacePointSpecMcPoolSupportableSpectrumFrequencyConstraintFrequencyConstraint(uuid, localId, upperFrequencyLowerFrequency);

        // TODO: test validations
    }
    
    /**
     * Retrieve supportable-spectrum
     *
     * Retrieve operation of resource: supportable-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointMediaChannelServiceInterfacePointSpecMcPoolSupportableSpectrumSupportableSpectrumTest() throws ApiException {
        String uuid = null;
        String localId = null;
        List<String> response = api.retrieveContextPathComputationContextPathCompServiceEndPointMediaChannelServiceInterfacePointSpecMcPoolSupportableSpectrumSupportableSpectrum(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve supportable-spectrum by ID
     *
     * Retrieve operation of resource: supportable-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointMediaChannelServiceInterfacePointSpecMcPoolSupportableSpectrumSupportableSpectrumByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String upperFrequencyLowerFrequency = null;
        SpectrumBand response = api.retrieveContextPathComputationContextPathCompServiceEndPointMediaChannelServiceInterfacePointSpecMcPoolSupportableSpectrumSupportableSpectrumById(uuid, localId, upperFrequencyLowerFrequency);

        // TODO: test validations
    }
    
    /**
     * Retrieve media-channel-service-interface-point-spec
     *
     * Retrieve operation of resource: media-channel-service-interface-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointMediaChannelServiceInterfacePointSpecMediaChannelServiceInterfacePointSpecTest() throws ApiException {
        String uuid = null;
        String localId = null;
        MediaChannelServiceInterfacePointSpec response = api.retrieveContextPathComputationContextPathCompServiceEndPointMediaChannelServiceInterfacePointSpecMediaChannelServiceInterfacePointSpec(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve name
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointNameNameTest() throws ApiException {
        String uuid = null;
        String localId = null;
        List<String> response = api.retrieveContextPathComputationContextPathCompServiceEndPointNameName(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve name by ID
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointNameNameByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String valueName = null;
        NameAndValue response = api.retrieveContextPathComputationContextPathCompServiceEndPointNameNameById(uuid, localId, valueName);

        // TODO: test validations
    }
    
    /**
     * Retrieve application-identifier
     *
     * Retrieve operation of resource: application-identifier
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigApplicationIdentifierApplicationIdentifierTest() throws ApiException {
        String uuid = null;
        String localId = null;
        ApplicationIdentifier response = api.retrieveContextPathComputationContextPathCompServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigApplicationIdentifierApplicationIdentifier(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve central-frequency
     *
     * Retrieve operation of resource: central-frequency
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigCentralFrequencyCentralFrequencyTest() throws ApiException {
        String uuid = null;
        String localId = null;
        CentralFrequency response = api.retrieveContextPathComputationContextPathCompServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigCentralFrequencyCentralFrequency(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve frequency-constraint
     *
     * Retrieve operation of resource: frequency-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigCentralFrequencyFrequencyConstraintFrequencyConstraintTest() throws ApiException {
        String uuid = null;
        String localId = null;
        FrequencyConstraint response = api.retrieveContextPathComputationContextPathCompServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigCentralFrequencyFrequencyConstraintFrequencyConstraint(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve otsi-config
     *
     * Retrieve operation of resource: otsi-config
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigOtsiConfigTest() throws ApiException {
        String uuid = null;
        String localId = null;
        OtsiTerminationConfigPac response = api.retrieveContextPathComputationContextPathCompServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigOtsiConfig(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve frequency-constraint
     *
     * Retrieve operation of resource: frequency-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigSpectrumFrequencyConstraintFrequencyConstraintTest() throws ApiException {
        String uuid = null;
        String localId = null;
        FrequencyConstraint response = api.retrieveContextPathComputationContextPathCompServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigSpectrumFrequencyConstraintFrequencyConstraint(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve spectrum
     *
     * Retrieve operation of resource: spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigSpectrumSpectrumTest() throws ApiException {
        String uuid = null;
        String localId = null;
        SpectrumBand response = api.retrieveContextPathComputationContextPathCompServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigSpectrumSpectrum(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve transmit-power
     *
     * Retrieve operation of resource: transmit-power
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigTransmitPowerTransmitPowerTest() throws ApiException {
        String uuid = null;
        String localId = null;
        PowerPropertiesPac response = api.retrieveContextPathComputationContextPathCompServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigTransmitPowerTransmitPower(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve otsi-connectivity-service-end-point-spec
     *
     * Retrieve operation of resource: otsi-connectivity-service-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConnectivityServiceEndPointSpecTest() throws ApiException {
        String uuid = null;
        String localId = null;
        OtsiConnectivityServiceEndPointSpec response = api.retrieveContextPathComputationContextPathCompServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConnectivityServiceEndPointSpec(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve available-core
     *
     * Retrieve operation of resource: available-core
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableCoreTest() throws ApiException {
        String uuid = null;
        String localId = null;
        List<String> response = api.retrieveContextPathComputationContextPathCompServiceEndPointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableCore(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve available-core by ID
     *
     * Retrieve operation of resource: available-core
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableCoreByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String coreId = null;
        SdmCorePac response = api.retrieveContextPathComputationContextPathCompServiceEndPointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableCoreById(uuid, localId, coreId);

        // TODO: test validations
    }
    
    /**
     * Retrieve available-mode
     *
     * Retrieve operation of resource: available-mode
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeAvailableModeTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String coreId = null;
        List<String> response = api.retrieveContextPathComputationContextPathCompServiceEndPointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeAvailableMode(uuid, localId, coreId);

        // TODO: test validations
    }
    
    /**
     * Retrieve available-mode by ID
     *
     * Retrieve operation of resource: available-mode
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeAvailableModeByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String coreId = null;
        String modeId = null;
        SdmModePac response = api.retrieveContextPathComputationContextPathCompServiceEndPointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeAvailableModeById(uuid, localId, coreId, modeId);

        // TODO: test validations
    }
    
    /**
     * Retrieve available-spectrum
     *
     * Retrieve operation of resource: available-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeAvailableSpectrumAvailableSpectrumTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String coreId = null;
        String modeId = null;
        List<String> response = api.retrieveContextPathComputationContextPathCompServiceEndPointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeAvailableSpectrumAvailableSpectrum(uuid, localId, coreId, modeId);

        // TODO: test validations
    }
    
    /**
     * Retrieve available-spectrum by ID
     *
     * Retrieve operation of resource: available-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeAvailableSpectrumAvailableSpectrumByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String coreId = null;
        String modeId = null;
        String upperFrequencyLowerFrequency = null;
        SpectrumBand response = api.retrieveContextPathComputationContextPathCompServiceEndPointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeAvailableSpectrumAvailableSpectrumById(uuid, localId, coreId, modeId, upperFrequencyLowerFrequency);

        // TODO: test validations
    }
    
    /**
     * Retrieve frequency-constraint
     *
     * Retrieve operation of resource: frequency-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeAvailableSpectrumFrequencyConstraintFrequencyConstraintTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String coreId = null;
        String modeId = null;
        String upperFrequencyLowerFrequency = null;
        FrequencyConstraint response = api.retrieveContextPathComputationContextPathCompServiceEndPointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeAvailableSpectrumFrequencyConstraintFrequencyConstraint(uuid, localId, coreId, modeId, upperFrequencyLowerFrequency);

        // TODO: test validations
    }
    
    /**
     * Retrieve frequency-constraint
     *
     * Retrieve operation of resource: frequency-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeOccupiedSpectrumFrequencyConstraintFrequencyConstraintTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String coreId = null;
        String modeId = null;
        String upperFrequencyLowerFrequency = null;
        FrequencyConstraint response = api.retrieveContextPathComputationContextPathCompServiceEndPointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeOccupiedSpectrumFrequencyConstraintFrequencyConstraint(uuid, localId, coreId, modeId, upperFrequencyLowerFrequency);

        // TODO: test validations
    }
    
    /**
     * Retrieve occupied-spectrum
     *
     * Retrieve operation of resource: occupied-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeOccupiedSpectrumOccupiedSpectrumTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String coreId = null;
        String modeId = null;
        List<String> response = api.retrieveContextPathComputationContextPathCompServiceEndPointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeOccupiedSpectrumOccupiedSpectrum(uuid, localId, coreId, modeId);

        // TODO: test validations
    }
    
    /**
     * Retrieve occupied-spectrum by ID
     *
     * Retrieve operation of resource: occupied-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeOccupiedSpectrumOccupiedSpectrumByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String coreId = null;
        String modeId = null;
        String upperFrequencyLowerFrequency = null;
        SpectrumBand response = api.retrieveContextPathComputationContextPathCompServiceEndPointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeOccupiedSpectrumOccupiedSpectrumById(uuid, localId, coreId, modeId, upperFrequencyLowerFrequency);

        // TODO: test validations
    }
    
    /**
     * Retrieve frequency-constraint
     *
     * Retrieve operation of resource: frequency-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeSupportableSpectrumFrequencyConstraintFrequencyConstraintTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String coreId = null;
        String modeId = null;
        String upperFrequencyLowerFrequency = null;
        FrequencyConstraint response = api.retrieveContextPathComputationContextPathCompServiceEndPointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeSupportableSpectrumFrequencyConstraintFrequencyConstraint(uuid, localId, coreId, modeId, upperFrequencyLowerFrequency);

        // TODO: test validations
    }
    
    /**
     * Retrieve supportable-spectrum
     *
     * Retrieve operation of resource: supportable-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeSupportableSpectrumSupportableSpectrumTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String coreId = null;
        String modeId = null;
        List<String> response = api.retrieveContextPathComputationContextPathCompServiceEndPointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeSupportableSpectrumSupportableSpectrum(uuid, localId, coreId, modeId);

        // TODO: test validations
    }
    
    /**
     * Retrieve supportable-spectrum by ID
     *
     * Retrieve operation of resource: supportable-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeSupportableSpectrumSupportableSpectrumByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String coreId = null;
        String modeId = null;
        String upperFrequencyLowerFrequency = null;
        SpectrumBand response = api.retrieveContextPathComputationContextPathCompServiceEndPointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeSupportableSpectrumSupportableSpectrumById(uuid, localId, coreId, modeId, upperFrequencyLowerFrequency);

        // TODO: test validations
    }
    
    /**
     * Retrieve available-transceiver
     *
     * Retrieve operation of resource: available-transceiver
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverAvailableTransceiverTest() throws ApiException {
        String uuid = null;
        String localId = null;
        AvailableTransceiver response = api.retrieveContextPathComputationContextPathCompServiceEndPointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverAvailableTransceiver(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve core-id
     *
     * Retrieve operation of resource: core-id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverCoreModeRefCoreIdCoreIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String coreModeRef = null;
        List<String> response = api.retrieveContextPathComputationContextPathCompServiceEndPointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverCoreModeRefCoreIdCoreId(uuid, localId, coreModeRef);

        // TODO: test validations
    }
    
    /**
     * Retrieve core-id by ID
     *
     * Retrieve operation of resource: core-id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverCoreModeRefCoreIdCoreIdByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String coreModeRef = null;
        String coreId = null;
        CoreIdSchema response = api.retrieveContextPathComputationContextPathCompServiceEndPointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverCoreModeRefCoreIdCoreIdById(uuid, localId, coreModeRef, coreId);

        // TODO: test validations
    }
    
    /**
     * Retrieve core_mode_ref
     *
     * Retrieve operation of resource: core_mode_ref
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverCoreModeRefCoreModeRefTest() throws ApiException {
        String uuid = null;
        String localId = null;
        List<String> response = api.retrieveContextPathComputationContextPathCompServiceEndPointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverCoreModeRefCoreModeRef(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve core_mode_ref by ID
     *
     * Retrieve operation of resource: core_mode_ref
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverCoreModeRefCoreModeRefByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String coreModeRef = null;
        CoreModeRefSchema response = api.retrieveContextPathComputationContextPathCompServiceEndPointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverCoreModeRefCoreModeRefById(uuid, localId, coreModeRef);

        // TODO: test validations
    }
    
    /**
     * Retrieve mode-id
     *
     * Retrieve operation of resource: mode-id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverCoreModeRefModeIdModeIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String coreModeRef = null;
        List<String> response = api.retrieveContextPathComputationContextPathCompServiceEndPointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverCoreModeRefModeIdModeId(uuid, localId, coreModeRef);

        // TODO: test validations
    }
    
    /**
     * Retrieve mode-id by ID
     *
     * Retrieve operation of resource: mode-id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverCoreModeRefModeIdModeIdByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String coreModeRef = null;
        String modeId = null;
        ModeIdSchema response = api.retrieveContextPathComputationContextPathCompServiceEndPointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverCoreModeRefModeIdModeIdById(uuid, localId, coreModeRef, modeId);

        // TODO: test validations
    }
    
    /**
     * Retrieve frequency-constraint
     *
     * Retrieve operation of resource: frequency-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverSupportableSpectrumFrequencyConstraintFrequencyConstraintTest() throws ApiException {
        String uuid = null;
        String localId = null;
        FrequencyConstraint response = api.retrieveContextPathComputationContextPathCompServiceEndPointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverSupportableSpectrumFrequencyConstraintFrequencyConstraint(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve supportable-spectrum
     *
     * Retrieve operation of resource: supportable-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverSupportableSpectrumSupportableSpectrumTest() throws ApiException {
        String uuid = null;
        String localId = null;
        SpectrumBand response = api.retrieveContextPathComputationContextPathCompServiceEndPointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverSupportableSpectrumSupportableSpectrum(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve max-bw
     *
     * Retrieve operation of resource: max-bw
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverSupportedBandwidthMaxBwMaxBwTest() throws ApiException {
        String uuid = null;
        String localId = null;
        CapacityValue response = api.retrieveContextPathComputationContextPathCompServiceEndPointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverSupportedBandwidthMaxBwMaxBw(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve min-bw
     *
     * Retrieve operation of resource: min-bw
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverSupportedBandwidthMinBwMinBwTest() throws ApiException {
        String uuid = null;
        String localId = null;
        CapacityValue response = api.retrieveContextPathComputationContextPathCompServiceEndPointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverSupportedBandwidthMinBwMinBw(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve supported-bandwidth
     *
     * Retrieve operation of resource: supported-bandwidth
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverSupportedBandwidthSupportedBandwidthTest() throws ApiException {
        String uuid = null;
        String localId = null;
        SupportedBandwidthSchema response = api.retrieveContextPathComputationContextPathCompServiceEndPointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverSupportedBandwidthSupportedBandwidth(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve sdm-pool
     *
     * Retrieve operation of resource: sdm-pool
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointSdmServiceInterfacePointSpecSdmPoolSdmPoolTest() throws ApiException {
        String uuid = null;
        String localId = null;
        SdmPoolCapabilityPac response = api.retrieveContextPathComputationContextPathCompServiceEndPointSdmServiceInterfacePointSpecSdmPoolSdmPool(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve sdm-service-interface-point-spec
     *
     * Retrieve operation of resource: sdm-service-interface-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointSdmServiceInterfacePointSpecSdmServiceInterfacePointSpecTest() throws ApiException {
        String uuid = null;
        String localId = null;
        SdmServiceInterfacePointSpec response = api.retrieveContextPathComputationContextPathCompServiceEndPointSdmServiceInterfacePointSpecSdmServiceInterfacePointSpec(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve available-capacity
     *
     * Retrieve operation of resource: available-capacity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityAvailableCapacityTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        Capacity response = api.retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityAvailableCapacity(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve bandwidth-profile
     *
     * Retrieve operation of resource: bandwidth-profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfileBandwidthProfileTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        BandwidthProfile response = api.retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfileBandwidthProfile(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-burst-size
     *
     * Retrieve operation of resource: committed-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        CapacityValue response = api.retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-information-rate
     *
     * Retrieve operation of resource: committed-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        CapacityValue response = api.retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-burst-size
     *
     * Retrieve operation of resource: peak-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        CapacityValue response = api.retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-information-rate
     *
     * Retrieve operation of resource: peak-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        CapacityValue response = api.retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve total-size
     *
     * Retrieve operation of resource: total-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityTotalSizeTotalSizeTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        CapacityValue response = api.retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointAvailableCapacityTotalSizeTotalSize(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve available-spectrum
     *
     * Retrieve operation of resource: available-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointMediaChannelServiceInterfacePointSpecMcPoolAvailableSpectrumAvailableSpectrumTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        List<String> response = api.retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointMediaChannelServiceInterfacePointSpecMcPoolAvailableSpectrumAvailableSpectrum(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve available-spectrum by ID
     *
     * Retrieve operation of resource: available-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointMediaChannelServiceInterfacePointSpecMcPoolAvailableSpectrumAvailableSpectrumByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        String upperFrequencyLowerFrequency = null;
        SpectrumBand response = api.retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointMediaChannelServiceInterfacePointSpecMcPoolAvailableSpectrumAvailableSpectrumById(uuid, localId, serviceInterfacePointUuid, upperFrequencyLowerFrequency);

        // TODO: test validations
    }
    
    /**
     * Retrieve frequency-constraint
     *
     * Retrieve operation of resource: frequency-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointMediaChannelServiceInterfacePointSpecMcPoolAvailableSpectrumFrequencyConstraintFrequencyConstraintTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        String upperFrequencyLowerFrequency = null;
        FrequencyConstraint response = api.retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointMediaChannelServiceInterfacePointSpecMcPoolAvailableSpectrumFrequencyConstraintFrequencyConstraint(uuid, localId, serviceInterfacePointUuid, upperFrequencyLowerFrequency);

        // TODO: test validations
    }
    
    /**
     * Retrieve mc-pool
     *
     * Retrieve operation of resource: mc-pool
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointMediaChannelServiceInterfacePointSpecMcPoolMcPoolTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        MediaChannelPoolCapabilityPac response = api.retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointMediaChannelServiceInterfacePointSpecMcPoolMcPool(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve frequency-constraint
     *
     * Retrieve operation of resource: frequency-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointMediaChannelServiceInterfacePointSpecMcPoolOccupiedSpectrumFrequencyConstraintFrequencyConstraintTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        String upperFrequencyLowerFrequency = null;
        FrequencyConstraint response = api.retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointMediaChannelServiceInterfacePointSpecMcPoolOccupiedSpectrumFrequencyConstraintFrequencyConstraint(uuid, localId, serviceInterfacePointUuid, upperFrequencyLowerFrequency);

        // TODO: test validations
    }
    
    /**
     * Retrieve occupied-spectrum
     *
     * Retrieve operation of resource: occupied-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointMediaChannelServiceInterfacePointSpecMcPoolOccupiedSpectrumOccupiedSpectrumTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        List<String> response = api.retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointMediaChannelServiceInterfacePointSpecMcPoolOccupiedSpectrumOccupiedSpectrum(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve occupied-spectrum by ID
     *
     * Retrieve operation of resource: occupied-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointMediaChannelServiceInterfacePointSpecMcPoolOccupiedSpectrumOccupiedSpectrumByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        String upperFrequencyLowerFrequency = null;
        SpectrumBand response = api.retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointMediaChannelServiceInterfacePointSpecMcPoolOccupiedSpectrumOccupiedSpectrumById(uuid, localId, serviceInterfacePointUuid, upperFrequencyLowerFrequency);

        // TODO: test validations
    }
    
    /**
     * Retrieve frequency-constraint
     *
     * Retrieve operation of resource: frequency-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointMediaChannelServiceInterfacePointSpecMcPoolSupportableSpectrumFrequencyConstraintFrequencyConstraintTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        String upperFrequencyLowerFrequency = null;
        FrequencyConstraint response = api.retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointMediaChannelServiceInterfacePointSpecMcPoolSupportableSpectrumFrequencyConstraintFrequencyConstraint(uuid, localId, serviceInterfacePointUuid, upperFrequencyLowerFrequency);

        // TODO: test validations
    }
    
    /**
     * Retrieve supportable-spectrum
     *
     * Retrieve operation of resource: supportable-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointMediaChannelServiceInterfacePointSpecMcPoolSupportableSpectrumSupportableSpectrumTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        List<String> response = api.retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointMediaChannelServiceInterfacePointSpecMcPoolSupportableSpectrumSupportableSpectrum(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve supportable-spectrum by ID
     *
     * Retrieve operation of resource: supportable-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointMediaChannelServiceInterfacePointSpecMcPoolSupportableSpectrumSupportableSpectrumByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        String upperFrequencyLowerFrequency = null;
        SpectrumBand response = api.retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointMediaChannelServiceInterfacePointSpecMcPoolSupportableSpectrumSupportableSpectrumById(uuid, localId, serviceInterfacePointUuid, upperFrequencyLowerFrequency);

        // TODO: test validations
    }
    
    /**
     * Retrieve media-channel-service-interface-point-spec
     *
     * Retrieve operation of resource: media-channel-service-interface-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointMediaChannelServiceInterfacePointSpecMediaChannelServiceInterfacePointSpecTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        MediaChannelServiceInterfacePointSpec response = api.retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointMediaChannelServiceInterfacePointSpecMediaChannelServiceInterfacePointSpec(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointNameNameTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        List<String> response = api.retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointNameName(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name by ID
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointNameNameByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        String valueName = null;
        NameAndValue response = api.retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointNameNameById(uuid, localId, serviceInterfacePointUuid, valueName);

        // TODO: test validations
    }
    
    /**
     * Retrieve otsi-capability
     *
     * Retrieve operation of resource: otsi-capability
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointOtsiServiceInterfacePointSpecOtsiCapabilityOtsiCapabilityTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        OtsiCapabilityPac response = api.retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointOtsiServiceInterfacePointSpecOtsiCapabilityOtsiCapability(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve supportable-application-identifier
     *
     * Retrieve operation of resource: supportable-application-identifier
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointOtsiServiceInterfacePointSpecOtsiCapabilitySupportableApplicationIdentifierSupportableApplicationIdentifierTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        List<String> response = api.retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointOtsiServiceInterfacePointSpecOtsiCapabilitySupportableApplicationIdentifierSupportableApplicationIdentifier(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve supportable-application-identifier by ID
     *
     * Retrieve operation of resource: supportable-application-identifier
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointOtsiServiceInterfacePointSpecOtsiCapabilitySupportableApplicationIdentifierSupportableApplicationIdentifierByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        String applicationCode = null;
        ApplicationIdentifier response = api.retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointOtsiServiceInterfacePointSpecOtsiCapabilitySupportableApplicationIdentifierSupportableApplicationIdentifierById(uuid, localId, serviceInterfacePointUuid, applicationCode);

        // TODO: test validations
    }
    
    /**
     * Retrieve frequency-constraint
     *
     * Retrieve operation of resource: frequency-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointOtsiServiceInterfacePointSpecOtsiCapabilitySupportableLowerCentralFrequencyFrequencyConstraintFrequencyConstraintTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        String centralFrequency = null;
        FrequencyConstraint response = api.retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointOtsiServiceInterfacePointSpecOtsiCapabilitySupportableLowerCentralFrequencyFrequencyConstraintFrequencyConstraint(uuid, localId, serviceInterfacePointUuid, centralFrequency);

        // TODO: test validations
    }
    
    /**
     * Retrieve supportable-lower-central-frequency
     *
     * Retrieve operation of resource: supportable-lower-central-frequency
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointOtsiServiceInterfacePointSpecOtsiCapabilitySupportableLowerCentralFrequencySupportableLowerCentralFrequencyTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        List<String> response = api.retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointOtsiServiceInterfacePointSpecOtsiCapabilitySupportableLowerCentralFrequencySupportableLowerCentralFrequency(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve supportable-lower-central-frequency by ID
     *
     * Retrieve operation of resource: supportable-lower-central-frequency
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointOtsiServiceInterfacePointSpecOtsiCapabilitySupportableLowerCentralFrequencySupportableLowerCentralFrequencyByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        String centralFrequency = null;
        CentralFrequency response = api.retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointOtsiServiceInterfacePointSpecOtsiCapabilitySupportableLowerCentralFrequencySupportableLowerCentralFrequencyById(uuid, localId, serviceInterfacePointUuid, centralFrequency);

        // TODO: test validations
    }
    
    /**
     * Retrieve frequency-constraint
     *
     * Retrieve operation of resource: frequency-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointOtsiServiceInterfacePointSpecOtsiCapabilitySupportableUpperCentralFrequencyFrequencyConstraintFrequencyConstraintTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        String centralFrequency = null;
        FrequencyConstraint response = api.retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointOtsiServiceInterfacePointSpecOtsiCapabilitySupportableUpperCentralFrequencyFrequencyConstraintFrequencyConstraint(uuid, localId, serviceInterfacePointUuid, centralFrequency);

        // TODO: test validations
    }
    
    /**
     * Retrieve supportable-upper-central-frequency
     *
     * Retrieve operation of resource: supportable-upper-central-frequency
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointOtsiServiceInterfacePointSpecOtsiCapabilitySupportableUpperCentralFrequencySupportableUpperCentralFrequencyTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        List<String> response = api.retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointOtsiServiceInterfacePointSpecOtsiCapabilitySupportableUpperCentralFrequencySupportableUpperCentralFrequency(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve supportable-upper-central-frequency by ID
     *
     * Retrieve operation of resource: supportable-upper-central-frequency
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointOtsiServiceInterfacePointSpecOtsiCapabilitySupportableUpperCentralFrequencySupportableUpperCentralFrequencyByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        String centralFrequency = null;
        CentralFrequency response = api.retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointOtsiServiceInterfacePointSpecOtsiCapabilitySupportableUpperCentralFrequencySupportableUpperCentralFrequencyById(uuid, localId, serviceInterfacePointUuid, centralFrequency);

        // TODO: test validations
    }
    
    /**
     * Retrieve total-power-warn-threshold
     *
     * Retrieve operation of resource: total-power-warn-threshold
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointOtsiServiceInterfacePointSpecOtsiCapabilityTotalPowerWarnThresholdTotalPowerWarnThresholdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        TotalPowerThresholdPac response = api.retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointOtsiServiceInterfacePointSpecOtsiCapabilityTotalPowerWarnThresholdTotalPowerWarnThreshold(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve otsi-service-interface-point-spec
     *
     * Retrieve operation of resource: otsi-service-interface-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointOtsiServiceInterfacePointSpecOtsiServiceInterfacePointSpecTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        OtsiServiceInterfacePointSpec response = api.retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointOtsiServiceInterfacePointSpecOtsiServiceInterfacePointSpec(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve available-core
     *
     * Retrieve operation of resource: available-core
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableCoreTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        List<String> response = api.retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableCore(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve available-core by ID
     *
     * Retrieve operation of resource: available-core
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableCoreByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        String coreId = null;
        SdmCorePac response = api.retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableCoreById(uuid, localId, serviceInterfacePointUuid, coreId);

        // TODO: test validations
    }
    
    /**
     * Retrieve available-mode
     *
     * Retrieve operation of resource: available-mode
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeAvailableModeTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        String coreId = null;
        List<String> response = api.retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeAvailableMode(uuid, localId, serviceInterfacePointUuid, coreId);

        // TODO: test validations
    }
    
    /**
     * Retrieve available-mode by ID
     *
     * Retrieve operation of resource: available-mode
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeAvailableModeByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        String coreId = null;
        String modeId = null;
        SdmModePac response = api.retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeAvailableModeById(uuid, localId, serviceInterfacePointUuid, coreId, modeId);

        // TODO: test validations
    }
    
    /**
     * Retrieve available-spectrum
     *
     * Retrieve operation of resource: available-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeAvailableSpectrumAvailableSpectrumTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        String coreId = null;
        String modeId = null;
        List<String> response = api.retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeAvailableSpectrumAvailableSpectrum(uuid, localId, serviceInterfacePointUuid, coreId, modeId);

        // TODO: test validations
    }
    
    /**
     * Retrieve available-spectrum by ID
     *
     * Retrieve operation of resource: available-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeAvailableSpectrumAvailableSpectrumByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        String coreId = null;
        String modeId = null;
        String upperFrequencyLowerFrequency = null;
        SpectrumBand response = api.retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeAvailableSpectrumAvailableSpectrumById(uuid, localId, serviceInterfacePointUuid, coreId, modeId, upperFrequencyLowerFrequency);

        // TODO: test validations
    }
    
    /**
     * Retrieve frequency-constraint
     *
     * Retrieve operation of resource: frequency-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeAvailableSpectrumFrequencyConstraintFrequencyConstraintTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        String coreId = null;
        String modeId = null;
        String upperFrequencyLowerFrequency = null;
        FrequencyConstraint response = api.retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeAvailableSpectrumFrequencyConstraintFrequencyConstraint(uuid, localId, serviceInterfacePointUuid, coreId, modeId, upperFrequencyLowerFrequency);

        // TODO: test validations
    }
    
    /**
     * Retrieve frequency-constraint
     *
     * Retrieve operation of resource: frequency-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeOccupiedSpectrumFrequencyConstraintFrequencyConstraintTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        String coreId = null;
        String modeId = null;
        String upperFrequencyLowerFrequency = null;
        FrequencyConstraint response = api.retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeOccupiedSpectrumFrequencyConstraintFrequencyConstraint(uuid, localId, serviceInterfacePointUuid, coreId, modeId, upperFrequencyLowerFrequency);

        // TODO: test validations
    }
    
    /**
     * Retrieve occupied-spectrum
     *
     * Retrieve operation of resource: occupied-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeOccupiedSpectrumOccupiedSpectrumTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        String coreId = null;
        String modeId = null;
        List<String> response = api.retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeOccupiedSpectrumOccupiedSpectrum(uuid, localId, serviceInterfacePointUuid, coreId, modeId);

        // TODO: test validations
    }
    
    /**
     * Retrieve occupied-spectrum by ID
     *
     * Retrieve operation of resource: occupied-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeOccupiedSpectrumOccupiedSpectrumByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        String coreId = null;
        String modeId = null;
        String upperFrequencyLowerFrequency = null;
        SpectrumBand response = api.retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeOccupiedSpectrumOccupiedSpectrumById(uuid, localId, serviceInterfacePointUuid, coreId, modeId, upperFrequencyLowerFrequency);

        // TODO: test validations
    }
    
    /**
     * Retrieve frequency-constraint
     *
     * Retrieve operation of resource: frequency-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeSupportableSpectrumFrequencyConstraintFrequencyConstraintTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        String coreId = null;
        String modeId = null;
        String upperFrequencyLowerFrequency = null;
        FrequencyConstraint response = api.retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeSupportableSpectrumFrequencyConstraintFrequencyConstraint(uuid, localId, serviceInterfacePointUuid, coreId, modeId, upperFrequencyLowerFrequency);

        // TODO: test validations
    }
    
    /**
     * Retrieve supportable-spectrum
     *
     * Retrieve operation of resource: supportable-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeSupportableSpectrumSupportableSpectrumTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        String coreId = null;
        String modeId = null;
        List<String> response = api.retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeSupportableSpectrumSupportableSpectrum(uuid, localId, serviceInterfacePointUuid, coreId, modeId);

        // TODO: test validations
    }
    
    /**
     * Retrieve supportable-spectrum by ID
     *
     * Retrieve operation of resource: supportable-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeSupportableSpectrumSupportableSpectrumByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        String coreId = null;
        String modeId = null;
        String upperFrequencyLowerFrequency = null;
        SpectrumBand response = api.retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeSupportableSpectrumSupportableSpectrumById(uuid, localId, serviceInterfacePointUuid, coreId, modeId, upperFrequencyLowerFrequency);

        // TODO: test validations
    }
    
    /**
     * Retrieve available-transceiver
     *
     * Retrieve operation of resource: available-transceiver
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverAvailableTransceiverTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        AvailableTransceiver response = api.retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverAvailableTransceiver(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve core-id
     *
     * Retrieve operation of resource: core-id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverCoreModeRefCoreIdCoreIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        String coreModeRef = null;
        List<String> response = api.retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverCoreModeRefCoreIdCoreId(uuid, localId, serviceInterfacePointUuid, coreModeRef);

        // TODO: test validations
    }
    
    /**
     * Retrieve core-id by ID
     *
     * Retrieve operation of resource: core-id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverCoreModeRefCoreIdCoreIdByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        String coreModeRef = null;
        String coreId = null;
        CoreIdSchema response = api.retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverCoreModeRefCoreIdCoreIdById(uuid, localId, serviceInterfacePointUuid, coreModeRef, coreId);

        // TODO: test validations
    }
    
    /**
     * Retrieve core_mode_ref
     *
     * Retrieve operation of resource: core_mode_ref
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverCoreModeRefCoreModeRefTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        List<String> response = api.retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverCoreModeRefCoreModeRef(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve core_mode_ref by ID
     *
     * Retrieve operation of resource: core_mode_ref
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverCoreModeRefCoreModeRefByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        String coreModeRef = null;
        CoreModeRefSchema response = api.retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverCoreModeRefCoreModeRefById(uuid, localId, serviceInterfacePointUuid, coreModeRef);

        // TODO: test validations
    }
    
    /**
     * Retrieve mode-id
     *
     * Retrieve operation of resource: mode-id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverCoreModeRefModeIdModeIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        String coreModeRef = null;
        List<String> response = api.retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverCoreModeRefModeIdModeId(uuid, localId, serviceInterfacePointUuid, coreModeRef);

        // TODO: test validations
    }
    
    /**
     * Retrieve mode-id by ID
     *
     * Retrieve operation of resource: mode-id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverCoreModeRefModeIdModeIdByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        String coreModeRef = null;
        String modeId = null;
        ModeIdSchema response = api.retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverCoreModeRefModeIdModeIdById(uuid, localId, serviceInterfacePointUuid, coreModeRef, modeId);

        // TODO: test validations
    }
    
    /**
     * Retrieve frequency-constraint
     *
     * Retrieve operation of resource: frequency-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverSupportableSpectrumFrequencyConstraintFrequencyConstraintTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        FrequencyConstraint response = api.retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverSupportableSpectrumFrequencyConstraintFrequencyConstraint(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve supportable-spectrum
     *
     * Retrieve operation of resource: supportable-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverSupportableSpectrumSupportableSpectrumTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        SpectrumBand response = api.retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverSupportableSpectrumSupportableSpectrum(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve max-bw
     *
     * Retrieve operation of resource: max-bw
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverSupportedBandwidthMaxBwMaxBwTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        CapacityValue response = api.retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverSupportedBandwidthMaxBwMaxBw(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve min-bw
     *
     * Retrieve operation of resource: min-bw
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverSupportedBandwidthMinBwMinBwTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        CapacityValue response = api.retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverSupportedBandwidthMinBwMinBw(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve supported-bandwidth
     *
     * Retrieve operation of resource: supported-bandwidth
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverSupportedBandwidthSupportedBandwidthTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        SupportedBandwidthSchema response = api.retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverSupportedBandwidthSupportedBandwidth(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve sdm-pool
     *
     * Retrieve operation of resource: sdm-pool
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolSdmPoolTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        SdmPoolCapabilityPac response = api.retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolSdmPool(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve sdm-service-interface-point-spec
     *
     * Retrieve operation of resource: sdm-service-interface-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmServiceInterfacePointSpecTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        SdmServiceInterfacePointSpec response = api.retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmServiceInterfacePointSpec(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve service-interface-point
     *
     * Retrieve operation of resource: service-interface-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePointTest() throws ApiException {
        String uuid = null;
        String localId = null;
        ServiceInterfacePointRef response = api.retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePoint(uuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve service-interface-point by ID
     *
     * Retrieve operation of resource: service-interface-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePointByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        ServiceInterfacePointSchema response = api.retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePointById(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve bandwidth-profile
     *
     * Retrieve operation of resource: bandwidth-profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfileBandwidthProfileTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        BandwidthProfile response = api.retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfileBandwidthProfile(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-burst-size
     *
     * Retrieve operation of resource: committed-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        CapacityValue response = api.retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-information-rate
     *
     * Retrieve operation of resource: committed-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        CapacityValue response = api.retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-burst-size
     *
     * Retrieve operation of resource: peak-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        CapacityValue response = api.retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-information-rate
     *
     * Retrieve operation of resource: peak-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        CapacityValue response = api.retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve total-potential-capacity
     *
     * Retrieve operation of resource: total-potential-capacity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityTotalPotentialCapacityTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        Capacity response = api.retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityTotalPotentialCapacity(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve total-size
     *
     * Retrieve operation of resource: total-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityTotalSizeTotalSizeTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        CapacityValue response = api.retrieveContextPathComputationContextPathCompServiceEndPointServiceInterfacePointTotalPotentialCapacityTotalSizeTotalSize(uuid, localId, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceNameNameTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextPathComputationContextPathCompServiceNameName(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name by ID
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceNameNameByIdTest() throws ApiException {
        String uuid = null;
        String valueName = null;
        NameAndValue response = api.retrieveContextPathComputationContextPathCompServiceNameNameById(uuid, valueName);

        // TODO: test validations
    }
    
    /**
     * Retrieve name
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceObjectiveFunctionNameNameTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextPathComputationContextPathCompServiceObjectiveFunctionNameName(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name by ID
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceObjectiveFunctionNameNameByIdTest() throws ApiException {
        String uuid = null;
        String valueName = null;
        NameAndValue response = api.retrieveContextPathComputationContextPathCompServiceObjectiveFunctionNameNameById(uuid, valueName);

        // TODO: test validations
    }
    
    /**
     * Retrieve objective-function
     *
     * Retrieve operation of resource: objective-function
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceObjectiveFunctionObjectiveFunctionTest() throws ApiException {
        String uuid = null;
        PathObjectiveFunction response = api.retrieveContextPathComputationContextPathCompServiceObjectiveFunctionObjectiveFunction(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceOptimizationConstraintNameNameTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextPathComputationContextPathCompServiceOptimizationConstraintNameName(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name by ID
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceOptimizationConstraintNameNameByIdTest() throws ApiException {
        String uuid = null;
        String valueName = null;
        NameAndValue response = api.retrieveContextPathComputationContextPathCompServiceOptimizationConstraintNameNameById(uuid, valueName);

        // TODO: test validations
    }
    
    /**
     * Retrieve optimization-constraint
     *
     * Retrieve operation of resource: optimization-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceOptimizationConstraintOptimizationConstraintTest() throws ApiException {
        String uuid = null;
        PathOptimizationConstraint response = api.retrieveContextPathComputationContextPathCompServiceOptimizationConstraintOptimizationConstraint(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve path-comp-service
     *
     * Retrieve operation of resource: path-comp-service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServicePathCompServiceTest() throws ApiException {
        List<String> response = api.retrieveContextPathComputationContextPathCompServicePathCompService();

        // TODO: test validations
    }
    
    /**
     * Retrieve path-comp-service by ID
     *
     * Retrieve operation of resource: path-comp-service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServicePathCompServiceByIdTest() throws ApiException {
        String uuid = null;
        PathComputationService response = api.retrieveContextPathComputationContextPathCompServicePathCompServiceById(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve path
     *
     * Retrieve operation of resource: path
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServicePathPathTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextPathComputationContextPathCompServicePathPath(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve path by ID
     *
     * Retrieve operation of resource: path
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServicePathPathByIdTest() throws ApiException {
        String uuid = null;
        String pathUuid = null;
        PathRef response = api.retrieveContextPathComputationContextPathCompServicePathPathById(uuid, pathUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve cost-characteristic
     *
     * Retrieve operation of resource: cost-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristicTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextPathComputationContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristic(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve cost-characteristic by ID
     *
     * Retrieve operation of resource: cost-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String costName = null;
        CostCharacteristic response = api.retrieveContextPathComputationContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristicById(uuid, costName);

        // TODO: test validations
    }
    
    /**
     * Retrieve latency-characteristic
     *
     * Retrieve operation of resource: latency-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristicTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextPathComputationContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristic(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve latency-characteristic by ID
     *
     * Retrieve operation of resource: latency-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String trafficPropertyName = null;
        LatencyCharacteristic response = api.retrieveContextPathComputationContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristicById(uuid, trafficPropertyName);

        // TODO: test validations
    }
    
    /**
     * Retrieve risk-diversity-characteristic
     *
     * Retrieve operation of resource: risk-diversity-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristicTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextPathComputationContextPathCompServiceRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristic(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve risk-diversity-characteristic by ID
     *
     * Retrieve operation of resource: risk-diversity-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String riskCharacteristicName = null;
        RiskCharacteristic response = api.retrieveContextPathComputationContextPathCompServiceRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristicById(uuid, riskCharacteristicName);

        // TODO: test validations
    }
    
    /**
     * Retrieve routing-constraint
     *
     * Retrieve operation of resource: routing-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceRoutingConstraintRoutingConstraintTest() throws ApiException {
        String uuid = null;
        RoutingConstraint response = api.retrieveContextPathComputationContextPathCompServiceRoutingConstraintRoutingConstraint(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve topology-constraint
     *
     * Retrieve operation of resource: topology-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathCompServiceTopologyConstraintTopologyConstraintTest() throws ApiException {
        String uuid = null;
        TopologyConstraint response = api.retrieveContextPathComputationContextPathCompServiceTopologyConstraintTopologyConstraint(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve path-computation-context
     *
     * Retrieve operation of resource: path-computation-context
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathComputationContextTest() throws ApiException {
        PathComputationContext response = api.retrieveContextPathComputationContextPathComputationContext();

        // TODO: test validations
    }
    
    /**
     * Retrieve link
     *
     * Retrieve operation of resource: link
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathLinkLinkTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextPathComputationContextPathLinkLink(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve link by ID
     *
     * Retrieve operation of resource: link
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathLinkLinkByIdTest() throws ApiException {
        String uuid = null;
        String topologyUuidLinkUuid = null;
        LinkRef response = api.retrieveContextPathComputationContextPathLinkLinkById(uuid, topologyUuidLinkUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathNameNameTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextPathComputationContextPathNameName(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name by ID
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathNameNameByIdTest() throws ApiException {
        String uuid = null;
        String valueName = null;
        NameAndValue response = api.retrieveContextPathComputationContextPathNameNameById(uuid, valueName);

        // TODO: test validations
    }
    
    /**
     * Retrieve path
     *
     * Retrieve operation of resource: path
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathPathTest() throws ApiException {
        List<String> response = api.retrieveContextPathComputationContextPathPath();

        // TODO: test validations
    }
    
    /**
     * Retrieve path by ID
     *
     * Retrieve operation of resource: path
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathPathByIdTest() throws ApiException {
        String uuid = null;
        Path response = api.retrieveContextPathComputationContextPathPathById(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve cost-characteristic
     *
     * Retrieve operation of resource: cost-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathRoutingConstraintCostCharacteristicCostCharacteristicTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextPathComputationContextPathRoutingConstraintCostCharacteristicCostCharacteristic(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve cost-characteristic by ID
     *
     * Retrieve operation of resource: cost-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathRoutingConstraintCostCharacteristicCostCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String costName = null;
        CostCharacteristic response = api.retrieveContextPathComputationContextPathRoutingConstraintCostCharacteristicCostCharacteristicById(uuid, costName);

        // TODO: test validations
    }
    
    /**
     * Retrieve latency-characteristic
     *
     * Retrieve operation of resource: latency-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathRoutingConstraintLatencyCharacteristicLatencyCharacteristicTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextPathComputationContextPathRoutingConstraintLatencyCharacteristicLatencyCharacteristic(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve latency-characteristic by ID
     *
     * Retrieve operation of resource: latency-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathRoutingConstraintLatencyCharacteristicLatencyCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String trafficPropertyName = null;
        LatencyCharacteristic response = api.retrieveContextPathComputationContextPathRoutingConstraintLatencyCharacteristicLatencyCharacteristicById(uuid, trafficPropertyName);

        // TODO: test validations
    }
    
    /**
     * Retrieve risk-diversity-characteristic
     *
     * Retrieve operation of resource: risk-diversity-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristicTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextPathComputationContextPathRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristic(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve risk-diversity-characteristic by ID
     *
     * Retrieve operation of resource: risk-diversity-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String riskCharacteristicName = null;
        RiskCharacteristic response = api.retrieveContextPathComputationContextPathRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristicById(uuid, riskCharacteristicName);

        // TODO: test validations
    }
    
    /**
     * Retrieve routing-constraint
     *
     * Retrieve operation of resource: routing-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextPathComputationContextPathRoutingConstraintRoutingConstraintTest() throws ApiException {
        String uuid = null;
        RoutingConstraint response = api.retrieveContextPathComputationContextPathRoutingConstraintRoutingConstraint(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve available-capacity
     *
     * Retrieve operation of resource: available-capacity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointAvailableCapacityAvailableCapacityTest() throws ApiException {
        String uuid = null;
        Capacity response = api.retrieveContextServiceInterfacePointAvailableCapacityAvailableCapacity(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve bandwidth-profile
     *
     * Retrieve operation of resource: bandwidth-profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileBandwidthProfileTest() throws ApiException {
        String uuid = null;
        BandwidthProfile response = api.retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileBandwidthProfile(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-burst-size
     *
     * Retrieve operation of resource: committed-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeTest() throws ApiException {
        String uuid = null;
        CapacityValue response = api.retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-information-rate
     *
     * Retrieve operation of resource: committed-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateTest() throws ApiException {
        String uuid = null;
        CapacityValue response = api.retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-burst-size
     *
     * Retrieve operation of resource: peak-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeTest() throws ApiException {
        String uuid = null;
        CapacityValue response = api.retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-information-rate
     *
     * Retrieve operation of resource: peak-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateTest() throws ApiException {
        String uuid = null;
        CapacityValue response = api.retrieveContextServiceInterfacePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve total-size
     *
     * Retrieve operation of resource: total-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointAvailableCapacityTotalSizeTotalSizeTest() throws ApiException {
        String uuid = null;
        CapacityValue response = api.retrieveContextServiceInterfacePointAvailableCapacityTotalSizeTotalSize(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve available-spectrum
     *
     * Retrieve operation of resource: available-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointMediaChannelServiceInterfacePointSpecMcPoolAvailableSpectrumAvailableSpectrumTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextServiceInterfacePointMediaChannelServiceInterfacePointSpecMcPoolAvailableSpectrumAvailableSpectrum(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve available-spectrum by ID
     *
     * Retrieve operation of resource: available-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointMediaChannelServiceInterfacePointSpecMcPoolAvailableSpectrumAvailableSpectrumByIdTest() throws ApiException {
        String uuid = null;
        String upperFrequencyLowerFrequency = null;
        SpectrumBand response = api.retrieveContextServiceInterfacePointMediaChannelServiceInterfacePointSpecMcPoolAvailableSpectrumAvailableSpectrumById(uuid, upperFrequencyLowerFrequency);

        // TODO: test validations
    }
    
    /**
     * Retrieve frequency-constraint
     *
     * Retrieve operation of resource: frequency-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointMediaChannelServiceInterfacePointSpecMcPoolAvailableSpectrumFrequencyConstraintFrequencyConstraintTest() throws ApiException {
        String uuid = null;
        String upperFrequencyLowerFrequency = null;
        FrequencyConstraint response = api.retrieveContextServiceInterfacePointMediaChannelServiceInterfacePointSpecMcPoolAvailableSpectrumFrequencyConstraintFrequencyConstraint(uuid, upperFrequencyLowerFrequency);

        // TODO: test validations
    }
    
    /**
     * Retrieve mc-pool
     *
     * Retrieve operation of resource: mc-pool
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointMediaChannelServiceInterfacePointSpecMcPoolMcPoolTest() throws ApiException {
        String uuid = null;
        MediaChannelPoolCapabilityPac response = api.retrieveContextServiceInterfacePointMediaChannelServiceInterfacePointSpecMcPoolMcPool(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve frequency-constraint
     *
     * Retrieve operation of resource: frequency-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointMediaChannelServiceInterfacePointSpecMcPoolOccupiedSpectrumFrequencyConstraintFrequencyConstraintTest() throws ApiException {
        String uuid = null;
        String upperFrequencyLowerFrequency = null;
        FrequencyConstraint response = api.retrieveContextServiceInterfacePointMediaChannelServiceInterfacePointSpecMcPoolOccupiedSpectrumFrequencyConstraintFrequencyConstraint(uuid, upperFrequencyLowerFrequency);

        // TODO: test validations
    }
    
    /**
     * Retrieve occupied-spectrum
     *
     * Retrieve operation of resource: occupied-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointMediaChannelServiceInterfacePointSpecMcPoolOccupiedSpectrumOccupiedSpectrumTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextServiceInterfacePointMediaChannelServiceInterfacePointSpecMcPoolOccupiedSpectrumOccupiedSpectrum(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve occupied-spectrum by ID
     *
     * Retrieve operation of resource: occupied-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointMediaChannelServiceInterfacePointSpecMcPoolOccupiedSpectrumOccupiedSpectrumByIdTest() throws ApiException {
        String uuid = null;
        String upperFrequencyLowerFrequency = null;
        SpectrumBand response = api.retrieveContextServiceInterfacePointMediaChannelServiceInterfacePointSpecMcPoolOccupiedSpectrumOccupiedSpectrumById(uuid, upperFrequencyLowerFrequency);

        // TODO: test validations
    }
    
    /**
     * Retrieve frequency-constraint
     *
     * Retrieve operation of resource: frequency-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointMediaChannelServiceInterfacePointSpecMcPoolSupportableSpectrumFrequencyConstraintFrequencyConstraintTest() throws ApiException {
        String uuid = null;
        String upperFrequencyLowerFrequency = null;
        FrequencyConstraint response = api.retrieveContextServiceInterfacePointMediaChannelServiceInterfacePointSpecMcPoolSupportableSpectrumFrequencyConstraintFrequencyConstraint(uuid, upperFrequencyLowerFrequency);

        // TODO: test validations
    }
    
    /**
     * Retrieve supportable-spectrum
     *
     * Retrieve operation of resource: supportable-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointMediaChannelServiceInterfacePointSpecMcPoolSupportableSpectrumSupportableSpectrumTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextServiceInterfacePointMediaChannelServiceInterfacePointSpecMcPoolSupportableSpectrumSupportableSpectrum(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve supportable-spectrum by ID
     *
     * Retrieve operation of resource: supportable-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointMediaChannelServiceInterfacePointSpecMcPoolSupportableSpectrumSupportableSpectrumByIdTest() throws ApiException {
        String uuid = null;
        String upperFrequencyLowerFrequency = null;
        SpectrumBand response = api.retrieveContextServiceInterfacePointMediaChannelServiceInterfacePointSpecMcPoolSupportableSpectrumSupportableSpectrumById(uuid, upperFrequencyLowerFrequency);

        // TODO: test validations
    }
    
    /**
     * Retrieve media-channel-service-interface-point-spec
     *
     * Retrieve operation of resource: media-channel-service-interface-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointMediaChannelServiceInterfacePointSpecMediaChannelServiceInterfacePointSpecTest() throws ApiException {
        String uuid = null;
        MediaChannelServiceInterfacePointSpec response = api.retrieveContextServiceInterfacePointMediaChannelServiceInterfacePointSpecMediaChannelServiceInterfacePointSpec(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointNameNameTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextServiceInterfacePointNameName(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name by ID
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointNameNameByIdTest() throws ApiException {
        String uuid = null;
        String valueName = null;
        NameAndValue response = api.retrieveContextServiceInterfacePointNameNameById(uuid, valueName);

        // TODO: test validations
    }
    
    /**
     * Retrieve otsi-capability
     *
     * Retrieve operation of resource: otsi-capability
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointOtsiServiceInterfacePointSpecOtsiCapabilityOtsiCapabilityTest() throws ApiException {
        String uuid = null;
        OtsiCapabilityPac response = api.retrieveContextServiceInterfacePointOtsiServiceInterfacePointSpecOtsiCapabilityOtsiCapability(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve supportable-application-identifier
     *
     * Retrieve operation of resource: supportable-application-identifier
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointOtsiServiceInterfacePointSpecOtsiCapabilitySupportableApplicationIdentifierSupportableApplicationIdentifierTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextServiceInterfacePointOtsiServiceInterfacePointSpecOtsiCapabilitySupportableApplicationIdentifierSupportableApplicationIdentifier(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve supportable-application-identifier by ID
     *
     * Retrieve operation of resource: supportable-application-identifier
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointOtsiServiceInterfacePointSpecOtsiCapabilitySupportableApplicationIdentifierSupportableApplicationIdentifierByIdTest() throws ApiException {
        String uuid = null;
        String applicationCode = null;
        ApplicationIdentifier response = api.retrieveContextServiceInterfacePointOtsiServiceInterfacePointSpecOtsiCapabilitySupportableApplicationIdentifierSupportableApplicationIdentifierById(uuid, applicationCode);

        // TODO: test validations
    }
    
    /**
     * Retrieve frequency-constraint
     *
     * Retrieve operation of resource: frequency-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointOtsiServiceInterfacePointSpecOtsiCapabilitySupportableLowerCentralFrequencyFrequencyConstraintFrequencyConstraintTest() throws ApiException {
        String uuid = null;
        String centralFrequency = null;
        FrequencyConstraint response = api.retrieveContextServiceInterfacePointOtsiServiceInterfacePointSpecOtsiCapabilitySupportableLowerCentralFrequencyFrequencyConstraintFrequencyConstraint(uuid, centralFrequency);

        // TODO: test validations
    }
    
    /**
     * Retrieve supportable-lower-central-frequency
     *
     * Retrieve operation of resource: supportable-lower-central-frequency
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointOtsiServiceInterfacePointSpecOtsiCapabilitySupportableLowerCentralFrequencySupportableLowerCentralFrequencyTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextServiceInterfacePointOtsiServiceInterfacePointSpecOtsiCapabilitySupportableLowerCentralFrequencySupportableLowerCentralFrequency(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve supportable-lower-central-frequency by ID
     *
     * Retrieve operation of resource: supportable-lower-central-frequency
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointOtsiServiceInterfacePointSpecOtsiCapabilitySupportableLowerCentralFrequencySupportableLowerCentralFrequencyByIdTest() throws ApiException {
        String uuid = null;
        String centralFrequency = null;
        CentralFrequency response = api.retrieveContextServiceInterfacePointOtsiServiceInterfacePointSpecOtsiCapabilitySupportableLowerCentralFrequencySupportableLowerCentralFrequencyById(uuid, centralFrequency);

        // TODO: test validations
    }
    
    /**
     * Retrieve frequency-constraint
     *
     * Retrieve operation of resource: frequency-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointOtsiServiceInterfacePointSpecOtsiCapabilitySupportableUpperCentralFrequencyFrequencyConstraintFrequencyConstraintTest() throws ApiException {
        String uuid = null;
        String centralFrequency = null;
        FrequencyConstraint response = api.retrieveContextServiceInterfacePointOtsiServiceInterfacePointSpecOtsiCapabilitySupportableUpperCentralFrequencyFrequencyConstraintFrequencyConstraint(uuid, centralFrequency);

        // TODO: test validations
    }
    
    /**
     * Retrieve supportable-upper-central-frequency
     *
     * Retrieve operation of resource: supportable-upper-central-frequency
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointOtsiServiceInterfacePointSpecOtsiCapabilitySupportableUpperCentralFrequencySupportableUpperCentralFrequencyTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextServiceInterfacePointOtsiServiceInterfacePointSpecOtsiCapabilitySupportableUpperCentralFrequencySupportableUpperCentralFrequency(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve supportable-upper-central-frequency by ID
     *
     * Retrieve operation of resource: supportable-upper-central-frequency
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointOtsiServiceInterfacePointSpecOtsiCapabilitySupportableUpperCentralFrequencySupportableUpperCentralFrequencyByIdTest() throws ApiException {
        String uuid = null;
        String centralFrequency = null;
        CentralFrequency response = api.retrieveContextServiceInterfacePointOtsiServiceInterfacePointSpecOtsiCapabilitySupportableUpperCentralFrequencySupportableUpperCentralFrequencyById(uuid, centralFrequency);

        // TODO: test validations
    }
    
    /**
     * Retrieve total-power-warn-threshold
     *
     * Retrieve operation of resource: total-power-warn-threshold
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointOtsiServiceInterfacePointSpecOtsiCapabilityTotalPowerWarnThresholdTotalPowerWarnThresholdTest() throws ApiException {
        String uuid = null;
        TotalPowerThresholdPac response = api.retrieveContextServiceInterfacePointOtsiServiceInterfacePointSpecOtsiCapabilityTotalPowerWarnThresholdTotalPowerWarnThreshold(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve otsi-service-interface-point-spec
     *
     * Retrieve operation of resource: otsi-service-interface-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointOtsiServiceInterfacePointSpecOtsiServiceInterfacePointSpecTest() throws ApiException {
        String uuid = null;
        OtsiServiceInterfacePointSpec response = api.retrieveContextServiceInterfacePointOtsiServiceInterfacePointSpecOtsiServiceInterfacePointSpec(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve available-core
     *
     * Retrieve operation of resource: available-core
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableCoreTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableCore(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve available-core by ID
     *
     * Retrieve operation of resource: available-core
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableCoreByIdTest() throws ApiException {
        String uuid = null;
        String coreId = null;
        SdmCorePac response = api.retrieveContextServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableCoreById(uuid, coreId);

        // TODO: test validations
    }
    
    /**
     * Retrieve available-mode
     *
     * Retrieve operation of resource: available-mode
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeAvailableModeTest() throws ApiException {
        String uuid = null;
        String coreId = null;
        List<String> response = api.retrieveContextServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeAvailableMode(uuid, coreId);

        // TODO: test validations
    }
    
    /**
     * Retrieve available-mode by ID
     *
     * Retrieve operation of resource: available-mode
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeAvailableModeByIdTest() throws ApiException {
        String uuid = null;
        String coreId = null;
        String modeId = null;
        SdmModePac response = api.retrieveContextServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeAvailableModeById(uuid, coreId, modeId);

        // TODO: test validations
    }
    
    /**
     * Retrieve available-spectrum
     *
     * Retrieve operation of resource: available-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeAvailableSpectrumAvailableSpectrumTest() throws ApiException {
        String uuid = null;
        String coreId = null;
        String modeId = null;
        List<String> response = api.retrieveContextServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeAvailableSpectrumAvailableSpectrum(uuid, coreId, modeId);

        // TODO: test validations
    }
    
    /**
     * Retrieve available-spectrum by ID
     *
     * Retrieve operation of resource: available-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeAvailableSpectrumAvailableSpectrumByIdTest() throws ApiException {
        String uuid = null;
        String coreId = null;
        String modeId = null;
        String upperFrequencyLowerFrequency = null;
        SpectrumBand response = api.retrieveContextServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeAvailableSpectrumAvailableSpectrumById(uuid, coreId, modeId, upperFrequencyLowerFrequency);

        // TODO: test validations
    }
    
    /**
     * Retrieve frequency-constraint
     *
     * Retrieve operation of resource: frequency-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeAvailableSpectrumFrequencyConstraintFrequencyConstraintTest() throws ApiException {
        String uuid = null;
        String coreId = null;
        String modeId = null;
        String upperFrequencyLowerFrequency = null;
        FrequencyConstraint response = api.retrieveContextServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeAvailableSpectrumFrequencyConstraintFrequencyConstraint(uuid, coreId, modeId, upperFrequencyLowerFrequency);

        // TODO: test validations
    }
    
    /**
     * Retrieve frequency-constraint
     *
     * Retrieve operation of resource: frequency-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeOccupiedSpectrumFrequencyConstraintFrequencyConstraintTest() throws ApiException {
        String uuid = null;
        String coreId = null;
        String modeId = null;
        String upperFrequencyLowerFrequency = null;
        FrequencyConstraint response = api.retrieveContextServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeOccupiedSpectrumFrequencyConstraintFrequencyConstraint(uuid, coreId, modeId, upperFrequencyLowerFrequency);

        // TODO: test validations
    }
    
    /**
     * Retrieve occupied-spectrum
     *
     * Retrieve operation of resource: occupied-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeOccupiedSpectrumOccupiedSpectrumTest() throws ApiException {
        String uuid = null;
        String coreId = null;
        String modeId = null;
        List<String> response = api.retrieveContextServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeOccupiedSpectrumOccupiedSpectrum(uuid, coreId, modeId);

        // TODO: test validations
    }
    
    /**
     * Retrieve occupied-spectrum by ID
     *
     * Retrieve operation of resource: occupied-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeOccupiedSpectrumOccupiedSpectrumByIdTest() throws ApiException {
        String uuid = null;
        String coreId = null;
        String modeId = null;
        String upperFrequencyLowerFrequency = null;
        SpectrumBand response = api.retrieveContextServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeOccupiedSpectrumOccupiedSpectrumById(uuid, coreId, modeId, upperFrequencyLowerFrequency);

        // TODO: test validations
    }
    
    /**
     * Retrieve frequency-constraint
     *
     * Retrieve operation of resource: frequency-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeSupportableSpectrumFrequencyConstraintFrequencyConstraintTest() throws ApiException {
        String uuid = null;
        String coreId = null;
        String modeId = null;
        String upperFrequencyLowerFrequency = null;
        FrequencyConstraint response = api.retrieveContextServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeSupportableSpectrumFrequencyConstraintFrequencyConstraint(uuid, coreId, modeId, upperFrequencyLowerFrequency);

        // TODO: test validations
    }
    
    /**
     * Retrieve supportable-spectrum
     *
     * Retrieve operation of resource: supportable-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeSupportableSpectrumSupportableSpectrumTest() throws ApiException {
        String uuid = null;
        String coreId = null;
        String modeId = null;
        List<String> response = api.retrieveContextServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeSupportableSpectrumSupportableSpectrum(uuid, coreId, modeId);

        // TODO: test validations
    }
    
    /**
     * Retrieve supportable-spectrum by ID
     *
     * Retrieve operation of resource: supportable-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeSupportableSpectrumSupportableSpectrumByIdTest() throws ApiException {
        String uuid = null;
        String coreId = null;
        String modeId = null;
        String upperFrequencyLowerFrequency = null;
        SpectrumBand response = api.retrieveContextServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableCoreAvailableModeSupportableSpectrumSupportableSpectrumById(uuid, coreId, modeId, upperFrequencyLowerFrequency);

        // TODO: test validations
    }
    
    /**
     * Retrieve available-transceiver
     *
     * Retrieve operation of resource: available-transceiver
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverAvailableTransceiverTest() throws ApiException {
        String uuid = null;
        AvailableTransceiver response = api.retrieveContextServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverAvailableTransceiver(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve core-id
     *
     * Retrieve operation of resource: core-id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverCoreModeRefCoreIdCoreIdTest() throws ApiException {
        String uuid = null;
        String coreModeRef = null;
        List<String> response = api.retrieveContextServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverCoreModeRefCoreIdCoreId(uuid, coreModeRef);

        // TODO: test validations
    }
    
    /**
     * Retrieve core-id by ID
     *
     * Retrieve operation of resource: core-id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverCoreModeRefCoreIdCoreIdByIdTest() throws ApiException {
        String uuid = null;
        String coreModeRef = null;
        String coreId = null;
        CoreIdSchema response = api.retrieveContextServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverCoreModeRefCoreIdCoreIdById(uuid, coreModeRef, coreId);

        // TODO: test validations
    }
    
    /**
     * Retrieve core_mode_ref
     *
     * Retrieve operation of resource: core_mode_ref
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverCoreModeRefCoreModeRefTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverCoreModeRefCoreModeRef(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve core_mode_ref by ID
     *
     * Retrieve operation of resource: core_mode_ref
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverCoreModeRefCoreModeRefByIdTest() throws ApiException {
        String uuid = null;
        String coreModeRef = null;
        CoreModeRefSchema response = api.retrieveContextServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverCoreModeRefCoreModeRefById(uuid, coreModeRef);

        // TODO: test validations
    }
    
    /**
     * Retrieve mode-id
     *
     * Retrieve operation of resource: mode-id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverCoreModeRefModeIdModeIdTest() throws ApiException {
        String uuid = null;
        String coreModeRef = null;
        List<String> response = api.retrieveContextServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverCoreModeRefModeIdModeId(uuid, coreModeRef);

        // TODO: test validations
    }
    
    /**
     * Retrieve mode-id by ID
     *
     * Retrieve operation of resource: mode-id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverCoreModeRefModeIdModeIdByIdTest() throws ApiException {
        String uuid = null;
        String coreModeRef = null;
        String modeId = null;
        ModeIdSchema response = api.retrieveContextServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverCoreModeRefModeIdModeIdById(uuid, coreModeRef, modeId);

        // TODO: test validations
    }
    
    /**
     * Retrieve frequency-constraint
     *
     * Retrieve operation of resource: frequency-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverSupportableSpectrumFrequencyConstraintFrequencyConstraintTest() throws ApiException {
        String uuid = null;
        FrequencyConstraint response = api.retrieveContextServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverSupportableSpectrumFrequencyConstraintFrequencyConstraint(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve supportable-spectrum
     *
     * Retrieve operation of resource: supportable-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverSupportableSpectrumSupportableSpectrumTest() throws ApiException {
        String uuid = null;
        SpectrumBand response = api.retrieveContextServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverSupportableSpectrumSupportableSpectrum(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve max-bw
     *
     * Retrieve operation of resource: max-bw
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverSupportedBandwidthMaxBwMaxBwTest() throws ApiException {
        String uuid = null;
        CapacityValue response = api.retrieveContextServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverSupportedBandwidthMaxBwMaxBw(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve min-bw
     *
     * Retrieve operation of resource: min-bw
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverSupportedBandwidthMinBwMinBwTest() throws ApiException {
        String uuid = null;
        CapacityValue response = api.retrieveContextServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverSupportedBandwidthMinBwMinBw(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve supported-bandwidth
     *
     * Retrieve operation of resource: supported-bandwidth
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverSupportedBandwidthSupportedBandwidthTest() throws ApiException {
        String uuid = null;
        SupportedBandwidthSchema response = api.retrieveContextServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolAvailableTransceiverSupportedBandwidthSupportedBandwidth(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve sdm-pool
     *
     * Retrieve operation of resource: sdm-pool
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolSdmPoolTest() throws ApiException {
        String uuid = null;
        SdmPoolCapabilityPac response = api.retrieveContextServiceInterfacePointSdmServiceInterfacePointSpecSdmPoolSdmPool(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve sdm-service-interface-point-spec
     *
     * Retrieve operation of resource: sdm-service-interface-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointSdmServiceInterfacePointSpecSdmServiceInterfacePointSpecTest() throws ApiException {
        String uuid = null;
        SdmServiceInterfacePointSpec response = api.retrieveContextServiceInterfacePointSdmServiceInterfacePointSpecSdmServiceInterfacePointSpec(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve service-interface-point
     *
     * Retrieve operation of resource: service-interface-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointServiceInterfacePointTest() throws ApiException {
        List<String> response = api.retrieveContextServiceInterfacePointServiceInterfacePoint();

        // TODO: test validations
    }
    
    /**
     * Retrieve service-interface-point by ID
     *
     * Retrieve operation of resource: service-interface-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointServiceInterfacePointByIdTest() throws ApiException {
        String uuid = null;
        ServiceInterfacePointSchema response = api.retrieveContextServiceInterfacePointServiceInterfacePointById(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve bandwidth-profile
     *
     * Retrieve operation of resource: bandwidth-profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileBandwidthProfileTest() throws ApiException {
        String uuid = null;
        BandwidthProfile response = api.retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileBandwidthProfile(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-burst-size
     *
     * Retrieve operation of resource: committed-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeTest() throws ApiException {
        String uuid = null;
        CapacityValue response = api.retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-information-rate
     *
     * Retrieve operation of resource: committed-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateTest() throws ApiException {
        String uuid = null;
        CapacityValue response = api.retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-burst-size
     *
     * Retrieve operation of resource: peak-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeTest() throws ApiException {
        String uuid = null;
        CapacityValue response = api.retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-information-rate
     *
     * Retrieve operation of resource: peak-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateTest() throws ApiException {
        String uuid = null;
        CapacityValue response = api.retrieveContextServiceInterfacePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve total-potential-capacity
     *
     * Retrieve operation of resource: total-potential-capacity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointTotalPotentialCapacityTotalPotentialCapacityTest() throws ApiException {
        String uuid = null;
        Capacity response = api.retrieveContextServiceInterfacePointTotalPotentialCapacityTotalPotentialCapacity(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve total-size
     *
     * Retrieve operation of resource: total-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextServiceInterfacePointTotalPotentialCapacityTotalSizeTotalSizeTest() throws ApiException {
        String uuid = null;
        CapacityValue response = api.retrieveContextServiceInterfacePointTotalPotentialCapacityTotalSizeTotalSize(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextNwTopologyServiceNameNameTest() throws ApiException {
        List<String> response = api.retrieveContextTopologyContextNwTopologyServiceNameName();

        // TODO: test validations
    }
    
    /**
     * Retrieve name by ID
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextNwTopologyServiceNameNameByIdTest() throws ApiException {
        String valueName = null;
        NameAndValue response = api.retrieveContextTopologyContextNwTopologyServiceNameNameById(valueName);

        // TODO: test validations
    }
    
    /**
     * Retrieve nw-topology-service
     *
     * Retrieve operation of resource: nw-topology-service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextNwTopologyServiceNwTopologyServiceTest() throws ApiException {
        NetworkTopologyService response = api.retrieveContextTopologyContextNwTopologyServiceNwTopologyService();

        // TODO: test validations
    }
    
    /**
     * Retrieve topology
     *
     * Retrieve operation of resource: topology
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextNwTopologyServiceTopologyTopologyTest() throws ApiException {
        List<String> response = api.retrieveContextTopologyContextNwTopologyServiceTopologyTopology();

        // TODO: test validations
    }
    
    /**
     * Retrieve topology by ID
     *
     * Retrieve operation of resource: topology
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextNwTopologyServiceTopologyTopologyByIdTest() throws ApiException {
        String topologyUuid = null;
        TopologyRef response = api.retrieveContextTopologyContextNwTopologyServiceTopologyTopologyById(topologyUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve topology-context
     *
     * Retrieve operation of resource: topology-context
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyContextTest() throws ApiException {
        TopologyContext response = api.retrieveContextTopologyContextTopologyContext();

        // TODO: test validations
    }
    
    /**
     * Retrieve available-capacity
     *
     * Retrieve operation of resource: available-capacity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyLinkAvailableCapacityAvailableCapacityTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        Capacity response = api.retrieveContextTopologyContextTopologyLinkAvailableCapacityAvailableCapacity(uuid, linkUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve bandwidth-profile
     *
     * Retrieve operation of resource: bandwidth-profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyLinkAvailableCapacityBandwidthProfileBandwidthProfileTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        BandwidthProfile response = api.retrieveContextTopologyContextTopologyLinkAvailableCapacityBandwidthProfileBandwidthProfile(uuid, linkUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-burst-size
     *
     * Retrieve operation of resource: committed-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyLinkAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        CapacityValue response = api.retrieveContextTopologyContextTopologyLinkAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(uuid, linkUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-information-rate
     *
     * Retrieve operation of resource: committed-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyLinkAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        CapacityValue response = api.retrieveContextTopologyContextTopologyLinkAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(uuid, linkUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-burst-size
     *
     * Retrieve operation of resource: peak-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyLinkAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        CapacityValue response = api.retrieveContextTopologyContextTopologyLinkAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize(uuid, linkUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-information-rate
     *
     * Retrieve operation of resource: peak-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyLinkAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        CapacityValue response = api.retrieveContextTopologyContextTopologyLinkAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate(uuid, linkUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve total-size
     *
     * Retrieve operation of resource: total-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyLinkAvailableCapacityTotalSizeTotalSizeTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        CapacityValue response = api.retrieveContextTopologyContextTopologyLinkAvailableCapacityTotalSizeTotalSize(uuid, linkUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve cost-characteristic
     *
     * Retrieve operation of resource: cost-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyLinkCostCharacteristicCostCharacteristicTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        List<String> response = api.retrieveContextTopologyContextTopologyLinkCostCharacteristicCostCharacteristic(uuid, linkUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve cost-characteristic by ID
     *
     * Retrieve operation of resource: cost-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyLinkCostCharacteristicCostCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        String costName = null;
        CostCharacteristic response = api.retrieveContextTopologyContextTopologyLinkCostCharacteristicCostCharacteristicById(uuid, linkUuid, costName);

        // TODO: test validations
    }
    
    /**
     * Retrieve latency-characteristic
     *
     * Retrieve operation of resource: latency-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyLinkLatencyCharacteristicLatencyCharacteristicTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        List<String> response = api.retrieveContextTopologyContextTopologyLinkLatencyCharacteristicLatencyCharacteristic(uuid, linkUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve latency-characteristic by ID
     *
     * Retrieve operation of resource: latency-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyLinkLatencyCharacteristicLatencyCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        String trafficPropertyName = null;
        LatencyCharacteristic response = api.retrieveContextTopologyContextTopologyLinkLatencyCharacteristicLatencyCharacteristicById(uuid, linkUuid, trafficPropertyName);

        // TODO: test validations
    }
    
    /**
     * Retrieve link
     *
     * Retrieve operation of resource: link
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyLinkLinkTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextTopologyContextTopologyLinkLink(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve link by ID
     *
     * Retrieve operation of resource: link
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyLinkLinkByIdTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        Link response = api.retrieveContextTopologyContextTopologyLinkLinkById(uuid, linkUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyLinkNameNameTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        List<String> response = api.retrieveContextTopologyContextTopologyLinkNameName(uuid, linkUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name by ID
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyLinkNameNameByIdTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        String valueName = null;
        NameAndValue response = api.retrieveContextTopologyContextTopologyLinkNameNameById(uuid, linkUuid, valueName);

        // TODO: test validations
    }
    
    /**
     * Retrieve node-edge-point
     *
     * Retrieve operation of resource: node-edge-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyLinkNodeEdgePointNodeEdgePointTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        List<String> response = api.retrieveContextTopologyContextTopologyLinkNodeEdgePointNodeEdgePoint(uuid, linkUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve node-edge-point by ID
     *
     * Retrieve operation of resource: node-edge-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyLinkNodeEdgePointNodeEdgePointByIdTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        String topologyUuidNodeUuidNodeEdgePointUuid = null;
        NodeEdgePointRef response = api.retrieveContextTopologyContextTopologyLinkNodeEdgePointNodeEdgePointById(uuid, linkUuid, topologyUuidNodeUuidNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve resilience-type
     *
     * Retrieve operation of resource: resilience-type
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyLinkResilienceTypeResilienceTypeTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        ResilienceType response = api.retrieveContextTopologyContextTopologyLinkResilienceTypeResilienceType(uuid, linkUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve risk-characteristic
     *
     * Retrieve operation of resource: risk-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyLinkRiskCharacteristicRiskCharacteristicTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        List<String> response = api.retrieveContextTopologyContextTopologyLinkRiskCharacteristicRiskCharacteristic(uuid, linkUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve risk-characteristic by ID
     *
     * Retrieve operation of resource: risk-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyLinkRiskCharacteristicRiskCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        String riskCharacteristicName = null;
        RiskCharacteristic response = api.retrieveContextTopologyContextTopologyLinkRiskCharacteristicRiskCharacteristicById(uuid, linkUuid, riskCharacteristicName);

        // TODO: test validations
    }
    
    /**
     * Retrieve bandwidth-profile
     *
     * Retrieve operation of resource: bandwidth-profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityBandwidthProfileBandwidthProfileTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        BandwidthProfile response = api.retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityBandwidthProfileBandwidthProfile(uuid, linkUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-burst-size
     *
     * Retrieve operation of resource: committed-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        CapacityValue response = api.retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(uuid, linkUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-information-rate
     *
     * Retrieve operation of resource: committed-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        CapacityValue response = api.retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(uuid, linkUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-burst-size
     *
     * Retrieve operation of resource: peak-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        CapacityValue response = api.retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize(uuid, linkUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-information-rate
     *
     * Retrieve operation of resource: peak-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        CapacityValue response = api.retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate(uuid, linkUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve total-potential-capacity
     *
     * Retrieve operation of resource: total-potential-capacity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityTotalPotentialCapacityTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        Capacity response = api.retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityTotalPotentialCapacity(uuid, linkUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve total-size
     *
     * Retrieve operation of resource: total-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityTotalSizeTotalSizeTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        CapacityValue response = api.retrieveContextTopologyContextTopologyLinkTotalPotentialCapacityTotalSizeTotalSize(uuid, linkUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve validation-mechanism
     *
     * Retrieve operation of resource: validation-mechanism
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyLinkValidationMechanismValidationMechanismTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        List<String> response = api.retrieveContextTopologyContextTopologyLinkValidationMechanismValidationMechanism(uuid, linkUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve validation-mechanism by ID
     *
     * Retrieve operation of resource: validation-mechanism
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyLinkValidationMechanismValidationMechanismByIdTest() throws ApiException {
        String uuid = null;
        String linkUuid = null;
        String validationMechanism = null;
        ValidationMechanism response = api.retrieveContextTopologyContextTopologyLinkValidationMechanismValidationMechanismById(uuid, linkUuid, validationMechanism);

        // TODO: test validations
    }
    
    /**
     * Retrieve name
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNameNameTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextTopologyContextTopologyNameName(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name by ID
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNameNameByIdTest() throws ApiException {
        String uuid = null;
        String valueName = null;
        NameAndValue response = api.retrieveContextTopologyContextTopologyNameNameById(uuid, valueName);

        // TODO: test validations
    }
    
    /**
     * Retrieve aggregated-node-edge-point
     *
     * Retrieve operation of resource: aggregated-node-edge-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeAggregatedNodeEdgePointAggregatedNodeEdgePointTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        List<String> response = api.retrieveContextTopologyContextTopologyNodeAggregatedNodeEdgePointAggregatedNodeEdgePoint(uuid, nodeUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve aggregated-node-edge-point by ID
     *
     * Retrieve operation of resource: aggregated-node-edge-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeAggregatedNodeEdgePointAggregatedNodeEdgePointByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String topologyUuidNodeUuidNodeEdgePointUuid = null;
        NodeEdgePointRef response = api.retrieveContextTopologyContextTopologyNodeAggregatedNodeEdgePointAggregatedNodeEdgePointById(uuid, nodeUuid, topologyUuidNodeUuidNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve available-capacity
     *
     * Retrieve operation of resource: available-capacity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeAvailableCapacityAvailableCapacityTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        Capacity response = api.retrieveContextTopologyContextTopologyNodeAvailableCapacityAvailableCapacity(uuid, nodeUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve bandwidth-profile
     *
     * Retrieve operation of resource: bandwidth-profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeAvailableCapacityBandwidthProfileBandwidthProfileTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        BandwidthProfile response = api.retrieveContextTopologyContextTopologyNodeAvailableCapacityBandwidthProfileBandwidthProfile(uuid, nodeUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-burst-size
     *
     * Retrieve operation of resource: committed-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        CapacityValue response = api.retrieveContextTopologyContextTopologyNodeAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(uuid, nodeUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-information-rate
     *
     * Retrieve operation of resource: committed-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        CapacityValue response = api.retrieveContextTopologyContextTopologyNodeAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(uuid, nodeUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-burst-size
     *
     * Retrieve operation of resource: peak-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        CapacityValue response = api.retrieveContextTopologyContextTopologyNodeAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize(uuid, nodeUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-information-rate
     *
     * Retrieve operation of resource: peak-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        CapacityValue response = api.retrieveContextTopologyContextTopologyNodeAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate(uuid, nodeUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve total-size
     *
     * Retrieve operation of resource: total-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeAvailableCapacityTotalSizeTotalSizeTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        CapacityValue response = api.retrieveContextTopologyContextTopologyNodeAvailableCapacityTotalSizeTotalSize(uuid, nodeUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve cost-characteristic
     *
     * Retrieve operation of resource: cost-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeCostCharacteristicCostCharacteristicTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        List<String> response = api.retrieveContextTopologyContextTopologyNodeCostCharacteristicCostCharacteristic(uuid, nodeUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve cost-characteristic by ID
     *
     * Retrieve operation of resource: cost-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeCostCharacteristicCostCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String costName = null;
        CostCharacteristic response = api.retrieveContextTopologyContextTopologyNodeCostCharacteristicCostCharacteristicById(uuid, nodeUuid, costName);

        // TODO: test validations
    }
    
    /**
     * Retrieve encap-topology
     *
     * Retrieve operation of resource: encap-topology
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeEncapTopologyEncapTopologyTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        TopologyRef response = api.retrieveContextTopologyContextTopologyNodeEncapTopologyEncapTopology(uuid, nodeUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve latency-characteristic
     *
     * Retrieve operation of resource: latency-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeLatencyCharacteristicLatencyCharacteristicTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        List<String> response = api.retrieveContextTopologyContextTopologyNodeLatencyCharacteristicLatencyCharacteristic(uuid, nodeUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve latency-characteristic by ID
     *
     * Retrieve operation of resource: latency-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeLatencyCharacteristicLatencyCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String trafficPropertyName = null;
        LatencyCharacteristic response = api.retrieveContextTopologyContextTopologyNodeLatencyCharacteristicLatencyCharacteristicById(uuid, nodeUuid, trafficPropertyName);

        // TODO: test validations
    }
    
    /**
     * Retrieve name
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNameNameTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        List<String> response = api.retrieveContextTopologyContextTopologyNodeNameName(uuid, nodeUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name by ID
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNameNameByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String valueName = null;
        NameAndValue response = api.retrieveContextTopologyContextTopologyNodeNameNameById(uuid, nodeUuid, valueName);

        // TODO: test validations
    }
    
    /**
     * Retrieve node
     *
     * Retrieve operation of resource: node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeTest() throws ApiException {
        String uuid = null;
        List<String> response = api.retrieveContextTopologyContextTopologyNodeNode(uuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve node by ID
     *
     * Retrieve operation of resource: node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        Node response = api.retrieveContextTopologyContextTopologyNodeNodeById(uuid, nodeUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve available-capacity
     *
     * Retrieve operation of resource: available-capacity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityAvailableCapacityTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        Capacity response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityAvailableCapacity(uuid, nodeUuid, nodeRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve bandwidth-profile
     *
     * Retrieve operation of resource: bandwidth-profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileBandwidthProfileTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        BandwidthProfile response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileBandwidthProfile(uuid, nodeUuid, nodeRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-burst-size
     *
     * Retrieve operation of resource: committed-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        CapacityValue response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(uuid, nodeUuid, nodeRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-information-rate
     *
     * Retrieve operation of resource: committed-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        CapacityValue response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(uuid, nodeUuid, nodeRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-burst-size
     *
     * Retrieve operation of resource: peak-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        CapacityValue response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize(uuid, nodeUuid, nodeRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-information-rate
     *
     * Retrieve operation of resource: peak-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        CapacityValue response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate(uuid, nodeUuid, nodeRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve total-size
     *
     * Retrieve operation of resource: total-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityTotalSizeTotalSizeTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        CapacityValue response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupAvailableCapacityTotalSizeTotalSize(uuid, nodeUuid, nodeRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve composed-rule-group
     *
     * Retrieve operation of resource: composed-rule-group
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupComposedRuleGroupComposedRuleGroupTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        List<String> response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupComposedRuleGroupComposedRuleGroup(uuid, nodeUuid, nodeRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve composed-rule-group by ID
     *
     * Retrieve operation of resource: composed-rule-group
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupComposedRuleGroupComposedRuleGroupByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String topologyUuidNodeUuidNodeRuleGroupUuid = null;
        NodeRuleGroupRef response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupComposedRuleGroupComposedRuleGroupById(uuid, nodeUuid, nodeRuleGroupUuid, topologyUuidNodeUuidNodeRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve cost-characteristic
     *
     * Retrieve operation of resource: cost-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupCostCharacteristicCostCharacteristicTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        List<String> response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupCostCharacteristicCostCharacteristic(uuid, nodeUuid, nodeRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve cost-characteristic by ID
     *
     * Retrieve operation of resource: cost-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupCostCharacteristicCostCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String costName = null;
        CostCharacteristic response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupCostCharacteristicCostCharacteristicById(uuid, nodeUuid, nodeRuleGroupUuid, costName);

        // TODO: test validations
    }
    
    /**
     * Retrieve associated-node-rule-group
     *
     * Retrieve operation of resource: associated-node-rule-group
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroupTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        List<String> response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroup(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve associated-node-rule-group by ID
     *
     * Retrieve operation of resource: associated-node-rule-group
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroupByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        String topologyUuidNodeUuidNodeRuleGroupUuid = null;
        NodeRuleGroupRef response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAssociatedNodeRuleGroupAssociatedNodeRuleGroupById(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, topologyUuidNodeUuidNodeRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve available-capacity
     *
     * Retrieve operation of resource: available-capacity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityAvailableCapacityTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        Capacity response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityAvailableCapacity(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve bandwidth-profile
     *
     * Retrieve operation of resource: bandwidth-profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileBandwidthProfileTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        BandwidthProfile response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileBandwidthProfile(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-burst-size
     *
     * Retrieve operation of resource: committed-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        CapacityValue response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-information-rate
     *
     * Retrieve operation of resource: committed-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        CapacityValue response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-burst-size
     *
     * Retrieve operation of resource: peak-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        CapacityValue response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-information-rate
     *
     * Retrieve operation of resource: peak-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        CapacityValue response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve total-size
     *
     * Retrieve operation of resource: total-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityTotalSizeTotalSizeTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        CapacityValue response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupAvailableCapacityTotalSizeTotalSize(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve cost-characteristic
     *
     * Retrieve operation of resource: cost-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristicTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        List<String> response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristic(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve cost-characteristic by ID
     *
     * Retrieve operation of resource: cost-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        String costName = null;
        CostCharacteristic response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupCostCharacteristicCostCharacteristicById(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, costName);

        // TODO: test validations
    }
    
    /**
     * Retrieve inter-rule-group
     *
     * Retrieve operation of resource: inter-rule-group
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupInterRuleGroupTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        List<String> response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupInterRuleGroup(uuid, nodeUuid, nodeRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve inter-rule-group by ID
     *
     * Retrieve operation of resource: inter-rule-group
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupInterRuleGroupByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        InterRuleGroup response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupInterRuleGroupById(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve latency-characteristic
     *
     * Retrieve operation of resource: latency-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristicTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        List<String> response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristic(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve latency-characteristic by ID
     *
     * Retrieve operation of resource: latency-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        String trafficPropertyName = null;
        LatencyCharacteristic response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupLatencyCharacteristicLatencyCharacteristicById(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, trafficPropertyName);

        // TODO: test validations
    }
    
    /**
     * Retrieve name
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupNameNameTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        List<String> response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupNameName(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name by ID
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupNameNameByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        String valueName = null;
        NameAndValue response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupNameNameById(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, valueName);

        // TODO: test validations
    }
    
    /**
     * Retrieve risk-characteristic
     *
     * Retrieve operation of resource: risk-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristicTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        List<String> response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristic(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve risk-characteristic by ID
     *
     * Retrieve operation of resource: risk-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        String riskCharacteristicName = null;
        RiskCharacteristic response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRiskCharacteristicRiskCharacteristicById(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, riskCharacteristicName);

        // TODO: test validations
    }
    
    /**
     * Retrieve name
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameNameTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        String localId = null;
        List<String> response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameName(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve name by ID
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameNameByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        String localId = null;
        String valueName = null;
        NameAndValue response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRuleNameNameById(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, localId, valueName);

        // TODO: test validations
    }
    
    /**
     * Retrieve rule
     *
     * Retrieve operation of resource: rule
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRuleTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        List<String> response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRule(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve rule by ID
     *
     * Retrieve operation of resource: rule
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRuleByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        String localId = null;
        Rule response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupRuleRuleById(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve bandwidth-profile
     *
     * Retrieve operation of resource: bandwidth-profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileBandwidthProfileTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        BandwidthProfile response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileBandwidthProfile(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-burst-size
     *
     * Retrieve operation of resource: committed-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        CapacityValue response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-information-rate
     *
     * Retrieve operation of resource: committed-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        CapacityValue response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-burst-size
     *
     * Retrieve operation of resource: peak-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        CapacityValue response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-information-rate
     *
     * Retrieve operation of resource: peak-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        CapacityValue response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve total-potential-capacity
     *
     * Retrieve operation of resource: total-potential-capacity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityTotalPotentialCapacityTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        Capacity response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityTotalPotentialCapacity(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve total-size
     *
     * Retrieve operation of resource: total-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityTotalSizeTotalSizeTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String interRuleGroupUuid = null;
        CapacityValue response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupInterRuleGroupTotalPotentialCapacityTotalSizeTotalSize(uuid, nodeUuid, nodeRuleGroupUuid, interRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve latency-characteristic
     *
     * Retrieve operation of resource: latency-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupLatencyCharacteristicLatencyCharacteristicTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        List<String> response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupLatencyCharacteristicLatencyCharacteristic(uuid, nodeUuid, nodeRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve latency-characteristic by ID
     *
     * Retrieve operation of resource: latency-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupLatencyCharacteristicLatencyCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String trafficPropertyName = null;
        LatencyCharacteristic response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupLatencyCharacteristicLatencyCharacteristicById(uuid, nodeUuid, nodeRuleGroupUuid, trafficPropertyName);

        // TODO: test validations
    }
    
    /**
     * Retrieve name
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupNameNameTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        List<String> response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupNameName(uuid, nodeUuid, nodeRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name by ID
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupNameNameByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String valueName = null;
        NameAndValue response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupNameNameById(uuid, nodeUuid, nodeRuleGroupUuid, valueName);

        // TODO: test validations
    }
    
    /**
     * Retrieve node-edge-point
     *
     * Retrieve operation of resource: node-edge-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupNodeEdgePointNodeEdgePointTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        List<String> response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupNodeEdgePointNodeEdgePoint(uuid, nodeUuid, nodeRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve node-edge-point by ID
     *
     * Retrieve operation of resource: node-edge-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupNodeEdgePointNodeEdgePointByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String topologyUuidNodeUuidNodeEdgePointUuid = null;
        NodeEdgePointRef response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupNodeEdgePointNodeEdgePointById(uuid, nodeUuid, nodeRuleGroupUuid, topologyUuidNodeUuidNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve node-rule-group
     *
     * Retrieve operation of resource: node-rule-group
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupNodeRuleGroupTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        List<String> response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupNodeRuleGroup(uuid, nodeUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve node-rule-group by ID
     *
     * Retrieve operation of resource: node-rule-group
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupNodeRuleGroupByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        NodeRuleGroup response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupNodeRuleGroupById(uuid, nodeUuid, nodeRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve risk-characteristic
     *
     * Retrieve operation of resource: risk-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupRiskCharacteristicRiskCharacteristicTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        List<String> response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupRiskCharacteristicRiskCharacteristic(uuid, nodeUuid, nodeRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve risk-characteristic by ID
     *
     * Retrieve operation of resource: risk-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupRiskCharacteristicRiskCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String riskCharacteristicName = null;
        RiskCharacteristic response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupRiskCharacteristicRiskCharacteristicById(uuid, nodeUuid, nodeRuleGroupUuid, riskCharacteristicName);

        // TODO: test validations
    }
    
    /**
     * Retrieve name
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupRuleNameNameTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String localId = null;
        List<String> response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupRuleNameName(uuid, nodeUuid, nodeRuleGroupUuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve name by ID
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupRuleNameNameByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String localId = null;
        String valueName = null;
        NameAndValue response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupRuleNameNameById(uuid, nodeUuid, nodeRuleGroupUuid, localId, valueName);

        // TODO: test validations
    }
    
    /**
     * Retrieve rule
     *
     * Retrieve operation of resource: rule
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupRuleRuleTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        List<String> response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupRuleRule(uuid, nodeUuid, nodeRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve rule by ID
     *
     * Retrieve operation of resource: rule
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupRuleRuleByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        String localId = null;
        Rule response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupRuleRuleById(uuid, nodeUuid, nodeRuleGroupUuid, localId);

        // TODO: test validations
    }
    
    /**
     * Retrieve bandwidth-profile
     *
     * Retrieve operation of resource: bandwidth-profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileBandwidthProfileTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        BandwidthProfile response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileBandwidthProfile(uuid, nodeUuid, nodeRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-burst-size
     *
     * Retrieve operation of resource: committed-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        CapacityValue response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(uuid, nodeUuid, nodeRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-information-rate
     *
     * Retrieve operation of resource: committed-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        CapacityValue response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(uuid, nodeUuid, nodeRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-burst-size
     *
     * Retrieve operation of resource: peak-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        CapacityValue response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize(uuid, nodeUuid, nodeRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-information-rate
     *
     * Retrieve operation of resource: peak-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        CapacityValue response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate(uuid, nodeUuid, nodeRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve total-potential-capacity
     *
     * Retrieve operation of resource: total-potential-capacity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityTotalPotentialCapacityTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        Capacity response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityTotalPotentialCapacity(uuid, nodeUuid, nodeRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve total-size
     *
     * Retrieve operation of resource: total-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityTotalSizeTotalSizeTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String nodeRuleGroupUuid = null;
        CapacityValue response = api.retrieveContextTopologyContextTopologyNodeNodeRuleGroupTotalPotentialCapacityTotalSizeTotalSize(uuid, nodeUuid, nodeRuleGroupUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve aggregated-node-edge-point
     *
     * Retrieve operation of resource: aggregated-node-edge-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAggregatedNodeEdgePointAggregatedNodeEdgePointTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        List<String> response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAggregatedNodeEdgePointAggregatedNodeEdgePoint(uuid, nodeUuid, ownedNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve aggregated-node-edge-point by ID
     *
     * Retrieve operation of resource: aggregated-node-edge-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAggregatedNodeEdgePointAggregatedNodeEdgePointByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        String topologyUuidNodeUuidNodeEdgePointUuid = null;
        NodeEdgePointRef response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAggregatedNodeEdgePointAggregatedNodeEdgePointById(uuid, nodeUuid, ownedNodeEdgePointUuid, topologyUuidNodeUuidNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve available-capacity
     *
     * Retrieve operation of resource: available-capacity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityAvailableCapacityTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        Capacity response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityAvailableCapacity(uuid, nodeUuid, ownedNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve bandwidth-profile
     *
     * Retrieve operation of resource: bandwidth-profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileBandwidthProfileTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        BandwidthProfile response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileBandwidthProfile(uuid, nodeUuid, ownedNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-burst-size
     *
     * Retrieve operation of resource: committed-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        CapacityValue response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(uuid, nodeUuid, ownedNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-information-rate
     *
     * Retrieve operation of resource: committed-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        CapacityValue response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(uuid, nodeUuid, ownedNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-burst-size
     *
     * Retrieve operation of resource: peak-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSizeTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        CapacityValue response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfilePeakBurstSizePeakBurstSize(uuid, nodeUuid, ownedNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-information-rate
     *
     * Retrieve operation of resource: peak-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRateTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        CapacityValue response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityBandwidthProfilePeakInformationRatePeakInformationRate(uuid, nodeUuid, ownedNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve total-size
     *
     * Retrieve operation of resource: total-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityTotalSizeTotalSizeTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        CapacityValue response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointAvailableCapacityTotalSizeTotalSize(uuid, nodeUuid, ownedNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve cep-list
     *
     * Retrieve operation of resource: cep-list
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListCepListTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        CepList response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListCepList(uuid, nodeUuid, ownedNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve aggregated-connection-end-point
     *
     * Retrieve operation of resource: aggregated-connection-end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        String connectionEndPointUuid = null;
        List<String> response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPoint(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve aggregated-connection-end-point by ID
     *
     * Retrieve operation of resource: aggregated-connection-end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        String connectionEndPointUuid = null;
        String topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid = null;
        ConnectionEndPointRef response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointAggregatedConnectionEndPointAggregatedConnectionEndPointById(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, topologyUuidNodeUuidNodeEdgePointUuidConnectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve client-node-edge-point
     *
     * Retrieve operation of resource: client-node-edge-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointClientNodeEdgePointClientNodeEdgePointTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        String connectionEndPointUuid = null;
        List<String> response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointClientNodeEdgePointClientNodeEdgePoint(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve client-node-edge-point by ID
     *
     * Retrieve operation of resource: client-node-edge-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointClientNodeEdgePointClientNodeEdgePointByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        String connectionEndPointUuid = null;
        String topologyUuidNodeUuidNodeEdgePointUuid = null;
        NodeEdgePointRef response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointClientNodeEdgePointClientNodeEdgePointById(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, topologyUuidNodeUuidNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve connection-end-point
     *
     * Retrieve operation of resource: connection-end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointConnectionEndPointTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        List<String> response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointConnectionEndPoint(uuid, nodeUuid, ownedNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve connection-end-point by ID
     *
     * Retrieve operation of resource: connection-end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointConnectionEndPointByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        String connectionEndPointUuid = null;
        ConnectionEndPointSchema response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointConnectionEndPointById(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve media-channel-assembly-spec
     *
     * Retrieve operation of resource: media-channel-assembly-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointMediaChannelAssemblySpecMediaChannelAssemblySpecTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        String connectionEndPointUuid = null;
        MediaChannelAssemblySpec response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointMediaChannelAssemblySpecMediaChannelAssemblySpec(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve media-channel-connection-end-point-spec
     *
     * Retrieve operation of resource: media-channel-connection-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointMediaChannelConnectionEndPointSpecMediaChannelConnectionEndPointSpecTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        String connectionEndPointUuid = null;
        MediaChannelConnectionEndPointSpec response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointMediaChannelConnectionEndPointSpecMediaChannelConnectionEndPointSpec(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve measured-power-egress
     *
     * Retrieve operation of resource: measured-power-egress
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointMediaChannelConnectionEndPointSpecMediaChannelMeasuredPowerEgressMeasuredPowerEgressTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        String connectionEndPointUuid = null;
        PowerPropertiesPac response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointMediaChannelConnectionEndPointSpecMediaChannelMeasuredPowerEgressMeasuredPowerEgress(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve measured-power-ingress
     *
     * Retrieve operation of resource: measured-power-ingress
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointMediaChannelConnectionEndPointSpecMediaChannelMeasuredPowerIngressMeasuredPowerIngressTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        String connectionEndPointUuid = null;
        PowerPropertiesPac response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointMediaChannelConnectionEndPointSpecMediaChannelMeasuredPowerIngressMeasuredPowerIngress(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve media-channel
     *
     * Retrieve operation of resource: media-channel
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointMediaChannelConnectionEndPointSpecMediaChannelMediaChannelTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        String connectionEndPointUuid = null;
        MediaChannelPropertiesPac response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointMediaChannelConnectionEndPointSpecMediaChannelMediaChannel(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve frequency-constraint
     *
     * Retrieve operation of resource: frequency-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointMediaChannelConnectionEndPointSpecMediaChannelOccupiedSpectrumFrequencyConstraintFrequencyConstraintTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        String connectionEndPointUuid = null;
        FrequencyConstraint response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointMediaChannelConnectionEndPointSpecMediaChannelOccupiedSpectrumFrequencyConstraintFrequencyConstraint(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve occupied-spectrum
     *
     * Retrieve operation of resource: occupied-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointMediaChannelConnectionEndPointSpecMediaChannelOccupiedSpectrumOccupiedSpectrumTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        String connectionEndPointUuid = null;
        SpectrumBand response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointMediaChannelConnectionEndPointSpecMediaChannelOccupiedSpectrumOccupiedSpectrum(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointNameNameTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        String connectionEndPointUuid = null;
        List<String> response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointNameName(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name by ID
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointNameNameByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        String connectionEndPointUuid = null;
        String valueName = null;
        NameAndValue response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointNameNameById(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid, valueName);

        // TODO: test validations
    }
    
    /**
     * Retrieve ots-connection-end-point-spec
     *
     * Retrieve operation of resource: ots-connection-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointOtsConnectionEndPointSpecOtsConnectionEndPointSpecTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        String connectionEndPointUuid = null;
        OtsConnectionEndPointSpec response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointOtsConnectionEndPointSpecOtsConnectionEndPointSpec(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve measured-power-egress
     *
     * Retrieve operation of resource: measured-power-egress
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointOtsConnectionEndPointSpecOtsMediaChannelMeasuredPowerEgressMeasuredPowerEgressTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        String connectionEndPointUuid = null;
        PowerPropertiesPac response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointOtsConnectionEndPointSpecOtsMediaChannelMeasuredPowerEgressMeasuredPowerEgress(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve measured-power-ingress
     *
     * Retrieve operation of resource: measured-power-ingress
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointOtsConnectionEndPointSpecOtsMediaChannelMeasuredPowerIngressMeasuredPowerIngressTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        String connectionEndPointUuid = null;
        PowerPropertiesPac response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointOtsConnectionEndPointSpecOtsMediaChannelMeasuredPowerIngressMeasuredPowerIngress(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve frequency-constraint
     *
     * Retrieve operation of resource: frequency-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointOtsConnectionEndPointSpecOtsMediaChannelOccupiedSpectrumFrequencyConstraintFrequencyConstraintTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        String connectionEndPointUuid = null;
        FrequencyConstraint response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointOtsConnectionEndPointSpecOtsMediaChannelOccupiedSpectrumFrequencyConstraintFrequencyConstraint(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve occupied-spectrum
     *
     * Retrieve operation of resource: occupied-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointOtsConnectionEndPointSpecOtsMediaChannelOccupiedSpectrumOccupiedSpectrumTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        String connectionEndPointUuid = null;
        SpectrumBand response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointOtsConnectionEndPointSpecOtsMediaChannelOccupiedSpectrumOccupiedSpectrum(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve ots-media-channel
     *
     * Retrieve operation of resource: ots-media-channel
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointOtsConnectionEndPointSpecOtsMediaChannelOtsMediaChannelTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        String connectionEndPointUuid = null;
        MediaChannelPropertiesPac response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointOtsConnectionEndPointSpecOtsMediaChannelOtsMediaChannel(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve fec-parameters
     *
     * Retrieve operation of resource: fec-parameters
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointOtsiAssemblyConnectionEndPointSpecFecParametersFecParametersTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        String connectionEndPointUuid = null;
        FecPropertiesPac response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointOtsiAssemblyConnectionEndPointSpecFecParametersFecParameters(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve otsi-adapter
     *
     * Retrieve operation of resource: otsi-adapter
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointOtsiAssemblyConnectionEndPointSpecOtsiAdapterOtsiAdapterTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        String connectionEndPointUuid = null;
        OtsiGserverAdaptationPac response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointOtsiAssemblyConnectionEndPointSpecOtsiAdapterOtsiAdapter(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve otsi-assembly-connection-end-point-spec
     *
     * Retrieve operation of resource: otsi-assembly-connection-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointOtsiAssemblyConnectionEndPointSpecOtsiAssemblyConnectionEndPointSpecTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        String connectionEndPointUuid = null;
        OtsiAssemblyConnectionEndPointSpec response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointOtsiAssemblyConnectionEndPointSpecOtsiAssemblyConnectionEndPointSpec(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve otsi-connection-end-point-spec
     *
     * Retrieve operation of resource: otsi-connection-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointOtsiConnectionEndPointSpecOtsiConnectionEndPointSpecTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        String connectionEndPointUuid = null;
        OtsiConnectionEndPointSpec response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointOtsiConnectionEndPointSpecOtsiConnectionEndPointSpec(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve laser-properties
     *
     * Retrieve operation of resource: laser-properties
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointOtsiConnectionEndPointSpecOtsiTerminationLaserPropertiesLaserPropertiesTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        String connectionEndPointUuid = null;
        LaserPropertiesPac response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointOtsiConnectionEndPointSpecOtsiTerminationLaserPropertiesLaserProperties(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve otsi-termination
     *
     * Retrieve operation of resource: otsi-termination
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointOtsiConnectionEndPointSpecOtsiTerminationOtsiTerminationTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        String connectionEndPointUuid = null;
        OtsiTerminationPac response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointOtsiConnectionEndPointSpecOtsiTerminationOtsiTermination(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve received-power
     *
     * Retrieve operation of resource: received-power
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointOtsiConnectionEndPointSpecOtsiTerminationReceivedPowerReceivedPowerTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        String connectionEndPointUuid = null;
        PowerPropertiesPac response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointOtsiConnectionEndPointSpecOtsiTerminationReceivedPowerReceivedPower(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve selected-application-identifier
     *
     * Retrieve operation of resource: selected-application-identifier
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointOtsiConnectionEndPointSpecOtsiTerminationSelectedApplicationIdentifierSelectedApplicationIdentifierTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        String connectionEndPointUuid = null;
        ApplicationIdentifier response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointOtsiConnectionEndPointSpecOtsiTerminationSelectedApplicationIdentifierSelectedApplicationIdentifier(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve frequency-constraint
     *
     * Retrieve operation of resource: frequency-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointOtsiConnectionEndPointSpecOtsiTerminationSelectedCentralFrequencyFrequencyConstraintFrequencyConstraintTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        String connectionEndPointUuid = null;
        FrequencyConstraint response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointOtsiConnectionEndPointSpecOtsiTerminationSelectedCentralFrequencyFrequencyConstraintFrequencyConstraint(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve selected-central-frequency
     *
     * Retrieve operation of resource: selected-central-frequency
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointOtsiConnectionEndPointSpecOtsiTerminationSelectedCentralFrequencySelectedCentralFrequencyTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        String connectionEndPointUuid = null;
        CentralFrequency response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointOtsiConnectionEndPointSpecOtsiTerminationSelectedCentralFrequencySelectedCentralFrequency(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve frequency-constraint
     *
     * Retrieve operation of resource: frequency-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointOtsiConnectionEndPointSpecOtsiTerminationSelectedSpectrumFrequencyConstraintFrequencyConstraintTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        String connectionEndPointUuid = null;
        FrequencyConstraint response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointOtsiConnectionEndPointSpecOtsiTerminationSelectedSpectrumFrequencyConstraintFrequencyConstraint(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve selected-spectrum
     *
     * Retrieve operation of resource: selected-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointOtsiConnectionEndPointSpecOtsiTerminationSelectedSpectrumSelectedSpectrumTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        String connectionEndPointUuid = null;
        SpectrumBand response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointOtsiConnectionEndPointSpecOtsiTerminationSelectedSpectrumSelectedSpectrum(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve transmited-power
     *
     * Retrieve operation of resource: transmited-power
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointOtsiConnectionEndPointSpecOtsiTerminationTransmitedPowerTransmitedPowerTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        String connectionEndPointUuid = null;
        PowerPropertiesPac response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointOtsiConnectionEndPointSpecOtsiTerminationTransmitedPowerTransmitedPower(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve parent-node-edge-point
     *
     * Retrieve operation of resource: parent-node-edge-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointParentNodeEdgePointParentNodeEdgePointTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        String connectionEndPointUuid = null;
        NodeEdgePointRef response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointParentNodeEdgePointParentNodeEdgePoint(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve sdm-connection-end-point-spec
     *
     * Retrieve operation of resource: sdm-connection-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointSdmConnectionEndPointSpecSdmConnectionEndPointSpecTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        String connectionEndPointUuid = null;
        SdmConnectionEndPointSpec response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointSdmConnectionEndPointSpecSdmConnectionEndPointSpec(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve frequency-constraint
     *
     * Retrieve operation of resource: frequency-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointSdmConnectionEndPointSpecSdmOccupiedSpectrumFrequencyConstraintFrequencyConstraintTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        String connectionEndPointUuid = null;
        FrequencyConstraint response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointSdmConnectionEndPointSpecSdmOccupiedSpectrumFrequencyConstraintFrequencyConstraint(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve occupied-spectrum
     *
     * Retrieve operation of resource: occupied-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointSdmConnectionEndPointSpecSdmOccupiedSpectrumOccupiedSpectrumTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        String connectionEndPointUuid = null;
        SpectrumBand response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointSdmConnectionEndPointSpecSdmOccupiedSpectrumOccupiedSpectrum(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve sdm
     *
     * Retrieve operation of resource: sdm
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointSdmConnectionEndPointSpecSdmSdmTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        String connectionEndPointUuid = null;
        SdmPropertiesPac response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointCepListConnectionEndPointSdmConnectionEndPointSpecSdmSdm(uuid, nodeUuid, ownedNodeEdgePointUuid, connectionEndPointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve mapped-service-interface-point
     *
     * Retrieve operation of resource: mapped-service-interface-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointMappedServiceInterfacePointMappedServiceInterfacePointTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        List<String> response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointMappedServiceInterfacePointMappedServiceInterfacePoint(uuid, nodeUuid, ownedNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve mapped-service-interface-point by ID
     *
     * Retrieve operation of resource: mapped-service-interface-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointMappedServiceInterfacePointMappedServiceInterfacePointByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        String serviceInterfacePointUuid = null;
        ServiceInterfacePointRef response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointMappedServiceInterfacePointMappedServiceInterfacePointById(uuid, nodeUuid, ownedNodeEdgePointUuid, serviceInterfacePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve available-spectrum
     *
     * Retrieve operation of resource: available-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointMediaChannelNodeEdgePointSpecMcPoolAvailableSpectrumAvailableSpectrumTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        List<String> response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointMediaChannelNodeEdgePointSpecMcPoolAvailableSpectrumAvailableSpectrum(uuid, nodeUuid, ownedNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve available-spectrum by ID
     *
     * Retrieve operation of resource: available-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointMediaChannelNodeEdgePointSpecMcPoolAvailableSpectrumAvailableSpectrumByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        String upperFrequencyLowerFrequency = null;
        SpectrumBand response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointMediaChannelNodeEdgePointSpecMcPoolAvailableSpectrumAvailableSpectrumById(uuid, nodeUuid, ownedNodeEdgePointUuid, upperFrequencyLowerFrequency);

        // TODO: test validations
    }
    
    /**
     * Retrieve frequency-constraint
     *
     * Retrieve operation of resource: frequency-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointMediaChannelNodeEdgePointSpecMcPoolAvailableSpectrumFrequencyConstraintFrequencyConstraintTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        String upperFrequencyLowerFrequency = null;
        FrequencyConstraint response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointMediaChannelNodeEdgePointSpecMcPoolAvailableSpectrumFrequencyConstraintFrequencyConstraint(uuid, nodeUuid, ownedNodeEdgePointUuid, upperFrequencyLowerFrequency);

        // TODO: test validations
    }
    
    /**
     * Retrieve mc-pool
     *
     * Retrieve operation of resource: mc-pool
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointMediaChannelNodeEdgePointSpecMcPoolMcPoolTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        MediaChannelPoolCapabilityPac response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointMediaChannelNodeEdgePointSpecMcPoolMcPool(uuid, nodeUuid, ownedNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve frequency-constraint
     *
     * Retrieve operation of resource: frequency-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointMediaChannelNodeEdgePointSpecMcPoolOccupiedSpectrumFrequencyConstraintFrequencyConstraintTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        String upperFrequencyLowerFrequency = null;
        FrequencyConstraint response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointMediaChannelNodeEdgePointSpecMcPoolOccupiedSpectrumFrequencyConstraintFrequencyConstraint(uuid, nodeUuid, ownedNodeEdgePointUuid, upperFrequencyLowerFrequency);

        // TODO: test validations
    }
    
    /**
     * Retrieve occupied-spectrum
     *
     * Retrieve operation of resource: occupied-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointMediaChannelNodeEdgePointSpecMcPoolOccupiedSpectrumOccupiedSpectrumTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        List<String> response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointMediaChannelNodeEdgePointSpecMcPoolOccupiedSpectrumOccupiedSpectrum(uuid, nodeUuid, ownedNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve occupied-spectrum by ID
     *
     * Retrieve operation of resource: occupied-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointMediaChannelNodeEdgePointSpecMcPoolOccupiedSpectrumOccupiedSpectrumByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        String upperFrequencyLowerFrequency = null;
        SpectrumBand response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointMediaChannelNodeEdgePointSpecMcPoolOccupiedSpectrumOccupiedSpectrumById(uuid, nodeUuid, ownedNodeEdgePointUuid, upperFrequencyLowerFrequency);

        // TODO: test validations
    }
    
    /**
     * Retrieve frequency-constraint
     *
     * Retrieve operation of resource: frequency-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointMediaChannelNodeEdgePointSpecMcPoolSupportableSpectrumFrequencyConstraintFrequencyConstraintTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        String upperFrequencyLowerFrequency = null;
        FrequencyConstraint response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointMediaChannelNodeEdgePointSpecMcPoolSupportableSpectrumFrequencyConstraintFrequencyConstraint(uuid, nodeUuid, ownedNodeEdgePointUuid, upperFrequencyLowerFrequency);

        // TODO: test validations
    }
    
    /**
     * Retrieve supportable-spectrum
     *
     * Retrieve operation of resource: supportable-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointMediaChannelNodeEdgePointSpecMcPoolSupportableSpectrumSupportableSpectrumTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        List<String> response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointMediaChannelNodeEdgePointSpecMcPoolSupportableSpectrumSupportableSpectrum(uuid, nodeUuid, ownedNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve supportable-spectrum by ID
     *
     * Retrieve operation of resource: supportable-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointMediaChannelNodeEdgePointSpecMcPoolSupportableSpectrumSupportableSpectrumByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        String upperFrequencyLowerFrequency = null;
        SpectrumBand response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointMediaChannelNodeEdgePointSpecMcPoolSupportableSpectrumSupportableSpectrumById(uuid, nodeUuid, ownedNodeEdgePointUuid, upperFrequencyLowerFrequency);

        // TODO: test validations
    }
    
    /**
     * Retrieve media-channel-node-edge-point-spec
     *
     * Retrieve operation of resource: media-channel-node-edge-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointMediaChannelNodeEdgePointSpecMediaChannelNodeEdgePointSpecTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        MediaChannelNodeEdgePointSpec response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointMediaChannelNodeEdgePointSpecMediaChannelNodeEdgePointSpec(uuid, nodeUuid, ownedNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointNameNameTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        List<String> response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointNameName(uuid, nodeUuid, ownedNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve name by ID
     *
     * Retrieve operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointNameNameByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        String valueName = null;
        NameAndValue response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointNameNameById(uuid, nodeUuid, ownedNodeEdgePointUuid, valueName);

        // TODO: test validations
    }
    
    /**
     * Retrieve owned-node-edge-point
     *
     * Retrieve operation of resource: owned-node-edge-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointOwnedNodeEdgePointTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        List<String> response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointOwnedNodeEdgePoint(uuid, nodeUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve owned-node-edge-point by ID
     *
     * Retrieve operation of resource: owned-node-edge-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointOwnedNodeEdgePointByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        OwnedNodeEdgePointSchema response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointOwnedNodeEdgePointById(uuid, nodeUuid, ownedNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve sdm-node-edge-point-spec
     *
     * Retrieve operation of resource: sdm-node-edge-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointSdmNodeEdgePointSpecSdmNodeEdgePointSpecTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        SdmNodeEdgePointSpec response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointSdmNodeEdgePointSpecSdmNodeEdgePointSpec(uuid, nodeUuid, ownedNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve available-core
     *
     * Retrieve operation of resource: available-core
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointSdmNodeEdgePointSpecSdmPoolAvailableCoreAvailableCoreTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        List<String> response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointSdmNodeEdgePointSpecSdmPoolAvailableCoreAvailableCore(uuid, nodeUuid, ownedNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve available-core by ID
     *
     * Retrieve operation of resource: available-core
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointSdmNodeEdgePointSpecSdmPoolAvailableCoreAvailableCoreByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        String coreId = null;
        SdmCorePac response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointSdmNodeEdgePointSpecSdmPoolAvailableCoreAvailableCoreById(uuid, nodeUuid, ownedNodeEdgePointUuid, coreId);

        // TODO: test validations
    }
    
    /**
     * Retrieve available-mode
     *
     * Retrieve operation of resource: available-mode
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointSdmNodeEdgePointSpecSdmPoolAvailableCoreAvailableModeAvailableModeTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        String coreId = null;
        List<String> response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointSdmNodeEdgePointSpecSdmPoolAvailableCoreAvailableModeAvailableMode(uuid, nodeUuid, ownedNodeEdgePointUuid, coreId);

        // TODO: test validations
    }
    
    /**
     * Retrieve available-mode by ID
     *
     * Retrieve operation of resource: available-mode
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointSdmNodeEdgePointSpecSdmPoolAvailableCoreAvailableModeAvailableModeByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        String coreId = null;
        String modeId = null;
        SdmModePac response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointSdmNodeEdgePointSpecSdmPoolAvailableCoreAvailableModeAvailableModeById(uuid, nodeUuid, ownedNodeEdgePointUuid, coreId, modeId);

        // TODO: test validations
    }
    
    /**
     * Retrieve available-spectrum
     *
     * Retrieve operation of resource: available-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointSdmNodeEdgePointSpecSdmPoolAvailableCoreAvailableModeAvailableSpectrumAvailableSpectrumTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        String coreId = null;
        String modeId = null;
        List<String> response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointSdmNodeEdgePointSpecSdmPoolAvailableCoreAvailableModeAvailableSpectrumAvailableSpectrum(uuid, nodeUuid, ownedNodeEdgePointUuid, coreId, modeId);

        // TODO: test validations
    }
    
    /**
     * Retrieve available-spectrum by ID
     *
     * Retrieve operation of resource: available-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointSdmNodeEdgePointSpecSdmPoolAvailableCoreAvailableModeAvailableSpectrumAvailableSpectrumByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        String coreId = null;
        String modeId = null;
        String upperFrequencyLowerFrequency = null;
        SpectrumBand response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointSdmNodeEdgePointSpecSdmPoolAvailableCoreAvailableModeAvailableSpectrumAvailableSpectrumById(uuid, nodeUuid, ownedNodeEdgePointUuid, coreId, modeId, upperFrequencyLowerFrequency);

        // TODO: test validations
    }
    
    /**
     * Retrieve frequency-constraint
     *
     * Retrieve operation of resource: frequency-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointSdmNodeEdgePointSpecSdmPoolAvailableCoreAvailableModeAvailableSpectrumFrequencyConstraintFrequencyConstraintTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        String coreId = null;
        String modeId = null;
        String upperFrequencyLowerFrequency = null;
        FrequencyConstraint response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointSdmNodeEdgePointSpecSdmPoolAvailableCoreAvailableModeAvailableSpectrumFrequencyConstraintFrequencyConstraint(uuid, nodeUuid, ownedNodeEdgePointUuid, coreId, modeId, upperFrequencyLowerFrequency);

        // TODO: test validations
    }
    
    /**
     * Retrieve frequency-constraint
     *
     * Retrieve operation of resource: frequency-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointSdmNodeEdgePointSpecSdmPoolAvailableCoreAvailableModeOccupiedSpectrumFrequencyConstraintFrequencyConstraintTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        String coreId = null;
        String modeId = null;
        String upperFrequencyLowerFrequency = null;
        FrequencyConstraint response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointSdmNodeEdgePointSpecSdmPoolAvailableCoreAvailableModeOccupiedSpectrumFrequencyConstraintFrequencyConstraint(uuid, nodeUuid, ownedNodeEdgePointUuid, coreId, modeId, upperFrequencyLowerFrequency);

        // TODO: test validations
    }
    
    /**
     * Retrieve occupied-spectrum
     *
     * Retrieve operation of resource: occupied-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointSdmNodeEdgePointSpecSdmPoolAvailableCoreAvailableModeOccupiedSpectrumOccupiedSpectrumTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        String coreId = null;
        String modeId = null;
        List<String> response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointSdmNodeEdgePointSpecSdmPoolAvailableCoreAvailableModeOccupiedSpectrumOccupiedSpectrum(uuid, nodeUuid, ownedNodeEdgePointUuid, coreId, modeId);

        // TODO: test validations
    }
    
    /**
     * Retrieve occupied-spectrum by ID
     *
     * Retrieve operation of resource: occupied-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointSdmNodeEdgePointSpecSdmPoolAvailableCoreAvailableModeOccupiedSpectrumOccupiedSpectrumByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        String coreId = null;
        String modeId = null;
        String upperFrequencyLowerFrequency = null;
        SpectrumBand response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointSdmNodeEdgePointSpecSdmPoolAvailableCoreAvailableModeOccupiedSpectrumOccupiedSpectrumById(uuid, nodeUuid, ownedNodeEdgePointUuid, coreId, modeId, upperFrequencyLowerFrequency);

        // TODO: test validations
    }
    
    /**
     * Retrieve frequency-constraint
     *
     * Retrieve operation of resource: frequency-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointSdmNodeEdgePointSpecSdmPoolAvailableCoreAvailableModeSupportableSpectrumFrequencyConstraintFrequencyConstraintTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        String coreId = null;
        String modeId = null;
        String upperFrequencyLowerFrequency = null;
        FrequencyConstraint response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointSdmNodeEdgePointSpecSdmPoolAvailableCoreAvailableModeSupportableSpectrumFrequencyConstraintFrequencyConstraint(uuid, nodeUuid, ownedNodeEdgePointUuid, coreId, modeId, upperFrequencyLowerFrequency);

        // TODO: test validations
    }
    
    /**
     * Retrieve supportable-spectrum
     *
     * Retrieve operation of resource: supportable-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointSdmNodeEdgePointSpecSdmPoolAvailableCoreAvailableModeSupportableSpectrumSupportableSpectrumTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        String coreId = null;
        String modeId = null;
        List<String> response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointSdmNodeEdgePointSpecSdmPoolAvailableCoreAvailableModeSupportableSpectrumSupportableSpectrum(uuid, nodeUuid, ownedNodeEdgePointUuid, coreId, modeId);

        // TODO: test validations
    }
    
    /**
     * Retrieve supportable-spectrum by ID
     *
     * Retrieve operation of resource: supportable-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointSdmNodeEdgePointSpecSdmPoolAvailableCoreAvailableModeSupportableSpectrumSupportableSpectrumByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        String coreId = null;
        String modeId = null;
        String upperFrequencyLowerFrequency = null;
        SpectrumBand response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointSdmNodeEdgePointSpecSdmPoolAvailableCoreAvailableModeSupportableSpectrumSupportableSpectrumById(uuid, nodeUuid, ownedNodeEdgePointUuid, coreId, modeId, upperFrequencyLowerFrequency);

        // TODO: test validations
    }
    
    /**
     * Retrieve available-transceiver
     *
     * Retrieve operation of resource: available-transceiver
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointSdmNodeEdgePointSpecSdmPoolAvailableTransceiverAvailableTransceiverTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        AvailableTransceiver response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointSdmNodeEdgePointSpecSdmPoolAvailableTransceiverAvailableTransceiver(uuid, nodeUuid, ownedNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve core-id
     *
     * Retrieve operation of resource: core-id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointSdmNodeEdgePointSpecSdmPoolAvailableTransceiverCoreModeRefCoreIdCoreIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        String coreModeRef = null;
        List<String> response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointSdmNodeEdgePointSpecSdmPoolAvailableTransceiverCoreModeRefCoreIdCoreId(uuid, nodeUuid, ownedNodeEdgePointUuid, coreModeRef);

        // TODO: test validations
    }
    
    /**
     * Retrieve core-id by ID
     *
     * Retrieve operation of resource: core-id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointSdmNodeEdgePointSpecSdmPoolAvailableTransceiverCoreModeRefCoreIdCoreIdByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        String coreModeRef = null;
        String coreId = null;
        CoreIdSchema response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointSdmNodeEdgePointSpecSdmPoolAvailableTransceiverCoreModeRefCoreIdCoreIdById(uuid, nodeUuid, ownedNodeEdgePointUuid, coreModeRef, coreId);

        // TODO: test validations
    }
    
    /**
     * Retrieve core_mode_ref
     *
     * Retrieve operation of resource: core_mode_ref
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointSdmNodeEdgePointSpecSdmPoolAvailableTransceiverCoreModeRefCoreModeRefTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        List<String> response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointSdmNodeEdgePointSpecSdmPoolAvailableTransceiverCoreModeRefCoreModeRef(uuid, nodeUuid, ownedNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve core_mode_ref by ID
     *
     * Retrieve operation of resource: core_mode_ref
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointSdmNodeEdgePointSpecSdmPoolAvailableTransceiverCoreModeRefCoreModeRefByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        String coreModeRef = null;
        CoreModeRefSchema response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointSdmNodeEdgePointSpecSdmPoolAvailableTransceiverCoreModeRefCoreModeRefById(uuid, nodeUuid, ownedNodeEdgePointUuid, coreModeRef);

        // TODO: test validations
    }
    
    /**
     * Retrieve mode-id
     *
     * Retrieve operation of resource: mode-id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointSdmNodeEdgePointSpecSdmPoolAvailableTransceiverCoreModeRefModeIdModeIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        String coreModeRef = null;
        List<String> response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointSdmNodeEdgePointSpecSdmPoolAvailableTransceiverCoreModeRefModeIdModeId(uuid, nodeUuid, ownedNodeEdgePointUuid, coreModeRef);

        // TODO: test validations
    }
    
    /**
     * Retrieve mode-id by ID
     *
     * Retrieve operation of resource: mode-id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointSdmNodeEdgePointSpecSdmPoolAvailableTransceiverCoreModeRefModeIdModeIdByIdTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        String coreModeRef = null;
        String modeId = null;
        ModeIdSchema response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointSdmNodeEdgePointSpecSdmPoolAvailableTransceiverCoreModeRefModeIdModeIdById(uuid, nodeUuid, ownedNodeEdgePointUuid, coreModeRef, modeId);

        // TODO: test validations
    }
    
    /**
     * Retrieve frequency-constraint
     *
     * Retrieve operation of resource: frequency-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointSdmNodeEdgePointSpecSdmPoolAvailableTransceiverSupportableSpectrumFrequencyConstraintFrequencyConstraintTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        FrequencyConstraint response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointSdmNodeEdgePointSpecSdmPoolAvailableTransceiverSupportableSpectrumFrequencyConstraintFrequencyConstraint(uuid, nodeUuid, ownedNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve supportable-spectrum
     *
     * Retrieve operation of resource: supportable-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointSdmNodeEdgePointSpecSdmPoolAvailableTransceiverSupportableSpectrumSupportableSpectrumTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        SpectrumBand response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointSdmNodeEdgePointSpecSdmPoolAvailableTransceiverSupportableSpectrumSupportableSpectrum(uuid, nodeUuid, ownedNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve max-bw
     *
     * Retrieve operation of resource: max-bw
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointSdmNodeEdgePointSpecSdmPoolAvailableTransceiverSupportedBandwidthMaxBwMaxBwTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        CapacityValue response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointSdmNodeEdgePointSpecSdmPoolAvailableTransceiverSupportedBandwidthMaxBwMaxBw(uuid, nodeUuid, ownedNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve min-bw
     *
     * Retrieve operation of resource: min-bw
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointSdmNodeEdgePointSpecSdmPoolAvailableTransceiverSupportedBandwidthMinBwMinBwTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        CapacityValue response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointSdmNodeEdgePointSpecSdmPoolAvailableTransceiverSupportedBandwidthMinBwMinBw(uuid, nodeUuid, ownedNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve supported-bandwidth
     *
     * Retrieve operation of resource: supported-bandwidth
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointSdmNodeEdgePointSpecSdmPoolAvailableTransceiverSupportedBandwidthSupportedBandwidthTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        SupportedBandwidthSchema response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointSdmNodeEdgePointSpecSdmPoolAvailableTransceiverSupportedBandwidthSupportedBandwidth(uuid, nodeUuid, ownedNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve sdm-pool
     *
     * Retrieve operation of resource: sdm-pool
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointSdmNodeEdgePointSpecSdmPoolSdmPoolTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        SdmPoolCapabilityPac response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointSdmNodeEdgePointSpecSdmPoolSdmPool(uuid, nodeUuid, ownedNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve bandwidth-profile
     *
     * Retrieve operation of resource: bandwidth-profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileBandwidthProfileTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        BandwidthProfile response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileBandwidthProfile(uuid, nodeUuid, ownedNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-burst-size
     *
     * Retrieve operation of resource: committed-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        CapacityValue response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(uuid, nodeUuid, ownedNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-information-rate
     *
     * Retrieve operation of resource: committed-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        CapacityValue response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(uuid, nodeUuid, ownedNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-burst-size
     *
     * Retrieve operation of resource: peak-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        CapacityValue response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize(uuid, nodeUuid, ownedNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-information-rate
     *
     * Retrieve operation of resource: peak-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        CapacityValue response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate(uuid, nodeUuid, ownedNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve total-potential-capacity
     *
     * Retrieve operation of resource: total-potential-capacity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityTotalPotentialCapacityTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        Capacity response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityTotalPotentialCapacity(uuid, nodeUuid, ownedNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve total-size
     *
     * Retrieve operation of resource: total-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityTotalSizeTotalSizeTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        String ownedNodeEdgePointUuid = null;
        CapacityValue response = api.retrieveContextTopologyContextTopologyNodeOwnedNodeEdgePointTotalPotentialCapacityTotalSizeTotalSize(uuid, nodeUuid, ownedNodeEdgePointUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve bandwidth-profile
     *
     * Retrieve operation of resource: bandwidth-profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityBandwidthProfileBandwidthProfileTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        BandwidthProfile response = api.retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityBandwidthProfileBandwidthProfile(uuid, nodeUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-burst-size
     *
     * Retrieve operation of resource: committed-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        CapacityValue response = api.retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSize(uuid, nodeUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve committed-information-rate
     *
     * Retrieve operation of resource: committed-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        CapacityValue response = api.retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityBandwidthProfileCommittedInformationRateCommittedInformationRate(uuid, nodeUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-burst-size
     *
     * Retrieve operation of resource: peak-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSizeTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        CapacityValue response = api.retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityBandwidthProfilePeakBurstSizePeakBurstSize(uuid, nodeUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve peak-information-rate
     *
     * Retrieve operation of resource: peak-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRateTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        CapacityValue response = api.retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityBandwidthProfilePeakInformationRatePeakInformationRate(uuid, nodeUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve total-potential-capacity
     *
     * Retrieve operation of resource: total-potential-capacity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityTotalPotentialCapacityTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        Capacity response = api.retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityTotalPotentialCapacity(uuid, nodeUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve total-size
     *
     * Retrieve operation of resource: total-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityTotalSizeTotalSizeTest() throws ApiException {
        String uuid = null;
        String nodeUuid = null;
        CapacityValue response = api.retrieveContextTopologyContextTopologyNodeTotalPotentialCapacityTotalSizeTotalSize(uuid, nodeUuid);

        // TODO: test validations
    }
    
    /**
     * Retrieve topology
     *
     * Retrieve operation of resource: topology
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyTopologyTest() throws ApiException {
        List<String> response = api.retrieveContextTopologyContextTopologyTopology();

        // TODO: test validations
    }
    
    /**
     * Retrieve topology by ID
     *
     * Retrieve operation of resource: topology
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextTopologyContextTopologyTopologyByIdTest() throws ApiException {
        String uuid = null;
        Topology response = api.retrieveContextTopologyContextTopologyTopologyById(uuid);

        // TODO: test validations
    }
    
    /**
     * Update context by ID
     *
     * Update operation of resource: context
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextByIdTest() throws ApiException {
        ContextSchema context = null;
        api.updateContextById(context);

        // TODO: test validations
    }
    
    /**
     * Update connection-end-point by ID
     *
     * Update operation of resource: connection-end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectionConnectionEndPointConnectionEndPointByIdTest() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        ConnectionEndPointSchema connectionEndPoint = null;
        api.updateContextConnectivityContextConnectionConnectionEndPointConnectionEndPointById(uuid, connectionEndPointUuid, connectionEndPoint);

        // TODO: test validations
    }
    
    /**
     * Update media-channel-assembly-spec by ID
     *
     * Update operation of resource: media-channel-assembly-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectionConnectionEndPointMediaChannelAssemblySpecMediaChannelAssemblySpecByIdTest() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        MediaChannelAssemblySpec mediaChannelAssemblySpec = null;
        api.updateContextConnectivityContextConnectionConnectionEndPointMediaChannelAssemblySpecMediaChannelAssemblySpecById(uuid, connectionEndPointUuid, mediaChannelAssemblySpec);

        // TODO: test validations
    }
    
    /**
     * Update media-channel-connection-end-point-spec by ID
     *
     * Update operation of resource: media-channel-connection-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectionConnectionEndPointMediaChannelConnectionEndPointSpecMediaChannelConnectionEndPointSpecByIdTest() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        MediaChannelConnectionEndPointSpec mediaChannelConnectionEndPointSpec = null;
        api.updateContextConnectivityContextConnectionConnectionEndPointMediaChannelConnectionEndPointSpecMediaChannelConnectionEndPointSpecById(uuid, connectionEndPointUuid, mediaChannelConnectionEndPointSpec);

        // TODO: test validations
    }
    
    /**
     * Update name by ID
     *
     * Update operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectionConnectionEndPointNameNameByIdTest() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        String valueName = null;
        NameAndValue name = null;
        api.updateContextConnectivityContextConnectionConnectionEndPointNameNameById(uuid, connectionEndPointUuid, valueName, name);

        // TODO: test validations
    }
    
    /**
     * Update ots-connection-end-point-spec by ID
     *
     * Update operation of resource: ots-connection-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectionConnectionEndPointOtsConnectionEndPointSpecOtsConnectionEndPointSpecByIdTest() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        OtsConnectionEndPointSpec otsConnectionEndPointSpec = null;
        api.updateContextConnectivityContextConnectionConnectionEndPointOtsConnectionEndPointSpecOtsConnectionEndPointSpecById(uuid, connectionEndPointUuid, otsConnectionEndPointSpec);

        // TODO: test validations
    }
    
    /**
     * Update otsi-assembly-connection-end-point-spec by ID
     *
     * Update operation of resource: otsi-assembly-connection-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectionConnectionEndPointOtsiAssemblyConnectionEndPointSpecOtsiAssemblyConnectionEndPointSpecByIdTest() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        OtsiAssemblyConnectionEndPointSpec otsiAssemblyConnectionEndPointSpec = null;
        api.updateContextConnectivityContextConnectionConnectionEndPointOtsiAssemblyConnectionEndPointSpecOtsiAssemblyConnectionEndPointSpecById(uuid, connectionEndPointUuid, otsiAssemblyConnectionEndPointSpec);

        // TODO: test validations
    }
    
    /**
     * Update otsi-connection-end-point-spec by ID
     *
     * Update operation of resource: otsi-connection-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectionConnectionEndPointOtsiConnectionEndPointSpecOtsiConnectionEndPointSpecByIdTest() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        OtsiConnectionEndPointSpec otsiConnectionEndPointSpec = null;
        api.updateContextConnectivityContextConnectionConnectionEndPointOtsiConnectionEndPointSpecOtsiConnectionEndPointSpecById(uuid, connectionEndPointUuid, otsiConnectionEndPointSpec);

        // TODO: test validations
    }
    
    /**
     * Update sdm-connection-end-point-spec by ID
     *
     * Update operation of resource: sdm-connection-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectionConnectionEndPointSdmConnectionEndPointSpecSdmConnectionEndPointSpecByIdTest() throws ApiException {
        String uuid = null;
        String connectionEndPointUuid = null;
        SdmConnectionEndPointSpec sdmConnectionEndPointSpec = null;
        api.updateContextConnectivityContextConnectionConnectionEndPointSdmConnectionEndPointSpecSdmConnectionEndPointSpecById(uuid, connectionEndPointUuid, sdmConnectionEndPointSpec);

        // TODO: test validations
    }
    
    /**
     * Update connection-end-point by ID
     *
     * Update operation of resource: connection-end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        ConnectionEndPointSchema connectionEndPoint = null;
        api.updateContextConnectivityContextConnectionRouteConnectionEndPointConnectionEndPointById(uuid, localId, connectionEndPointUuid, connectionEndPoint);

        // TODO: test validations
    }
    
    /**
     * Update media-channel-assembly-spec by ID
     *
     * Update operation of resource: media-channel-assembly-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectionRouteConnectionEndPointMediaChannelAssemblySpecMediaChannelAssemblySpecByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        MediaChannelAssemblySpec mediaChannelAssemblySpec = null;
        api.updateContextConnectivityContextConnectionRouteConnectionEndPointMediaChannelAssemblySpecMediaChannelAssemblySpecById(uuid, localId, connectionEndPointUuid, mediaChannelAssemblySpec);

        // TODO: test validations
    }
    
    /**
     * Update media-channel-connection-end-point-spec by ID
     *
     * Update operation of resource: media-channel-connection-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectionRouteConnectionEndPointMediaChannelConnectionEndPointSpecMediaChannelConnectionEndPointSpecByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        MediaChannelConnectionEndPointSpec mediaChannelConnectionEndPointSpec = null;
        api.updateContextConnectivityContextConnectionRouteConnectionEndPointMediaChannelConnectionEndPointSpecMediaChannelConnectionEndPointSpecById(uuid, localId, connectionEndPointUuid, mediaChannelConnectionEndPointSpec);

        // TODO: test validations
    }
    
    /**
     * Update name by ID
     *
     * Update operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectionRouteConnectionEndPointNameNameByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        String valueName = null;
        NameAndValue name = null;
        api.updateContextConnectivityContextConnectionRouteConnectionEndPointNameNameById(uuid, localId, connectionEndPointUuid, valueName, name);

        // TODO: test validations
    }
    
    /**
     * Update ots-connection-end-point-spec by ID
     *
     * Update operation of resource: ots-connection-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectionRouteConnectionEndPointOtsConnectionEndPointSpecOtsConnectionEndPointSpecByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        OtsConnectionEndPointSpec otsConnectionEndPointSpec = null;
        api.updateContextConnectivityContextConnectionRouteConnectionEndPointOtsConnectionEndPointSpecOtsConnectionEndPointSpecById(uuid, localId, connectionEndPointUuid, otsConnectionEndPointSpec);

        // TODO: test validations
    }
    
    /**
     * Update otsi-assembly-connection-end-point-spec by ID
     *
     * Update operation of resource: otsi-assembly-connection-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectionRouteConnectionEndPointOtsiAssemblyConnectionEndPointSpecOtsiAssemblyConnectionEndPointSpecByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        OtsiAssemblyConnectionEndPointSpec otsiAssemblyConnectionEndPointSpec = null;
        api.updateContextConnectivityContextConnectionRouteConnectionEndPointOtsiAssemblyConnectionEndPointSpecOtsiAssemblyConnectionEndPointSpecById(uuid, localId, connectionEndPointUuid, otsiAssemblyConnectionEndPointSpec);

        // TODO: test validations
    }
    
    /**
     * Update otsi-connection-end-point-spec by ID
     *
     * Update operation of resource: otsi-connection-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectionRouteConnectionEndPointOtsiConnectionEndPointSpecOtsiConnectionEndPointSpecByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        OtsiConnectionEndPointSpec otsiConnectionEndPointSpec = null;
        api.updateContextConnectivityContextConnectionRouteConnectionEndPointOtsiConnectionEndPointSpecOtsiConnectionEndPointSpecById(uuid, localId, connectionEndPointUuid, otsiConnectionEndPointSpec);

        // TODO: test validations
    }
    
    /**
     * Update sdm-connection-end-point-spec by ID
     *
     * Update operation of resource: sdm-connection-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectionRouteConnectionEndPointSdmConnectionEndPointSpecSdmConnectionEndPointSpecByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        SdmConnectionEndPointSpec sdmConnectionEndPointSpec = null;
        api.updateContextConnectivityContextConnectionRouteConnectionEndPointSdmConnectionEndPointSpecSdmConnectionEndPointSpecById(uuid, localId, connectionEndPointUuid, sdmConnectionEndPointSpec);

        // TODO: test validations
    }
    
    /**
     * Update connectivity-context by ID
     *
     * Update operation of resource: connectivity-context
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectivityContextByIdTest() throws ApiException {
        ConnectivityContext connectivityContext = null;
        api.updateContextConnectivityContextConnectivityContextById(connectivityContext);

        // TODO: test validations
    }
    
    /**
     * Update connectivity-service by ID
     *
     * Update operation of resource: connectivity-service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectivityServiceConnectivityServiceByIdTest() throws ApiException {
        String uuid = null;
        ConnectivityServiceSchema connectivityService = null;
        api.updateContextConnectivityContextConnectivityServiceConnectivityServiceById(uuid, connectivityService);

        // TODO: test validations
    }
    
    /**
     * Update coroute-inclusion by ID
     *
     * Update operation of resource: coroute-inclusion
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectivityServiceCorouteInclusionCorouteInclusionByIdTest() throws ApiException {
        String uuid = null;
        ConnectivityServiceRef corouteInclusion = null;
        api.updateContextConnectivityContextConnectivityServiceCorouteInclusionCorouteInclusionById(uuid, corouteInclusion);

        // TODO: test validations
    }
    
    /**
     * Update cost-characteristic by ID
     *
     * Update operation of resource: cost-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String costName = null;
        CostCharacteristic costCharacteristic = null;
        api.updateContextConnectivityContextConnectivityServiceCostCharacteristicCostCharacteristicById(uuid, costName, costCharacteristic);

        // TODO: test validations
    }
    
    /**
     * Update diversity-exclusion by ID
     *
     * Update operation of resource: diversity-exclusion
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionByIdTest() throws ApiException {
        String uuid = null;
        String connectivityServiceUuid = null;
        ConnectivityServiceRef diversityExclusion = null;
        api.updateContextConnectivityContextConnectivityServiceDiversityExclusionDiversityExclusionById(uuid, connectivityServiceUuid, diversityExclusion);

        // TODO: test validations
    }
    
    /**
     * Update bandwidth-profile by ID
     *
     * Update operation of resource: bandwidth-profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        BandwidthProfile bandwidthProfile = null;
        api.updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileBandwidthProfileById(uuid, localId, bandwidthProfile);

        // TODO: test validations
    }
    
    /**
     * Update committed-burst-size by ID
     *
     * Update operation of resource: committed-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        CapacityValue committedBurstSize = null;
        api.updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById(uuid, localId, committedBurstSize);

        // TODO: test validations
    }
    
    /**
     * Update committed-information-rate by ID
     *
     * Update operation of resource: committed-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        CapacityValue committedInformationRate = null;
        api.updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById(uuid, localId, committedInformationRate);

        // TODO: test validations
    }
    
    /**
     * Update peak-burst-size by ID
     *
     * Update operation of resource: peak-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        CapacityValue peakBurstSize = null;
        api.updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById(uuid, localId, peakBurstSize);

        // TODO: test validations
    }
    
    /**
     * Update peak-information-rate by ID
     *
     * Update operation of resource: peak-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        CapacityValue peakInformationRate = null;
        api.updateContextConnectivityContextConnectivityServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateById(uuid, localId, peakInformationRate);

        // TODO: test validations
    }
    
    /**
     * Update capacity by ID
     *
     * Update operation of resource: capacity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectivityServiceEndPointCapacityCapacityByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        Capacity capacity = null;
        api.updateContextConnectivityContextConnectivityServiceEndPointCapacityCapacityById(uuid, localId, capacity);

        // TODO: test validations
    }
    
    /**
     * Update total-size by ID
     *
     * Update operation of resource: total-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        CapacityValue totalSize = null;
        api.updateContextConnectivityContextConnectivityServiceEndPointCapacityTotalSizeTotalSizeById(uuid, localId, totalSize);

        // TODO: test validations
    }
    
    /**
     * Update connection-end-point by ID
     *
     * Update operation of resource: connection-end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        ConnectionEndPointSchema connectionEndPoint = null;
        api.updateContextConnectivityContextConnectivityServiceEndPointConnectionEndPointConnectionEndPointById(uuid, localId, connectionEndPointUuid, connectionEndPoint);

        // TODO: test validations
    }
    
    /**
     * Update media-channel-assembly-spec by ID
     *
     * Update operation of resource: media-channel-assembly-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectivityServiceEndPointConnectionEndPointMediaChannelAssemblySpecMediaChannelAssemblySpecByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        MediaChannelAssemblySpec mediaChannelAssemblySpec = null;
        api.updateContextConnectivityContextConnectivityServiceEndPointConnectionEndPointMediaChannelAssemblySpecMediaChannelAssemblySpecById(uuid, localId, connectionEndPointUuid, mediaChannelAssemblySpec);

        // TODO: test validations
    }
    
    /**
     * Update media-channel-connection-end-point-spec by ID
     *
     * Update operation of resource: media-channel-connection-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectivityServiceEndPointConnectionEndPointMediaChannelConnectionEndPointSpecMediaChannelConnectionEndPointSpecByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        MediaChannelConnectionEndPointSpec mediaChannelConnectionEndPointSpec = null;
        api.updateContextConnectivityContextConnectivityServiceEndPointConnectionEndPointMediaChannelConnectionEndPointSpecMediaChannelConnectionEndPointSpecById(uuid, localId, connectionEndPointUuid, mediaChannelConnectionEndPointSpec);

        // TODO: test validations
    }
    
    /**
     * Update name by ID
     *
     * Update operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectivityServiceEndPointConnectionEndPointNameNameByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        String valueName = null;
        NameAndValue name = null;
        api.updateContextConnectivityContextConnectivityServiceEndPointConnectionEndPointNameNameById(uuid, localId, connectionEndPointUuid, valueName, name);

        // TODO: test validations
    }
    
    /**
     * Update ots-connection-end-point-spec by ID
     *
     * Update operation of resource: ots-connection-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectivityServiceEndPointConnectionEndPointOtsConnectionEndPointSpecOtsConnectionEndPointSpecByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        OtsConnectionEndPointSpec otsConnectionEndPointSpec = null;
        api.updateContextConnectivityContextConnectivityServiceEndPointConnectionEndPointOtsConnectionEndPointSpecOtsConnectionEndPointSpecById(uuid, localId, connectionEndPointUuid, otsConnectionEndPointSpec);

        // TODO: test validations
    }
    
    /**
     * Update otsi-assembly-connection-end-point-spec by ID
     *
     * Update operation of resource: otsi-assembly-connection-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectivityServiceEndPointConnectionEndPointOtsiAssemblyConnectionEndPointSpecOtsiAssemblyConnectionEndPointSpecByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        OtsiAssemblyConnectionEndPointSpec otsiAssemblyConnectionEndPointSpec = null;
        api.updateContextConnectivityContextConnectivityServiceEndPointConnectionEndPointOtsiAssemblyConnectionEndPointSpecOtsiAssemblyConnectionEndPointSpecById(uuid, localId, connectionEndPointUuid, otsiAssemblyConnectionEndPointSpec);

        // TODO: test validations
    }
    
    /**
     * Update otsi-connection-end-point-spec by ID
     *
     * Update operation of resource: otsi-connection-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectivityServiceEndPointConnectionEndPointOtsiConnectionEndPointSpecOtsiConnectionEndPointSpecByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        OtsiConnectionEndPointSpec otsiConnectionEndPointSpec = null;
        api.updateContextConnectivityContextConnectivityServiceEndPointConnectionEndPointOtsiConnectionEndPointSpecOtsiConnectionEndPointSpecById(uuid, localId, connectionEndPointUuid, otsiConnectionEndPointSpec);

        // TODO: test validations
    }
    
    /**
     * Update sdm-connection-end-point-spec by ID
     *
     * Update operation of resource: sdm-connection-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectivityServiceEndPointConnectionEndPointSdmConnectionEndPointSpecSdmConnectionEndPointSpecByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        SdmConnectionEndPointSpec sdmConnectionEndPointSpec = null;
        api.updateContextConnectivityContextConnectivityServiceEndPointConnectionEndPointSdmConnectionEndPointSpecSdmConnectionEndPointSpecById(uuid, localId, connectionEndPointUuid, sdmConnectionEndPointSpec);

        // TODO: test validations
    }
    
    /**
     * Update end-point by ID
     *
     * Update operation of resource: end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectivityServiceEndPointEndPointByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        EndPointSchema endPoint = null;
        api.updateContextConnectivityContextConnectivityServiceEndPointEndPointById(uuid, localId, endPoint);

        // TODO: test validations
    }
    
    /**
     * Update media-channel-service-interface-point-spec by ID
     *
     * Update operation of resource: media-channel-service-interface-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectivityServiceEndPointMediaChannelServiceInterfacePointSpecMediaChannelServiceInterfacePointSpecByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        MediaChannelServiceInterfacePointSpec mediaChannelServiceInterfacePointSpec = null;
        api.updateContextConnectivityContextConnectivityServiceEndPointMediaChannelServiceInterfacePointSpecMediaChannelServiceInterfacePointSpecById(uuid, localId, mediaChannelServiceInterfacePointSpec);

        // TODO: test validations
    }
    
    /**
     * Update name by ID
     *
     * Update operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectivityServiceEndPointNameNameByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String valueName = null;
        NameAndValue name = null;
        api.updateContextConnectivityContextConnectivityServiceEndPointNameNameById(uuid, localId, valueName, name);

        // TODO: test validations
    }
    
    /**
     * Update application-identifier by ID
     *
     * Update operation of resource: application-identifier
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectivityServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigApplicationIdentifierApplicationIdentifierByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        ApplicationIdentifier applicationIdentifier = null;
        api.updateContextConnectivityContextConnectivityServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigApplicationIdentifierApplicationIdentifierById(uuid, localId, applicationIdentifier);

        // TODO: test validations
    }
    
    /**
     * Update central-frequency by ID
     *
     * Update operation of resource: central-frequency
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectivityServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigCentralFrequencyCentralFrequencyByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        CentralFrequency centralFrequency = null;
        api.updateContextConnectivityContextConnectivityServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigCentralFrequencyCentralFrequencyById(uuid, localId, centralFrequency);

        // TODO: test validations
    }
    
    /**
     * Update frequency-constraint by ID
     *
     * Update operation of resource: frequency-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectivityServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigCentralFrequencyFrequencyConstraintFrequencyConstraintByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        FrequencyConstraint frequencyConstraint = null;
        api.updateContextConnectivityContextConnectivityServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigCentralFrequencyFrequencyConstraintFrequencyConstraintById(uuid, localId, frequencyConstraint);

        // TODO: test validations
    }
    
    /**
     * Update otsi-config by ID
     *
     * Update operation of resource: otsi-config
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectivityServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigOtsiConfigByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        OtsiTerminationConfigPac otsiConfig = null;
        api.updateContextConnectivityContextConnectivityServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigOtsiConfigById(uuid, localId, otsiConfig);

        // TODO: test validations
    }
    
    /**
     * Update frequency-constraint by ID
     *
     * Update operation of resource: frequency-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectivityServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigSpectrumFrequencyConstraintFrequencyConstraintByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        FrequencyConstraint frequencyConstraint = null;
        api.updateContextConnectivityContextConnectivityServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigSpectrumFrequencyConstraintFrequencyConstraintById(uuid, localId, frequencyConstraint);

        // TODO: test validations
    }
    
    /**
     * Update spectrum by ID
     *
     * Update operation of resource: spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectivityServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigSpectrumSpectrumByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        SpectrumBand spectrum = null;
        api.updateContextConnectivityContextConnectivityServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigSpectrumSpectrumById(uuid, localId, spectrum);

        // TODO: test validations
    }
    
    /**
     * Update transmit-power by ID
     *
     * Update operation of resource: transmit-power
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectivityServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigTransmitPowerTransmitPowerByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        PowerPropertiesPac transmitPower = null;
        api.updateContextConnectivityContextConnectivityServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigTransmitPowerTransmitPowerById(uuid, localId, transmitPower);

        // TODO: test validations
    }
    
    /**
     * Update otsi-connectivity-service-end-point-spec by ID
     *
     * Update operation of resource: otsi-connectivity-service-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectivityServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConnectivityServiceEndPointSpecByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        OtsiConnectivityServiceEndPointSpec otsiConnectivityServiceEndPointSpec = null;
        api.updateContextConnectivityContextConnectivityServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConnectivityServiceEndPointSpecById(uuid, localId, otsiConnectivityServiceEndPointSpec);

        // TODO: test validations
    }
    
    /**
     * Update sdm-service-interface-point-spec by ID
     *
     * Update operation of resource: sdm-service-interface-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectivityServiceEndPointSdmServiceInterfacePointSpecSdmServiceInterfacePointSpecByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        SdmServiceInterfacePointSpec sdmServiceInterfacePointSpec = null;
        api.updateContextConnectivityContextConnectivityServiceEndPointSdmServiceInterfacePointSpecSdmServiceInterfacePointSpecById(uuid, localId, sdmServiceInterfacePointSpec);

        // TODO: test validations
    }
    
    /**
     * Update media-channel-service-interface-point-spec by ID
     *
     * Update operation of resource: media-channel-service-interface-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointMediaChannelServiceInterfacePointSpecMediaChannelServiceInterfacePointSpecByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        MediaChannelServiceInterfacePointSpec mediaChannelServiceInterfacePointSpec = null;
        api.updateContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointMediaChannelServiceInterfacePointSpecMediaChannelServiceInterfacePointSpecById(uuid, localId, serviceInterfacePointUuid, mediaChannelServiceInterfacePointSpec);

        // TODO: test validations
    }
    
    /**
     * Update name by ID
     *
     * Update operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointNameNameByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        String valueName = null;
        NameAndValue name = null;
        api.updateContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointNameNameById(uuid, localId, serviceInterfacePointUuid, valueName, name);

        // TODO: test validations
    }
    
    /**
     * Update otsi-service-interface-point-spec by ID
     *
     * Update operation of resource: otsi-service-interface-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointOtsiServiceInterfacePointSpecOtsiServiceInterfacePointSpecByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        OtsiServiceInterfacePointSpec otsiServiceInterfacePointSpec = null;
        api.updateContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointOtsiServiceInterfacePointSpecOtsiServiceInterfacePointSpecById(uuid, localId, serviceInterfacePointUuid, otsiServiceInterfacePointSpec);

        // TODO: test validations
    }
    
    /**
     * Update sdm-service-interface-point-spec by ID
     *
     * Update operation of resource: sdm-service-interface-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmServiceInterfacePointSpecByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        SdmServiceInterfacePointSpec sdmServiceInterfacePointSpec = null;
        api.updateContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmServiceInterfacePointSpecById(uuid, localId, serviceInterfacePointUuid, sdmServiceInterfacePointSpec);

        // TODO: test validations
    }
    
    /**
     * Update service-interface-point by ID
     *
     * Update operation of resource: service-interface-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        ServiceInterfacePointRef serviceInterfacePoint = null;
        api.updateContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById(uuid, localId, serviceInterfacePoint);

        // TODO: test validations
    }
    
    /**
     * Update service-interface-point by ID
     *
     * Update operation of resource: service-interface-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById_0Test() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        ServiceInterfacePointSchema serviceInterfacePoint = null;
        api.updateContextConnectivityContextConnectivityServiceEndPointServiceInterfacePointServiceInterfacePointById_0(uuid, localId, serviceInterfacePointUuid, serviceInterfacePoint);

        // TODO: test validations
    }
    
    /**
     * Update include-core by ID
     *
     * Update operation of resource: include-core
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectivityServiceIncludeCoreIncludeCoreByIdTest() throws ApiException {
        String uuid = null;
        SdmPropertiesPac includeCore = null;
        api.updateContextConnectivityContextConnectivityServiceIncludeCoreIncludeCoreById(uuid, includeCore);

        // TODO: test validations
    }
    
    /**
     * Update frequency-constraint by ID
     *
     * Update operation of resource: frequency-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectivityServiceIncludeCoreOccupiedSpectrumFrequencyConstraintFrequencyConstraintByIdTest() throws ApiException {
        String uuid = null;
        FrequencyConstraint frequencyConstraint = null;
        api.updateContextConnectivityContextConnectivityServiceIncludeCoreOccupiedSpectrumFrequencyConstraintFrequencyConstraintById(uuid, frequencyConstraint);

        // TODO: test validations
    }
    
    /**
     * Update occupied-spectrum by ID
     *
     * Update operation of resource: occupied-spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectivityServiceIncludeCoreOccupiedSpectrumOccupiedSpectrumByIdTest() throws ApiException {
        String uuid = null;
        SpectrumBand occupiedSpectrum = null;
        api.updateContextConnectivityContextConnectivityServiceIncludeCoreOccupiedSpectrumOccupiedSpectrumById(uuid, occupiedSpectrum);

        // TODO: test validations
    }
    
    /**
     * Update latency-characteristic by ID
     *
     * Update operation of resource: latency-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String trafficPropertyName = null;
        LatencyCharacteristic latencyCharacteristic = null;
        api.updateContextConnectivityContextConnectivityServiceLatencyCharacteristicLatencyCharacteristicById(uuid, trafficPropertyName, latencyCharacteristic);

        // TODO: test validations
    }
    
    /**
     * Update name by ID
     *
     * Update operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectivityServiceNameNameByIdTest() throws ApiException {
        String uuid = null;
        String valueName = null;
        NameAndValue name = null;
        api.updateContextConnectivityContextConnectivityServiceNameNameById(uuid, valueName, name);

        // TODO: test validations
    }
    
    /**
     * Update bandwidth-profile by ID
     *
     * Update operation of resource: bandwidth-profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileByIdTest() throws ApiException {
        String uuid = null;
        BandwidthProfile bandwidthProfile = null;
        api.updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileBandwidthProfileById(uuid, bandwidthProfile);

        // TODO: test validations
    }
    
    /**
     * Update committed-burst-size by ID
     *
     * Update operation of resource: committed-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdTest() throws ApiException {
        String uuid = null;
        CapacityValue committedBurstSize = null;
        api.updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById(uuid, committedBurstSize);

        // TODO: test validations
    }
    
    /**
     * Update committed-information-rate by ID
     *
     * Update operation of resource: committed-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdTest() throws ApiException {
        String uuid = null;
        CapacityValue committedInformationRate = null;
        api.updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById(uuid, committedInformationRate);

        // TODO: test validations
    }
    
    /**
     * Update peak-burst-size by ID
     *
     * Update operation of resource: peak-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdTest() throws ApiException {
        String uuid = null;
        CapacityValue peakBurstSize = null;
        api.updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById(uuid, peakBurstSize);

        // TODO: test validations
    }
    
    /**
     * Update peak-information-rate by ID
     *
     * Update operation of resource: peak-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdTest() throws ApiException {
        String uuid = null;
        CapacityValue peakInformationRate = null;
        api.updateContextConnectivityContextConnectivityServiceRequestedCapacityBandwidthProfilePeakInformationRatePeakInformationRateById(uuid, peakInformationRate);

        // TODO: test validations
    }
    
    /**
     * Update requested-capacity by ID
     *
     * Update operation of resource: requested-capacity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectivityServiceRequestedCapacityRequestedCapacityByIdTest() throws ApiException {
        String uuid = null;
        Capacity requestedCapacity = null;
        api.updateContextConnectivityContextConnectivityServiceRequestedCapacityRequestedCapacityById(uuid, requestedCapacity);

        // TODO: test validations
    }
    
    /**
     * Update total-size by ID
     *
     * Update operation of resource: total-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeByIdTest() throws ApiException {
        String uuid = null;
        CapacityValue totalSize = null;
        api.updateContextConnectivityContextConnectivityServiceRequestedCapacityTotalSizeTotalSizeById(uuid, totalSize);

        // TODO: test validations
    }
    
    /**
     * Update resilience-type by ID
     *
     * Update operation of resource: resilience-type
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectivityServiceResilienceTypeResilienceTypeByIdTest() throws ApiException {
        String uuid = null;
        ResilienceType resilienceType = null;
        api.updateContextConnectivityContextConnectivityServiceResilienceTypeResilienceTypeById(uuid, resilienceType);

        // TODO: test validations
    }
    
    /**
     * Update risk-diversity-characteristic by ID
     *
     * Update operation of resource: risk-diversity-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String riskCharacteristicName = null;
        RiskCharacteristic riskDiversityCharacteristic = null;
        api.updateContextConnectivityContextConnectivityServiceRiskDiversityCharacteristicRiskDiversityCharacteristicById(uuid, riskCharacteristicName, riskDiversityCharacteristic);

        // TODO: test validations
    }
    
    /**
     * Update schedule by ID
     *
     * Update operation of resource: schedule
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextConnectivityContextConnectivityServiceScheduleScheduleByIdTest() throws ApiException {
        String uuid = null;
        TimeRange schedule = null;
        api.updateContextConnectivityContextConnectivityServiceScheduleScheduleById(uuid, schedule);

        // TODO: test validations
    }
    
    /**
     * Update name by ID
     *
     * Update operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextNameNameByIdTest() throws ApiException {
        String valueName = null;
        NameAndValue name = null;
        api.updateContextNameNameById(valueName, name);

        // TODO: test validations
    }
    
    /**
     * Update bandwidth-profile by ID
     *
     * Update operation of resource: bandwidth-profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileBandwidthProfileByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        BandwidthProfile bandwidthProfile = null;
        api.updateContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileBandwidthProfileById(uuid, localId, bandwidthProfile);

        // TODO: test validations
    }
    
    /**
     * Update committed-burst-size by ID
     *
     * Update operation of resource: committed-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        CapacityValue committedBurstSize = null;
        api.updateContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedBurstSizeCommittedBurstSizeById(uuid, localId, committedBurstSize);

        // TODO: test validations
    }
    
    /**
     * Update committed-information-rate by ID
     *
     * Update operation of resource: committed-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        CapacityValue committedInformationRate = null;
        api.updateContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfileCommittedInformationRateCommittedInformationRateById(uuid, localId, committedInformationRate);

        // TODO: test validations
    }
    
    /**
     * Update peak-burst-size by ID
     *
     * Update operation of resource: peak-burst-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        CapacityValue peakBurstSize = null;
        api.updateContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakBurstSizePeakBurstSizeById(uuid, localId, peakBurstSize);

        // TODO: test validations
    }
    
    /**
     * Update peak-information-rate by ID
     *
     * Update operation of resource: peak-information-rate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        CapacityValue peakInformationRate = null;
        api.updateContextPathComputationContextPathCompServiceEndPointCapacityBandwidthProfilePeakInformationRatePeakInformationRateById(uuid, localId, peakInformationRate);

        // TODO: test validations
    }
    
    /**
     * Update capacity by ID
     *
     * Update operation of resource: capacity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextPathComputationContextPathCompServiceEndPointCapacityCapacityByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        Capacity capacity = null;
        api.updateContextPathComputationContextPathCompServiceEndPointCapacityCapacityById(uuid, localId, capacity);

        // TODO: test validations
    }
    
    /**
     * Update total-size by ID
     *
     * Update operation of resource: total-size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextPathComputationContextPathCompServiceEndPointCapacityTotalSizeTotalSizeByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        CapacityValue totalSize = null;
        api.updateContextPathComputationContextPathCompServiceEndPointCapacityTotalSizeTotalSizeById(uuid, localId, totalSize);

        // TODO: test validations
    }
    
    /**
     * Update connection-end-point by ID
     *
     * Update operation of resource: connection-end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextPathComputationContextPathCompServiceEndPointConnectionEndPointConnectionEndPointByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        ConnectionEndPointSchema connectionEndPoint = null;
        api.updateContextPathComputationContextPathCompServiceEndPointConnectionEndPointConnectionEndPointById(uuid, localId, connectionEndPointUuid, connectionEndPoint);

        // TODO: test validations
    }
    
    /**
     * Update media-channel-assembly-spec by ID
     *
     * Update operation of resource: media-channel-assembly-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextPathComputationContextPathCompServiceEndPointConnectionEndPointMediaChannelAssemblySpecMediaChannelAssemblySpecByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        MediaChannelAssemblySpec mediaChannelAssemblySpec = null;
        api.updateContextPathComputationContextPathCompServiceEndPointConnectionEndPointMediaChannelAssemblySpecMediaChannelAssemblySpecById(uuid, localId, connectionEndPointUuid, mediaChannelAssemblySpec);

        // TODO: test validations
    }
    
    /**
     * Update media-channel-connection-end-point-spec by ID
     *
     * Update operation of resource: media-channel-connection-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextPathComputationContextPathCompServiceEndPointConnectionEndPointMediaChannelConnectionEndPointSpecMediaChannelConnectionEndPointSpecByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        MediaChannelConnectionEndPointSpec mediaChannelConnectionEndPointSpec = null;
        api.updateContextPathComputationContextPathCompServiceEndPointConnectionEndPointMediaChannelConnectionEndPointSpecMediaChannelConnectionEndPointSpecById(uuid, localId, connectionEndPointUuid, mediaChannelConnectionEndPointSpec);

        // TODO: test validations
    }
    
    /**
     * Update name by ID
     *
     * Update operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextPathComputationContextPathCompServiceEndPointConnectionEndPointNameNameByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        String valueName = null;
        NameAndValue name = null;
        api.updateContextPathComputationContextPathCompServiceEndPointConnectionEndPointNameNameById(uuid, localId, connectionEndPointUuid, valueName, name);

        // TODO: test validations
    }
    
    /**
     * Update ots-connection-end-point-spec by ID
     *
     * Update operation of resource: ots-connection-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextPathComputationContextPathCompServiceEndPointConnectionEndPointOtsConnectionEndPointSpecOtsConnectionEndPointSpecByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        OtsConnectionEndPointSpec otsConnectionEndPointSpec = null;
        api.updateContextPathComputationContextPathCompServiceEndPointConnectionEndPointOtsConnectionEndPointSpecOtsConnectionEndPointSpecById(uuid, localId, connectionEndPointUuid, otsConnectionEndPointSpec);

        // TODO: test validations
    }
    
    /**
     * Update otsi-assembly-connection-end-point-spec by ID
     *
     * Update operation of resource: otsi-assembly-connection-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextPathComputationContextPathCompServiceEndPointConnectionEndPointOtsiAssemblyConnectionEndPointSpecOtsiAssemblyConnectionEndPointSpecByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        OtsiAssemblyConnectionEndPointSpec otsiAssemblyConnectionEndPointSpec = null;
        api.updateContextPathComputationContextPathCompServiceEndPointConnectionEndPointOtsiAssemblyConnectionEndPointSpecOtsiAssemblyConnectionEndPointSpecById(uuid, localId, connectionEndPointUuid, otsiAssemblyConnectionEndPointSpec);

        // TODO: test validations
    }
    
    /**
     * Update otsi-connection-end-point-spec by ID
     *
     * Update operation of resource: otsi-connection-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextPathComputationContextPathCompServiceEndPointConnectionEndPointOtsiConnectionEndPointSpecOtsiConnectionEndPointSpecByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        OtsiConnectionEndPointSpec otsiConnectionEndPointSpec = null;
        api.updateContextPathComputationContextPathCompServiceEndPointConnectionEndPointOtsiConnectionEndPointSpecOtsiConnectionEndPointSpecById(uuid, localId, connectionEndPointUuid, otsiConnectionEndPointSpec);

        // TODO: test validations
    }
    
    /**
     * Update sdm-connection-end-point-spec by ID
     *
     * Update operation of resource: sdm-connection-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextPathComputationContextPathCompServiceEndPointConnectionEndPointSdmConnectionEndPointSpecSdmConnectionEndPointSpecByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String connectionEndPointUuid = null;
        SdmConnectionEndPointSpec sdmConnectionEndPointSpec = null;
        api.updateContextPathComputationContextPathCompServiceEndPointConnectionEndPointSdmConnectionEndPointSpecSdmConnectionEndPointSpecById(uuid, localId, connectionEndPointUuid, sdmConnectionEndPointSpec);

        // TODO: test validations
    }
    
    /**
     * Update end-point by ID
     *
     * Update operation of resource: end-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextPathComputationContextPathCompServiceEndPointEndPointByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        PathServiceEndPoint endPoint = null;
        api.updateContextPathComputationContextPathCompServiceEndPointEndPointById(uuid, localId, endPoint);

        // TODO: test validations
    }
    
    /**
     * Update media-channel-service-interface-point-spec by ID
     *
     * Update operation of resource: media-channel-service-interface-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextPathComputationContextPathCompServiceEndPointMediaChannelServiceInterfacePointSpecMediaChannelServiceInterfacePointSpecByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        MediaChannelServiceInterfacePointSpec mediaChannelServiceInterfacePointSpec = null;
        api.updateContextPathComputationContextPathCompServiceEndPointMediaChannelServiceInterfacePointSpecMediaChannelServiceInterfacePointSpecById(uuid, localId, mediaChannelServiceInterfacePointSpec);

        // TODO: test validations
    }
    
    /**
     * Update name by ID
     *
     * Update operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextPathComputationContextPathCompServiceEndPointNameNameByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String valueName = null;
        NameAndValue name = null;
        api.updateContextPathComputationContextPathCompServiceEndPointNameNameById(uuid, localId, valueName, name);

        // TODO: test validations
    }
    
    /**
     * Update application-identifier by ID
     *
     * Update operation of resource: application-identifier
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextPathComputationContextPathCompServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigApplicationIdentifierApplicationIdentifierByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        ApplicationIdentifier applicationIdentifier = null;
        api.updateContextPathComputationContextPathCompServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigApplicationIdentifierApplicationIdentifierById(uuid, localId, applicationIdentifier);

        // TODO: test validations
    }
    
    /**
     * Update central-frequency by ID
     *
     * Update operation of resource: central-frequency
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextPathComputationContextPathCompServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigCentralFrequencyCentralFrequencyByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        CentralFrequency centralFrequency = null;
        api.updateContextPathComputationContextPathCompServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigCentralFrequencyCentralFrequencyById(uuid, localId, centralFrequency);

        // TODO: test validations
    }
    
    /**
     * Update frequency-constraint by ID
     *
     * Update operation of resource: frequency-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextPathComputationContextPathCompServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigCentralFrequencyFrequencyConstraintFrequencyConstraintByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        FrequencyConstraint frequencyConstraint = null;
        api.updateContextPathComputationContextPathCompServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigCentralFrequencyFrequencyConstraintFrequencyConstraintById(uuid, localId, frequencyConstraint);

        // TODO: test validations
    }
    
    /**
     * Update otsi-config by ID
     *
     * Update operation of resource: otsi-config
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextPathComputationContextPathCompServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigOtsiConfigByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        OtsiTerminationConfigPac otsiConfig = null;
        api.updateContextPathComputationContextPathCompServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigOtsiConfigById(uuid, localId, otsiConfig);

        // TODO: test validations
    }
    
    /**
     * Update frequency-constraint by ID
     *
     * Update operation of resource: frequency-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextPathComputationContextPathCompServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigSpectrumFrequencyConstraintFrequencyConstraintByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        FrequencyConstraint frequencyConstraint = null;
        api.updateContextPathComputationContextPathCompServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigSpectrumFrequencyConstraintFrequencyConstraintById(uuid, localId, frequencyConstraint);

        // TODO: test validations
    }
    
    /**
     * Update spectrum by ID
     *
     * Update operation of resource: spectrum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextPathComputationContextPathCompServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigSpectrumSpectrumByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        SpectrumBand spectrum = null;
        api.updateContextPathComputationContextPathCompServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigSpectrumSpectrumById(uuid, localId, spectrum);

        // TODO: test validations
    }
    
    /**
     * Update transmit-power by ID
     *
     * Update operation of resource: transmit-power
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextPathComputationContextPathCompServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigTransmitPowerTransmitPowerByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        PowerPropertiesPac transmitPower = null;
        api.updateContextPathComputationContextPathCompServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConfigTransmitPowerTransmitPowerById(uuid, localId, transmitPower);

        // TODO: test validations
    }
    
    /**
     * Update otsi-connectivity-service-end-point-spec by ID
     *
     * Update operation of resource: otsi-connectivity-service-end-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextPathComputationContextPathCompServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConnectivityServiceEndPointSpecByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        OtsiConnectivityServiceEndPointSpec otsiConnectivityServiceEndPointSpec = null;
        api.updateContextPathComputationContextPathCompServiceEndPointOtsiConnectivityServiceEndPointSpecOtsiConnectivityServiceEndPointSpecById(uuid, localId, otsiConnectivityServiceEndPointSpec);

        // TODO: test validations
    }
    
    /**
     * Update sdm-service-interface-point-spec by ID
     *
     * Update operation of resource: sdm-service-interface-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextPathComputationContextPathCompServiceEndPointSdmServiceInterfacePointSpecSdmServiceInterfacePointSpecByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        SdmServiceInterfacePointSpec sdmServiceInterfacePointSpec = null;
        api.updateContextPathComputationContextPathCompServiceEndPointSdmServiceInterfacePointSpecSdmServiceInterfacePointSpecById(uuid, localId, sdmServiceInterfacePointSpec);

        // TODO: test validations
    }
    
    /**
     * Update media-channel-service-interface-point-spec by ID
     *
     * Update operation of resource: media-channel-service-interface-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextPathComputationContextPathCompServiceEndPointServiceInterfacePointMediaChannelServiceInterfacePointSpecMediaChannelServiceInterfacePointSpecByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        MediaChannelServiceInterfacePointSpec mediaChannelServiceInterfacePointSpec = null;
        api.updateContextPathComputationContextPathCompServiceEndPointServiceInterfacePointMediaChannelServiceInterfacePointSpecMediaChannelServiceInterfacePointSpecById(uuid, localId, serviceInterfacePointUuid, mediaChannelServiceInterfacePointSpec);

        // TODO: test validations
    }
    
    /**
     * Update name by ID
     *
     * Update operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextPathComputationContextPathCompServiceEndPointServiceInterfacePointNameNameByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        String valueName = null;
        NameAndValue name = null;
        api.updateContextPathComputationContextPathCompServiceEndPointServiceInterfacePointNameNameById(uuid, localId, serviceInterfacePointUuid, valueName, name);

        // TODO: test validations
    }
    
    /**
     * Update otsi-service-interface-point-spec by ID
     *
     * Update operation of resource: otsi-service-interface-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextPathComputationContextPathCompServiceEndPointServiceInterfacePointOtsiServiceInterfacePointSpecOtsiServiceInterfacePointSpecByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        OtsiServiceInterfacePointSpec otsiServiceInterfacePointSpec = null;
        api.updateContextPathComputationContextPathCompServiceEndPointServiceInterfacePointOtsiServiceInterfacePointSpecOtsiServiceInterfacePointSpecById(uuid, localId, serviceInterfacePointUuid, otsiServiceInterfacePointSpec);

        // TODO: test validations
    }
    
    /**
     * Update sdm-service-interface-point-spec by ID
     *
     * Update operation of resource: sdm-service-interface-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextPathComputationContextPathCompServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmServiceInterfacePointSpecByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        SdmServiceInterfacePointSpec sdmServiceInterfacePointSpec = null;
        api.updateContextPathComputationContextPathCompServiceEndPointServiceInterfacePointSdmServiceInterfacePointSpecSdmServiceInterfacePointSpecById(uuid, localId, serviceInterfacePointUuid, sdmServiceInterfacePointSpec);

        // TODO: test validations
    }
    
    /**
     * Update service-interface-point by ID
     *
     * Update operation of resource: service-interface-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextPathComputationContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePointByIdTest() throws ApiException {
        String uuid = null;
        String localId = null;
        ServiceInterfacePointRef serviceInterfacePoint = null;
        api.updateContextPathComputationContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePointById(uuid, localId, serviceInterfacePoint);

        // TODO: test validations
    }
    
    /**
     * Update service-interface-point by ID
     *
     * Update operation of resource: service-interface-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextPathComputationContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePointById_0Test() throws ApiException {
        String uuid = null;
        String localId = null;
        String serviceInterfacePointUuid = null;
        ServiceInterfacePointSchema serviceInterfacePoint = null;
        api.updateContextPathComputationContextPathCompServiceEndPointServiceInterfacePointServiceInterfacePointById_0(uuid, localId, serviceInterfacePointUuid, serviceInterfacePoint);

        // TODO: test validations
    }
    
    /**
     * Update name by ID
     *
     * Update operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextPathComputationContextPathCompServiceNameNameByIdTest() throws ApiException {
        String uuid = null;
        String valueName = null;
        NameAndValue name = null;
        api.updateContextPathComputationContextPathCompServiceNameNameById(uuid, valueName, name);

        // TODO: test validations
    }
    
    /**
     * Update name by ID
     *
     * Update operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextPathComputationContextPathCompServiceObjectiveFunctionNameNameByIdTest() throws ApiException {
        String uuid = null;
        String valueName = null;
        NameAndValue name = null;
        api.updateContextPathComputationContextPathCompServiceObjectiveFunctionNameNameById(uuid, valueName, name);

        // TODO: test validations
    }
    
    /**
     * Update objective-function by ID
     *
     * Update operation of resource: objective-function
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextPathComputationContextPathCompServiceObjectiveFunctionObjectiveFunctionByIdTest() throws ApiException {
        String uuid = null;
        PathObjectiveFunction objectiveFunction = null;
        api.updateContextPathComputationContextPathCompServiceObjectiveFunctionObjectiveFunctionById(uuid, objectiveFunction);

        // TODO: test validations
    }
    
    /**
     * Update name by ID
     *
     * Update operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextPathComputationContextPathCompServiceOptimizationConstraintNameNameByIdTest() throws ApiException {
        String uuid = null;
        String valueName = null;
        NameAndValue name = null;
        api.updateContextPathComputationContextPathCompServiceOptimizationConstraintNameNameById(uuid, valueName, name);

        // TODO: test validations
    }
    
    /**
     * Update optimization-constraint by ID
     *
     * Update operation of resource: optimization-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextPathComputationContextPathCompServiceOptimizationConstraintOptimizationConstraintByIdTest() throws ApiException {
        String uuid = null;
        PathOptimizationConstraint optimizationConstraint = null;
        api.updateContextPathComputationContextPathCompServiceOptimizationConstraintOptimizationConstraintById(uuid, optimizationConstraint);

        // TODO: test validations
    }
    
    /**
     * Update path-comp-service by ID
     *
     * Update operation of resource: path-comp-service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextPathComputationContextPathCompServicePathCompServiceByIdTest() throws ApiException {
        String uuid = null;
        PathComputationService pathCompService = null;
        api.updateContextPathComputationContextPathCompServicePathCompServiceById(uuid, pathCompService);

        // TODO: test validations
    }
    
    /**
     * Update cost-characteristic by ID
     *
     * Update operation of resource: cost-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextPathComputationContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String costName = null;
        CostCharacteristic costCharacteristic = null;
        api.updateContextPathComputationContextPathCompServiceRoutingConstraintCostCharacteristicCostCharacteristicById(uuid, costName, costCharacteristic);

        // TODO: test validations
    }
    
    /**
     * Update latency-characteristic by ID
     *
     * Update operation of resource: latency-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextPathComputationContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String trafficPropertyName = null;
        LatencyCharacteristic latencyCharacteristic = null;
        api.updateContextPathComputationContextPathCompServiceRoutingConstraintLatencyCharacteristicLatencyCharacteristicById(uuid, trafficPropertyName, latencyCharacteristic);

        // TODO: test validations
    }
    
    /**
     * Update risk-diversity-characteristic by ID
     *
     * Update operation of resource: risk-diversity-characteristic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextPathComputationContextPathCompServiceRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristicByIdTest() throws ApiException {
        String uuid = null;
        String riskCharacteristicName = null;
        RiskCharacteristic riskDiversityCharacteristic = null;
        api.updateContextPathComputationContextPathCompServiceRoutingConstraintRiskDiversityCharacteristicRiskDiversityCharacteristicById(uuid, riskCharacteristicName, riskDiversityCharacteristic);

        // TODO: test validations
    }
    
    /**
     * Update routing-constraint by ID
     *
     * Update operation of resource: routing-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextPathComputationContextPathCompServiceRoutingConstraintRoutingConstraintByIdTest() throws ApiException {
        String uuid = null;
        RoutingConstraint routingConstraint = null;
        api.updateContextPathComputationContextPathCompServiceRoutingConstraintRoutingConstraintById(uuid, routingConstraint);

        // TODO: test validations
    }
    
    /**
     * Update topology-constraint by ID
     *
     * Update operation of resource: topology-constraint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextPathComputationContextPathCompServiceTopologyConstraintTopologyConstraintByIdTest() throws ApiException {
        String uuid = null;
        TopologyConstraint topologyConstraint = null;
        api.updateContextPathComputationContextPathCompServiceTopologyConstraintTopologyConstraintById(uuid, topologyConstraint);

        // TODO: test validations
    }
    
    /**
     * Update path-computation-context by ID
     *
     * Update operation of resource: path-computation-context
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextPathComputationContextPathComputationContextByIdTest() throws ApiException {
        PathComputationContext pathComputationContext = null;
        api.updateContextPathComputationContextPathComputationContextById(pathComputationContext);

        // TODO: test validations
    }
    
    /**
     * Update media-channel-service-interface-point-spec by ID
     *
     * Update operation of resource: media-channel-service-interface-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextServiceInterfacePointMediaChannelServiceInterfacePointSpecMediaChannelServiceInterfacePointSpecByIdTest() throws ApiException {
        String uuid = null;
        MediaChannelServiceInterfacePointSpec mediaChannelServiceInterfacePointSpec = null;
        api.updateContextServiceInterfacePointMediaChannelServiceInterfacePointSpecMediaChannelServiceInterfacePointSpecById(uuid, mediaChannelServiceInterfacePointSpec);

        // TODO: test validations
    }
    
    /**
     * Update name by ID
     *
     * Update operation of resource: name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextServiceInterfacePointNameNameByIdTest() throws ApiException {
        String uuid = null;
        String valueName = null;
        NameAndValue name = null;
        api.updateContextServiceInterfacePointNameNameById(uuid, valueName, name);

        // TODO: test validations
    }
    
    /**
     * Update otsi-service-interface-point-spec by ID
     *
     * Update operation of resource: otsi-service-interface-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextServiceInterfacePointOtsiServiceInterfacePointSpecOtsiServiceInterfacePointSpecByIdTest() throws ApiException {
        String uuid = null;
        OtsiServiceInterfacePointSpec otsiServiceInterfacePointSpec = null;
        api.updateContextServiceInterfacePointOtsiServiceInterfacePointSpecOtsiServiceInterfacePointSpecById(uuid, otsiServiceInterfacePointSpec);

        // TODO: test validations
    }
    
    /**
     * Update sdm-service-interface-point-spec by ID
     *
     * Update operation of resource: sdm-service-interface-point-spec
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextServiceInterfacePointSdmServiceInterfacePointSpecSdmServiceInterfacePointSpecByIdTest() throws ApiException {
        String uuid = null;
        SdmServiceInterfacePointSpec sdmServiceInterfacePointSpec = null;
        api.updateContextServiceInterfacePointSdmServiceInterfacePointSpecSdmServiceInterfacePointSpecById(uuid, sdmServiceInterfacePointSpec);

        // TODO: test validations
    }
    
    /**
     * Update service-interface-point by ID
     *
     * Update operation of resource: service-interface-point
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextServiceInterfacePointServiceInterfacePointByIdTest() throws ApiException {
        String uuid = null;
        ServiceInterfacePointSchema serviceInterfacePoint = null;
        api.updateContextServiceInterfacePointServiceInterfacePointById(uuid, serviceInterfacePoint);

        // TODO: test validations
    }
    
    /**
     * Update topology-context by ID
     *
     * Update operation of resource: topology-context
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextTopologyContextTopologyContextByIdTest() throws ApiException {
        TopologyContext topologyContext = null;
        api.updateContextTopologyContextTopologyContextById(topologyContext);

        // TODO: test validations
    }
    
}
